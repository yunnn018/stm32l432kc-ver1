
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08005d9c  08005d9c  00006d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060bc  080060bc  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060bc  080060bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c4  080060c4  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000070c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080060cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000070  08006138  00008070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08006138  000086dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221ab  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004081  00000000  00000000  0002a247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000123c6  00000000  00000000  0002e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00040690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d12  00000000  00000000  00041898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245bb  00000000  00000000  000435aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023230  00000000  00000000  00067b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd01f  00000000  00000000  0008ad95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00167db4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000394c  00000000  00000000  00167df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0016b744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d84 	.word	0x08005d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d84 	.word	0x08005d84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800059e:	4826      	ldr	r0, [pc, #152]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005a0:	4926      	ldr	r1, [pc, #152]	@ (800063c <MX_ADC1_Init+0xa0>)
{
 80005a2:	b086      	sub	sp, #24
  hadc1.Instance = ADC1;
 80005a4:	6001      	str	r1, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005aa:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005ac:	6041      	str	r1, [r0, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ae:	2104      	movs	r1, #4
 80005b0:	e9c0 2104 	strd	r2, r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 2;
 80005b4:	2102      	movs	r1, #2
 80005b6:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80005b8:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
  ADC_ChannelConfTypeDef sConfig = {0};
 80005bc:	2300      	movs	r3, #0
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80005be:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c4:	e9cd 3300 	strd	r3, r3, [sp]
 80005c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80005cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d4:	8303      	strh	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005da:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005dc:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e0:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e6:	f000 fff5 	bl	80015d4 <HAL_ADC_Init>
 80005ea:	b9d0      	cbnz	r0, 8000622 <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ec:	4914      	ldr	r1, [pc, #80]	@ (8000640 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	4812      	ldr	r0, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f0:	2206      	movs	r2, #6
 80005f2:	e9cd 1200 	strd	r1, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f6:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005f8:	247f      	movs	r4, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fa:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	4669      	mov	r1, sp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
  sConfig.Offset = 0;
 8000602:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	f001 fa05 	bl	8001a14 <HAL_ADC_ConfigChannel>
 800060a:	b988      	cbnz	r0, 8000630 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000610:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000614:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	f001 f9fc 	bl	8001a14 <HAL_ADC_ConfigChannel>
 800061c:	b920      	cbnz	r0, 8000628 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061e:	b006      	add	sp, #24
 8000620:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000622:	f000 f9cf 	bl	80009c4 <Error_Handler>
 8000626:	e7e1      	b.n	80005ec <MX_ADC1_Init+0x50>
    Error_Handler();
 8000628:	f000 f9cc 	bl	80009c4 <Error_Handler>
}
 800062c:	b006      	add	sp, #24
 800062e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000630:	f000 f9c8 	bl	80009c4 <Error_Handler>
 8000634:	e7ea      	b.n	800060c <MX_ADC1_Init+0x70>
 8000636:	bf00      	nop
 8000638:	200000d4 	.word	0x200000d4
 800063c:	50040000 	.word	0x50040000
 8000640:	14f00020 	.word	0x14f00020
 8000644:	19200040 	.word	0x19200040

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	4604      	mov	r4, r0
 800064c:	b09c      	sub	sp, #112	@ 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	2254      	movs	r2, #84	@ 0x54
 8000652:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000658:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800065c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065e:	f004 fd7a 	bl	8005156 <memset>
  if(adcHandle->Instance==ADC1)
 8000662:	4b32      	ldr	r3, [pc, #200]	@ (800072c <HAL_ADC_MspInit+0xe4>)
 8000664:	6822      	ldr	r2, [r4, #0]
 8000666:	429a      	cmp	r2, r3
 8000668:	d001      	beq.n	800066e <HAL_ADC_MspInit+0x26>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800066a:	b01c      	add	sp, #112	@ 0x70
 800066c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800066e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000672:	9207      	str	r2, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000678:	9219      	str	r2, [sp, #100]	@ 0x64
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800067a:	2218      	movs	r2, #24
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800067c:	2301      	movs	r3, #1
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800067e:	920a      	str	r2, [sp, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000680:	2207      	movs	r2, #7
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000682:	e9cd 3308 	strd	r3, r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000686:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000688:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800068a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068e:	a807      	add	r0, sp, #28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000690:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000694:	920e      	str	r2, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000696:	f002 fdd3 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	2800      	cmp	r0, #0
 800069c:	d140      	bne.n	8000720 <HAL_ADC_MspInit+0xd8>
    __HAL_RCC_ADC_CLK_ENABLE();
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <HAL_ADC_MspInit+0xe8>)
    hdma_adc1.Instance = DMA1_Channel1;
 80006a0:	4d24      	ldr	r5, [pc, #144]	@ (8000734 <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80006a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80006a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006c4:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006ca:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f001 feb2 	bl	8002440 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006de:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006e0:	e9c5 3600 	strd	r3, r6, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006e8:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006f0:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f6:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f8:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006fc:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000700:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000702:	f001 fda1 	bl	8002248 <HAL_DMA_Init>
 8000706:	b970      	cbnz	r0, 8000726 <HAL_ADC_MspInit+0xde>
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2101      	movs	r1, #1
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800070c:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 800070e:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000710:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000712:	f001 fd35 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000716:	2012      	movs	r0, #18
 8000718:	f001 fd6e 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 800071c:	b01c      	add	sp, #112	@ 0x70
 800071e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000720:	f000 f950 	bl	80009c4 <Error_Handler>
 8000724:	e7bb      	b.n	800069e <HAL_ADC_MspInit+0x56>
      Error_Handler();
 8000726:	f000 f94d 	bl	80009c4 <Error_Handler>
 800072a:	e7ed      	b.n	8000708 <HAL_ADC_MspInit+0xc0>
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	2000008c 	.word	0x2000008c
 8000738:	40020008 	.word	0x40020008

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800073c:	b500      	push	{lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_DMA_Init+0x2c>)
 8000740:	6c98      	ldr	r0, [r3, #72]	@ 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000742:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000744:	4308      	orrs	r0, r1
{
 8000746:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000748:	6498      	str	r0, [r3, #72]	@ 0x48
 800074a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800074c:	400b      	ands	r3, r1
 800074e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000754:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000756:	f001 fd13 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800075a:	200b      	movs	r0, #11

}
 800075c:	b003      	add	sp, #12
 800075e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000762:	f001 bd49 	b.w	80021f8 <HAL_NVIC_EnableIRQ>
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	2200      	movs	r2, #0
{
 8000770:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8000776:	e9cd 2206 	strd	r2, r2, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_GPIO_Init+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000780:	4c17      	ldr	r4, [pc, #92]	@ (80007e0 <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	f041 0104 	orr.w	r1, r1, #4
 8000786:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8000788:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800078a:	f001 0104 	and.w	r1, r1, #4
 800078e:	9101      	str	r1, [sp, #4]
 8000790:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000794:	f041 0101 	orr.w	r1, r1, #1
 8000798:	64d9      	str	r1, [r3, #76]	@ 0x4c
 800079a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800079c:	f001 0101 	and.w	r1, r1, #1
 80007a0:	9102      	str	r1, [sp, #8]
 80007a2:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80007a6:	f041 0102 	orr.w	r1, r1, #2
 80007aa:	64d9      	str	r1, [r3, #76]	@ 0x4c
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80007b4:	4620      	mov	r0, r4
 80007b6:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ba:	f001 ffdb 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007be:	2210      	movs	r2, #16
 80007c0:	2301      	movs	r3, #1
 80007c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007c8:	2200      	movs	r2, #0
 80007ca:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f001 fe35 	bl	8002440 <HAL_GPIO_Init>

}
 80007d6:	b00a      	add	sp, #40	@ 0x28
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400
 80007e4:	00000000 	.word	0x00000000

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b510      	push	{r4, lr}
 80007ea:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ec:	2244      	movs	r2, #68	@ 0x44
 80007ee:	2100      	movs	r1, #0
 80007f0:	a806      	add	r0, sp, #24
 80007f2:	f004 fcb0 	bl	8005156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000800:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000804:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000806:	f001 ffcb 	bl	80027a0 <HAL_PWREx_ControlVoltageScaling>
 800080a:	b108      	cbz	r0, 8000810 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080e:	e7fe      	b.n	800080e <SystemClock_Config+0x26>
  HAL_PWR_EnableBkUpAccess();
 8000810:	f001 ffb6 	bl	8002780 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000814:	491c      	ldr	r1, [pc, #112]	@ (8000888 <SystemClock_Config+0xa0>)
 8000816:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800081a:	f022 0218 	bic.w	r2, r2, #24
 800081e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000822:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000880 <SystemClock_Config+0x98>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000826:	2214      	movs	r2, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000828:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800082a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800082c:	2160      	movs	r1, #96	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000830:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000834:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000836:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000838:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 36;
 800083a:	2124      	movs	r1, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083e:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000842:	2207      	movs	r2, #7
 8000844:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000848:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 36;
 800084c:	9113      	str	r1, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f002 f87d 	bl	800294c <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	b108      	cbz	r0, 800085a <SystemClock_Config+0x72>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <SystemClock_Config+0x70>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000860:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	f002 fb7f 	bl	8002f70 <HAL_RCC_ClockConfig>
 8000872:	b108      	cbz	r0, 8000878 <SystemClock_Config+0x90>
 8000874:	b672      	cpsid	i
  while (1)
 8000876:	e7fe      	b.n	8000876 <SystemClock_Config+0x8e>
  HAL_RCCEx_EnableMSIPLLMode();
 8000878:	f002 fe38 	bl	80034ec <HAL_RCCEx_EnableMSIPLLMode>
}
 800087c:	b018      	add	sp, #96	@ 0x60
 800087e:	bd10      	pop	{r4, pc}
 8000880:	00000001 	.word	0x00000001
 8000884:	00000000 	.word	0x00000000
 8000888:	40021000 	.word	0x40021000

0800088c <main>:
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
  HAL_Init();
 8000890:	f000 fe6c 	bl	800156c <HAL_Init>
  HAL_Delay(2999);
 8000894:	f640 30b7 	movw	r0, #2999	@ 0xbb7
 8000898:	f000 fe8a 	bl	80015b0 <HAL_Delay>
  SystemClock_Config();
 800089c:	f7ff ffa4 	bl	80007e8 <SystemClock_Config>
  MX_GPIO_Init();
 80008a0:	f7ff ff64 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 80008a4:	f7ff ff4a 	bl	800073c <MX_DMA_Init>
  MX_TIM1_Init();
 80008a8:	f000 fcf6 	bl	8001298 <MX_TIM1_Init>
  MX_ADC1_Init();
 80008ac:	f7ff fe76 	bl	800059c <MX_ADC1_Init>
  MX_TIM7_Init();
 80008b0:	f000 fbe2 	bl	8001078 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80008b4:	f000 fd9c 	bl	80013f0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80008b8:	f000 fb66 	bl	8000f88 <MX_TIM2_Init>
  MX_TIM6_Init();
 80008bc:	f000 fbb2 	bl	8001024 <MX_TIM6_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80008c0:	217f      	movs	r1, #127	@ 0x7f
 80008c2:	4829      	ldr	r0, [pc, #164]	@ (8000968 <main+0xdc>)
  PID_Init(&Torque,&Flux,&Speed,&PLL_w,&Q);
 80008c4:	4c29      	ldr	r4, [pc, #164]	@ (800096c <main+0xe0>)
 80008c6:	4d2a      	ldr	r5, [pc, #168]	@ (8000970 <main+0xe4>)
 80008c8:	4f2a      	ldr	r7, [pc, #168]	@ (8000974 <main+0xe8>)
	  printf(",%d,%d,%d,%d,%d\r\n",IAlphaBeta.ialpha,IAlphaBeta.ibeta,Idq.id,Idq.iq,msecCnt);
 80008ca:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 80009a8 <main+0x11c>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80008ce:	f001 fbef 	bl	80020b0 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	4828      	ldr	r0, [pc, #160]	@ (8000978 <main+0xec>)
 80008d6:	f002 ffa9 	bl	800382c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008da:	2100      	movs	r1, #0
 80008dc:	4826      	ldr	r0, [pc, #152]	@ (8000978 <main+0xec>)
 80008de:	f003 fc33 	bl	8004148 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008e2:	2104      	movs	r1, #4
 80008e4:	4824      	ldr	r0, [pc, #144]	@ (8000978 <main+0xec>)
 80008e6:	f002 ffa1 	bl	800382c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80008ea:	2104      	movs	r1, #4
 80008ec:	4822      	ldr	r0, [pc, #136]	@ (8000978 <main+0xec>)
 80008ee:	f003 fc2b 	bl	8004148 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80008f2:	2108      	movs	r1, #8
 80008f4:	4820      	ldr	r0, [pc, #128]	@ (8000978 <main+0xec>)
 80008f6:	f002 ff99 	bl	800382c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80008fa:	2108      	movs	r1, #8
 80008fc:	481e      	ldr	r0, [pc, #120]	@ (8000978 <main+0xec>)
 80008fe:	f003 fc23 	bl	8004148 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000902:	210c      	movs	r1, #12
 8000904:	481c      	ldr	r0, [pc, #112]	@ (8000978 <main+0xec>)
 8000906:	f002 fe99 	bl	800363c <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)DataBuffer, BATCH_DATA_LEN);
 800090a:	491c      	ldr	r1, [pc, #112]	@ (800097c <main+0xf0>)
 800090c:	4816      	ldr	r0, [pc, #88]	@ (8000968 <main+0xdc>)
 800090e:	2220      	movs	r2, #32
 8000910:	f001 fb40 	bl	8001f94 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4818      	ldr	r0, [pc, #96]	@ (8000978 <main+0xec>)
 8000916:	f002 fe65 	bl	80035e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800091a:	4819      	ldr	r0, [pc, #100]	@ (8000980 <main+0xf4>)
 800091c:	f002 fe62 	bl	80035e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000920:	4818      	ldr	r0, [pc, #96]	@ (8000984 <main+0xf8>)
 8000922:	f002 fe5f 	bl	80035e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // 開啟中斷
 8000926:	4818      	ldr	r0, [pc, #96]	@ (8000988 <main+0xfc>)
 8000928:	f002 fe5c 	bl	80035e4 <HAL_TIM_Base_Start_IT>
  PID_Init(&Torque,&Flux,&Speed,&PLL_w,&Q);
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <main+0x100>)
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <main+0x104>)
 8000930:	4918      	ldr	r1, [pc, #96]	@ (8000994 <main+0x108>)
 8000932:	9400      	str	r4, [sp, #0]
 8000934:	4818      	ldr	r0, [pc, #96]	@ (8000998 <main+0x10c>)
 8000936:	4c19      	ldr	r4, [pc, #100]	@ (800099c <main+0x110>)
 8000938:	f004 fa52 	bl	8004de0 <PID_Init>
  I0 = 300;
 800093c:	4918      	ldr	r1, [pc, #96]	@ (80009a0 <main+0x114>)
  Iq_ref = I0;
 800093e:	4a19      	ldr	r2, [pc, #100]	@ (80009a4 <main+0x118>)
  I0 = 300;
 8000940:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000944:	800b      	strh	r3, [r1, #0]
  Iq_ref = I0;
 8000946:	8013      	strh	r3, [r2, #0]
	  printf(",%d,%d,%d,%d,%d\r\n",IAlphaBeta.ialpha,IAlphaBeta.ibeta,Idq.id,Idq.iq,msecCnt);
 8000948:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 800094c:	683e      	ldr	r6, [r7, #0]
 800094e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8000952:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8000956:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800095a:	e9cd 0600 	strd	r0, r6, [sp]
 800095e:	4640      	mov	r0, r8
 8000960:	f004 fba4 	bl	80050ac <iprintf>
  while (1)
 8000964:	e7f0      	b.n	8000948 <main+0xbc>
 8000966:	bf00      	nop
 8000968:	200000d4 	.word	0x200000d4
 800096c:	20000174 	.word	0x20000174
 8000970:	200001f4 	.word	0x200001f4
 8000974:	200001d8 	.word	0x200001d8
 8000978:	20000350 	.word	0x20000350
 800097c:	20000510 	.word	0x20000510
 8000980:	20000260 	.word	0x20000260
 8000984:	200002b0 	.word	0x200002b0
 8000988:	20000300 	.word	0x20000300
 800098c:	20000188 	.word	0x20000188
 8000990:	2000019c 	.word	0x2000019c
 8000994:	200001b0 	.word	0x200001b0
 8000998:	200001c4 	.word	0x200001c4
 800099c:	20000244 	.word	0x20000244
 80009a0:	20000172 	.word	0x20000172
 80009a4:	20000170 	.word	0x20000170
 80009a8:	08005d9c 	.word	0x08005d9c

080009ac <_write>:
{
 80009ac:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 100);
 80009ae:	2364      	movs	r3, #100	@ 0x64
{
 80009b0:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 100);
 80009b2:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <_write+0x14>)
 80009b4:	b292      	uxth	r2, r2
 80009b6:	f003 fc99 	bl	80042ec <HAL_UART_Transmit>
}
 80009ba:	4620      	mov	r0, r4
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	bf00      	nop
 80009c0:	200003a0 	.word	0x200003a0

080009c4 <Error_Handler>:
 80009c4:	b672      	cpsid	i
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <Error_Handler+0x2>

080009c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_MspInit+0x2c>)
 80009ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009cc:	f042 0201 	orr.w	r2, r2, #1
{
 80009d0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80009d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009d6:	f002 0201 	and.w	r2, r2, #1
 80009da:	9200      	str	r2, [sp, #0]
 80009dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80009e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f0:	b002      	add	sp, #8
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler>
 80009fa:	bf00      	nop

080009fc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <HardFault_Handler>
 80009fe:	bf00      	nop

08000a00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler>
 8000a02:	bf00      	nop

08000a04 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <BusFault_Handler>
 8000a06:	bf00      	nop

08000a08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler>
 8000a0a:	bf00      	nop

08000a0c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(msecCnt < 20000) //20秒
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <SysTick_Handler+0x18>)
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a20:	4291      	cmp	r1, r2
 8000a22:	d802      	bhi.n	8000a2a <SysTick_Handler+0x12>
		msecCnt++;
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	3201      	adds	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 bdaf 	b.w	800158c <HAL_IncTick>
 8000a2e:	bf00      	nop
 8000a30:	200001d8 	.word	0x200001d8

08000a34 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a34:	4801      	ldr	r0, [pc, #4]	@ (8000a3c <DMA1_Channel1_IRQHandler+0x8>)
 8000a36:	f001 bcb5 	b.w	80023a4 <HAL_DMA_IRQHandler>
 8000a3a:	bf00      	nop
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a40:	4801      	ldr	r0, [pc, #4]	@ (8000a48 <ADC1_IRQHandler+0x8>)
 8000a42:	f000 bea5 	b.w	8001790 <HAL_ADC_IRQHandler>
 8000a46:	bf00      	nop
 8000a48:	200000d4 	.word	0x200000d4

08000a4c <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a4c:	4801      	ldr	r0, [pc, #4]	@ (8000a54 <TIM1_BRK_TIM15_IRQHandler+0x8>)
 8000a4e:	f003 b9c5 	b.w	8003ddc <HAL_TIM_IRQHandler>
 8000a52:	bf00      	nop
 8000a54:	20000350 	.word	0x20000350

08000a58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a5a:	4d5f      	ldr	r5, [pc, #380]	@ (8000bd8 <TIM1_UP_TIM16_IRQHandler+0x180>)
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
  adc_avg = ADC_AverageValue();
 8000a5c:	4c5f      	ldr	r4, [pc, #380]	@ (8000bdc <TIM1_UP_TIM16_IRQHandler+0x184>)
{
 8000a5e:	b08b      	sub	sp, #44	@ 0x2c
  HAL_TIM_IRQHandler(&htim1);
 8000a60:	4628      	mov	r0, r5
 8000a62:	f003 f9bb 	bl	8003ddc <HAL_TIM_IRQHandler>
  adc_avg = ADC_AverageValue();
 8000a66:	a806      	add	r0, sp, #24
 8000a68:	f003 ff6a 	bl	8004940 <ADC_AverageValue>
 8000a6c:	9b06      	ldr	r3, [sp, #24]
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	9b07      	ldr	r3, [sp, #28]
 8000a72:	6063      	str	r3, [r4, #4]
 8000a74:	9a08      	ldr	r2, [sp, #32]
 8000a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a78:	60e3      	str	r3, [r4, #12]
 8000a7a:	60a2      	str	r2, [r4, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
  if(msecCnt >= 3000 && msecCnt <= 4000)
 8000a7c:	4c58      	ldr	r4, [pc, #352]	@ (8000be0 <TIM1_UP_TIM16_IRQHandler+0x188>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a7e:	4859      	ldr	r0, [pc, #356]	@ (8000be4 <TIM1_UP_TIM16_IRQHandler+0x18c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	2110      	movs	r1, #16
 8000a84:	f001 fe76 	bl	8002774 <HAL_GPIO_WritePin>
  if(msecCnt >= 3000 && msecCnt <= 4000)
 8000a88:	6822      	ldr	r2, [r4, #0]
 8000a8a:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d903      	bls.n	8000a9a <TIM1_UP_TIM16_IRQHandler+0x42>
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000a98:	d90f      	bls.n	8000aba <TIM1_UP_TIM16_IRQHandler+0x62>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
  }

  if(msecCnt > 4000 && msecCnt < 4500)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000aa0:	d904      	bls.n	8000aac <TIM1_UP_TIM16_IRQHandler+0x54>
 8000aa2:	6822      	ldr	r2, [r4, #0]
 8000aa4:	f241 1393 	movw	r3, #4499	@ 0x1193
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d966      	bls.n	8000b7a <TIM1_UP_TIM16_IRQHandler+0x122>
	  VAlphaBeta = Rev_Park(Vdq,0);
	  CALC_SVPWM(&VAlphaBeta);

  }

  if (msecCnt > 5000)
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d807      	bhi.n	8000ac6 <TIM1_UP_TIM16_IRQHandler+0x6e>
	  if(msecCnt > 6500) Qi = Qinner(Vdq, &Idq, wm_e*24/10);	//
	  CALC_SVPWM(&VAlphaBeta);
  }

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ab6:	b00b      	add	sp, #44	@ 0x2c
 8000ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000aba:	682b      	ldr	r3, [r5, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000ac0:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ac4:	e7e9      	b.n	8000a9a <TIM1_UP_TIM16_IRQHandler+0x42>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ac6:	4847      	ldr	r0, [pc, #284]	@ (8000be4 <TIM1_UP_TIM16_IRQHandler+0x18c>)
	  Iab = Get_Phase_Currents(&adc_avg, &Ioffset);
 8000ac8:	4d47      	ldr	r5, [pc, #284]	@ (8000be8 <TIM1_UP_TIM16_IRQHandler+0x190>)
	  IAlphaBeta = Clarke(&Iab);
 8000aca:	4e48      	ldr	r6, [pc, #288]	@ (8000bec <TIM1_UP_TIM16_IRQHandler+0x194>)
	  Idq = Park(&IAlphaBeta,Theta_e);
 8000acc:	4f48      	ldr	r7, [pc, #288]	@ (8000bf0 <TIM1_UP_TIM16_IRQHandler+0x198>)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	f001 fe4f 	bl	8002774 <HAL_GPIO_WritePin>
	  Iab = Get_Phase_Currents(&adc_avg, &Ioffset);
 8000ad6:	4a47      	ldr	r2, [pc, #284]	@ (8000bf4 <TIM1_UP_TIM16_IRQHandler+0x19c>)
 8000ad8:	4940      	ldr	r1, [pc, #256]	@ (8000bdc <TIM1_UP_TIM16_IRQHandler+0x184>)
 8000ada:	a806      	add	r0, sp, #24
 8000adc:	f004 f852 	bl	8004b84 <Get_Phase_Currents>
 8000ae0:	9b06      	ldr	r3, [sp, #24]
 8000ae2:	602b      	str	r3, [r5, #0]
 8000ae4:	9b07      	ldr	r3, [sp, #28]
 8000ae6:	606b      	str	r3, [r5, #4]
 8000ae8:	9a08      	ldr	r2, [sp, #32]
 8000aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000aec:	60eb      	str	r3, [r5, #12]
	  IAlphaBeta = Clarke(&Iab);
 8000aee:	4629      	mov	r1, r5
 8000af0:	a806      	add	r0, sp, #24
	  Iab = Get_Phase_Currents(&adc_avg, &Ioffset);
 8000af2:	60aa      	str	r2, [r5, #8]
	  IAlphaBeta = Clarke(&Iab);
 8000af4:	f004 f852 	bl	8004b9c <Clarke>
 8000af8:	9b06      	ldr	r3, [sp, #24]
 8000afa:	6033      	str	r3, [r6, #0]
 8000afc:	9b07      	ldr	r3, [sp, #28]
 8000afe:	6073      	str	r3, [r6, #4]
 8000b00:	9b08      	ldr	r3, [sp, #32]
 8000b02:	60b3      	str	r3, [r6, #8]
	  Idq = Park(&IAlphaBeta,Theta_e);
 8000b04:	4d3c      	ldr	r5, [pc, #240]	@ (8000bf8 <TIM1_UP_TIM16_IRQHandler+0x1a0>)
 8000b06:	883a      	ldrh	r2, [r7, #0]
	  IAlphaBeta = Clarke(&Iab);
 8000b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b0a:	60f3      	str	r3, [r6, #12]
	  Idq = Park(&IAlphaBeta,Theta_e);
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	a806      	add	r0, sp, #24
 8000b10:	f004 f854 	bl	8004bbc <Park>
 8000b14:	9b06      	ldr	r3, [sp, #24]
 8000b16:	602b      	str	r3, [r5, #0]
 8000b18:	9b08      	ldr	r3, [sp, #32]
 8000b1a:	60ab      	str	r3, [r5, #8]
 8000b1c:	9b07      	ldr	r3, [sp, #28]
 8000b1e:	606b      	str	r3, [r5, #4]
 8000b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	  Vdq.vd = PID_Regulator(0,Idq.id,&Flux);
 8000b22:	4a36      	ldr	r2, [pc, #216]	@ (8000bfc <TIM1_UP_TIM16_IRQHandler+0x1a4>)
 8000b24:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
	  Idq = Park(&IAlphaBeta,Theta_e);
 8000b28:	60eb      	str	r3, [r5, #12]
	  Vdq.vd = PID_Regulator(0,Idq.id,&Flux);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f004 f992 	bl	8004e54 <PID_Regulator>
 8000b30:	4e33      	ldr	r6, [pc, #204]	@ (8000c00 <TIM1_UP_TIM16_IRQHandler+0x1a8>)
	  Vdq.vq = PID_Regulator(Iq_ref,Idq.iq,&Torque);
 8000b32:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <TIM1_UP_TIM16_IRQHandler+0x1ac>)
 8000b34:	4a34      	ldr	r2, [pc, #208]	@ (8000c08 <TIM1_UP_TIM16_IRQHandler+0x1b0>)
 8000b36:	f9b5 100a 	ldrsh.w	r1, [r5, #10]
	  Vdq.vd = PID_Regulator(0,Idq.id,&Flux);
 8000b3a:	8130      	strh	r0, [r6, #8]
	  Vdq.vq = PID_Regulator(Iq_ref,Idq.iq,&Torque);
 8000b3c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000b40:	f004 f988 	bl	8004e54 <PID_Regulator>
	  VAlphaBeta = Rev_Park(Vdq,Theta_e);
 8000b44:	883b      	ldrh	r3, [r7, #0]
 8000b46:	9300      	str	r3, [sp, #0]
	  Vdq.vq = PID_Regulator(Iq_ref,Idq.iq,&Torque);
 8000b48:	8170      	strh	r0, [r6, #10]
	  VAlphaBeta = Rev_Park(Vdq,Theta_e);
 8000b4a:	4f30      	ldr	r7, [pc, #192]	@ (8000c0c <TIM1_UP_TIM16_IRQHandler+0x1b4>)
 8000b4c:	6872      	ldr	r2, [r6, #4]
 8000b4e:	68b3      	ldr	r3, [r6, #8]
 8000b50:	6831      	ldr	r1, [r6, #0]
 8000b52:	a802      	add	r0, sp, #8
 8000b54:	f004 f886 	bl	8004c64 <Rev_Park>
 8000b58:	9b02      	ldr	r3, [sp, #8]
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	9b03      	ldr	r3, [sp, #12]
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	9b04      	ldr	r3, [sp, #16]
	  if(msecCnt > 6500) Qi = Qinner(Vdq, &Idq, wm_e*24/10);	//
 8000b62:	6822      	ldr	r2, [r4, #0]
	  VAlphaBeta = Rev_Park(Vdq,Theta_e);
 8000b64:	60bb      	str	r3, [r7, #8]
	  if(msecCnt > 6500) Qi = Qinner(Vdq, &Idq, wm_e*24/10);	//
 8000b66:	f641 1364 	movw	r3, #6500	@ 0x1964
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d81b      	bhi.n	8000ba6 <TIM1_UP_TIM16_IRQHandler+0x14e>
	  CALC_SVPWM(&VAlphaBeta);
 8000b6e:	4827      	ldr	r0, [pc, #156]	@ (8000c0c <TIM1_UP_TIM16_IRQHandler+0x1b4>)
}
 8000b70:	b00b      	add	sp, #44	@ 0x2c
 8000b72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	  CALC_SVPWM(&VAlphaBeta);
 8000b76:	f004 b8c9 	b.w	8004d0c <CALC_SVPWM>
	  Vdq.vd = 180;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <TIM1_UP_TIM16_IRQHandler+0x1a8>)
	  VAlphaBeta = Rev_Park(Vdq,0);
 8000b7c:	4d23      	ldr	r5, [pc, #140]	@ (8000c0c <TIM1_UP_TIM16_IRQHandler+0x1b4>)
	  Vdq.vd = 180;
 8000b7e:	22b4      	movs	r2, #180	@ 0xb4
 8000b80:	609a      	str	r2, [r3, #8]
	  VAlphaBeta = Rev_Park(Vdq,0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	a802      	add	r0, sp, #8
 8000b8e:	f004 f869 	bl	8004c64 <Rev_Park>
 8000b92:	9b02      	ldr	r3, [sp, #8]
 8000b94:	602b      	str	r3, [r5, #0]
 8000b96:	9a03      	ldr	r2, [sp, #12]
 8000b98:	9b04      	ldr	r3, [sp, #16]
 8000b9a:	60ab      	str	r3, [r5, #8]
	  CALC_SVPWM(&VAlphaBeta);
 8000b9c:	4628      	mov	r0, r5
	  VAlphaBeta = Rev_Park(Vdq,0);
 8000b9e:	606a      	str	r2, [r5, #4]
	  CALC_SVPWM(&VAlphaBeta);
 8000ba0:	f004 f8b4 	bl	8004d0c <CALC_SVPWM>
 8000ba4:	e782      	b.n	8000aac <TIM1_UP_TIM16_IRQHandler+0x54>
	  if(msecCnt > 6500) Qi = Qinner(Vdq, &Idq, wm_e*24/10);	//
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <TIM1_UP_TIM16_IRQHandler+0x1b8>)
 8000ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c14 <TIM1_UP_TIM16_IRQHandler+0x1bc>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	6830      	ldr	r0, [r6, #0]
 8000bae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	6871      	ldr	r1, [r6, #4]
 8000bbe:	68b2      	ldr	r2, [r6, #8]
 8000bc0:	462b      	mov	r3, r5
 8000bc2:	f004 f98d 	bl	8004ee0 <Qinner>
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <TIM1_UP_TIM16_IRQHandler+0x1c0>)
 8000bc8:	8018      	strh	r0, [r3, #0]
	  CALC_SVPWM(&VAlphaBeta);
 8000bca:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <TIM1_UP_TIM16_IRQHandler+0x1b4>)
}
 8000bcc:	b00b      	add	sp, #44	@ 0x2c
 8000bce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	  CALC_SVPWM(&VAlphaBeta);
 8000bd2:	f004 b89b 	b.w	8004d0c <CALC_SVPWM>
 8000bd6:	bf00      	nop
 8000bd8:	20000350 	.word	0x20000350
 8000bdc:	20000224 	.word	0x20000224
 8000be0:	200001d8 	.word	0x200001d8
 8000be4:	48000400 	.word	0x48000400
 8000be8:	20000204 	.word	0x20000204
 8000bec:	20000244 	.word	0x20000244
 8000bf0:	2000016c 	.word	0x2000016c
 8000bf4:	20000234 	.word	0x20000234
 8000bf8:	200001f4 	.word	0x200001f4
 8000bfc:	200001b0 	.word	0x200001b0
 8000c00:	200001dc 	.word	0x200001dc
 8000c04:	20000170 	.word	0x20000170
 8000c08:	200001c4 	.word	0x200001c4
 8000c0c:	200001e8 	.word	0x200001e8
 8000c10:	2000016e 	.word	0x2000016e
 8000c14:	cccccccd 	.word	0xcccccccd
 8000c18:	2000016a 	.word	0x2000016a

08000c1c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
 8000c1c:	4801      	ldr	r0, [pc, #4]	@ (8000c24 <TIM1_TRG_COM_IRQHandler+0x8>)
 8000c1e:	f003 b8dd 	b.w	8003ddc <HAL_TIM_IRQHandler>
 8000c22:	bf00      	nop
 8000c24:	20000350 	.word	0x20000350

08000c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c2c:	4852      	ldr	r0, [pc, #328]	@ (8000d78 <TIM2_IRQHandler+0x150>)
//  {
//      speed_count++;
//  }


    hall_u = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000c2e:	4c53      	ldr	r4, [pc, #332]	@ (8000d7c <TIM2_IRQHandler+0x154>)
    hall_v = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c30:	4d53      	ldr	r5, [pc, #332]	@ (8000d80 <TIM2_IRQHandler+0x158>)
  HAL_TIM_IRQHandler(&htim2);
 8000c32:	f003 f8d3 	bl	8003ddc <HAL_TIM_IRQHandler>
    hall_u = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000c36:	2120      	movs	r1, #32
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 fd94 	bl	8002768 <HAL_GPIO_ReadPin>
    hall_v = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c40:	2108      	movs	r1, #8
    hall_u = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000c42:	4603      	mov	r3, r0
    hall_v = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c44:	484f      	ldr	r0, [pc, #316]	@ (8000d84 <TIM2_IRQHandler+0x15c>)
    hall_u = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000c46:	7023      	strb	r3, [r4, #0]
    hall_v = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c48:	f001 fd8e 	bl	8002768 <HAL_GPIO_ReadPin>
    hall_w = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000c4c:	2104      	movs	r1, #4
    hall_v = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c4e:	4603      	mov	r3, r0
    hall_w = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    hall_v = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000c54:	702b      	strb	r3, [r5, #0]
    hall_w = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000c56:	f001 fd87 	bl	8002768 <HAL_GPIO_ReadPin>
    hall_index = hall_u + (hall_v << 1) + (hall_w << 2);
 8000c5a:	7822      	ldrb	r2, [r4, #0]
 8000c5c:	7829      	ldrb	r1, [r5, #0]
    hall_w = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000c5e:	4c4a      	ldr	r4, [pc, #296]	@ (8000d88 <TIM2_IRQHandler+0x160>)
    hall_index = hall_u + (hall_v << 1) + (hall_w << 2);
 8000c60:	4d4a      	ldr	r5, [pc, #296]	@ (8000d8c <TIM2_IRQHandler+0x164>)
    hall_w = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000c62:	7020      	strb	r0, [r4, #0]
    hall_index = hall_u + (hall_v << 1) + (hall_w << 2);
 8000c64:	eb02 0341 	add.w	r3, r2, r1, lsl #1

    if((hall_u_old != hall_u) || (hall_v_old != hall_v) || (hall_w_old != hall_w))
 8000c68:	4c49      	ldr	r4, [pc, #292]	@ (8000d90 <TIM2_IRQHandler+0x168>)
    hall_index = hall_u + (hall_v << 1) + (hall_w << 2);
 8000c6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	702b      	strb	r3, [r5, #0]
    if((hall_u_old != hall_u) || (hall_v_old != hall_v) || (hall_w_old != hall_w))
 8000c72:	7825      	ldrb	r5, [r4, #0]
 8000c74:	4295      	cmp	r5, r2
 8000c76:	4d47      	ldr	r5, [pc, #284]	@ (8000d94 <TIM2_IRQHandler+0x16c>)
 8000c78:	d06d      	beq.n	8000d56 <TIM2_IRQHandler+0x12e>
 8000c7a:	4e47      	ldr	r6, [pc, #284]	@ (8000d98 <TIM2_IRQHandler+0x170>)
    {
    	hall_u_old = hall_u;
    	hall_v_old = hall_v;
 8000c7c:	7029      	strb	r1, [r5, #0]
    	hall_u_old = hall_u;
 8000c7e:	7022      	strb	r2, [r4, #0]
    	hall_w_old = hall_w;
    	theta_ini = HALL_ANGLE_TABLE[hall_index];
    	theta_hall = theta_ini;

    	//讀取TIM2當前計數作為speed_count
    	speed_count = __HAL_TIM_GET_COUNTER(&htim6);
 8000c80:	4946      	ldr	r1, [pc, #280]	@ (8000d9c <TIM2_IRQHandler+0x174>)
    	theta_ini = HALL_ANGLE_TABLE[hall_index];
 8000c82:	4a47      	ldr	r2, [pc, #284]	@ (8000da0 <TIM2_IRQHandler+0x178>)
    	speed_count = __HAL_TIM_GET_COUNTER(&htim6);
 8000c84:	680c      	ldr	r4, [r1, #0]
    	theta_ini = HALL_ANGLE_TABLE[hall_index];
 8000c86:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 8000c8a:	4b46      	ldr	r3, [pc, #280]	@ (8000da4 <TIM2_IRQHandler+0x17c>)
    	theta_hall = theta_ini;
 8000c8c:	4a46      	ldr	r2, [pc, #280]	@ (8000da8 <TIM2_IRQHandler+0x180>)
    	theta_ini = HALL_ANGLE_TABLE[hall_index];
 8000c8e:	f8a3 c000 	strh.w	ip, [r3]
    	speed_count = __HAL_TIM_GET_COUNTER(&htim6);
 8000c92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000c94:	4d45      	ldr	r5, [pc, #276]	@ (8000dac <TIM2_IRQHandler+0x184>)
    	hall_w_old = hall_w;
 8000c96:	7030      	strb	r0, [r6, #0]
    	speed_count = __HAL_TIM_GET_COUNTER(&htim6);
 8000c98:	b298      	uxth	r0, r3
    	theta_hall = theta_ini;
 8000c9a:	f8a2 c000 	strh.w	ip, [r2]
    	speed_count = __HAL_TIM_GET_COUNTER(&htim6);
 8000c9e:	8028      	strh	r0, [r5, #0]

    	if(speed_count == 0)
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d04d      	beq.n	8000d40 <TIM2_IRQHandler+0x118>
    	}
    	else
    	{
    		//假設以最快速度運轉，可以算出最大速度可以到2500000rpm (小馬達)，實際會根據speed count變化
    		speed = (1000000 * 10 / 4) / speed_count; // 2500000 = 60(degree)/0.000001(1cnt)/360(degree/s to RPS) * 60(RPS to RPM) / 4(pole pair)
    		spc = speed_count;
 8000ca4:	4942      	ldr	r1, [pc, #264]	@ (8000db0 <TIM2_IRQHandler+0x188>)
 8000ca6:	4e43      	ldr	r6, [pc, #268]	@ (8000db4 <TIM2_IRQHandler+0x18c>)
 8000ca8:	8008      	strh	r0, [r1, #0]
    		speed = (1000000 * 10 / 4) / speed_count; // 2500000 = 60(degree)/0.000001(1cnt)/360(degree/s to RPS) * 60(RPS to RPM) / 4(pole pair)
 8000caa:	4943      	ldr	r1, [pc, #268]	@ (8000db8 <TIM2_IRQHandler+0x190>)
 8000cac:	fbb1 f3f0 	udiv	r3, r1, r0
 8000cb0:	b29b      	uxth	r3, r3
    	}

    	//限制速度範圍
    	if(speed > 1000) speed = speed_old;	//觀測速度上限
 8000cb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cb6:	8033      	strh	r3, [r6, #0]
 8000cb8:	d945      	bls.n	8000d46 <TIM2_IRQHandler+0x11e>
 8000cba:	4b40      	ldr	r3, [pc, #256]	@ (8000dbc <TIM2_IRQHandler+0x194>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	8033      	strh	r3, [r6, #0]
    	else speed_old = speed;

    	// 更新環形緩衝區並計算平均速度
    	speed_sum -= speed_buf[buffer_count]; // 減去舊值
 8000cc0:	4e3f      	ldr	r6, [pc, #252]	@ (8000dc0 <TIM2_IRQHandler+0x198>)
 8000cc2:	4f40      	ldr	r7, [pc, #256]	@ (8000dc4 <TIM2_IRQHandler+0x19c>)
 8000cc4:	f8b6 e000 	ldrh.w	lr, [r6]
 8000cc8:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8000de0 <TIM2_IRQHandler+0x1b8>
 8000ccc:	8839      	ldrh	r1, [r7, #0]
 8000cce:	f838 901e 	ldrh.w	r9, [r8, lr, lsl #1]
    	speed_buf[buffer_count] = speed;     // 更新新值
 8000cd2:	f828 301e 	strh.w	r3, [r8, lr, lsl #1]
    	speed_sum += speed;                  // 加上新值
 8000cd6:	eba1 0109 	sub.w	r1, r1, r9
 8000cda:	4419      	add	r1, r3
    	buffer_count = (buffer_count + 1) % 12; // 環形緩衝區指針更新
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <TIM2_IRQHandler+0x1a0>)
    	speed_sum += speed;                  // 加上新值
 8000cde:	b289      	uxth	r1, r1
    	buffer_count = (buffer_count + 1) % 12; // 環形緩衝區指針更新
 8000ce0:	f10e 0e01 	add.w	lr, lr, #1
    	speed_sum += speed;                  // 加上新值
 8000ce4:	8039      	strh	r1, [r7, #0]
    	speed_avg = speed_sum / 12;
 8000ce6:	fba3 1701 	umull	r1, r7, r3, r1
    	buffer_count = (buffer_count + 1) % 12; // 環形緩衝區指針更新
 8000cea:	fba3 130e 	umull	r1, r3, r3, lr
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000cf4:	ebae 0383 	sub.w	r3, lr, r3, lsl #2
 8000cf8:	8033      	strh	r3, [r6, #0]
    	speed_avg = speed_sum / 12;
 8000cfa:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <TIM2_IRQHandler+0x1a4>)
 8000cfc:	08f9      	lsrs	r1, r7, #3
 8000cfe:	8019      	strh	r1, [r3, #0]

    	//清零TIM2計數器
    	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d00:	2300      	movs	r3, #0
 8000d02:	6263      	str	r3, [r4, #36]	@ 0x24
    }
    /*** hallsensor檢測轉速 ***/
    if(speed_count == 0) speed_count = 1;
 8000d04:	b310      	cbz	r0, 8000d4c <TIM2_IRQHandler+0x124>
    theta_hall += (1666 * 125 / speed_count); //每格階梯1666，每隔時間(1000000/speed_count)/8000=125/speed_count
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <TIM2_IRQHandler+0x1a8>)
 8000d08:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d0c:	b29b      	uxth	r3, r3
    theta_hall = (theta_hall % 10000 + 10000) % 10000;
 8000d0e:	4c31      	ldr	r4, [pc, #196]	@ (8000dd4 <TIM2_IRQHandler+0x1ac>)
    theta_hall += (1666 * 125 / speed_count); //每格階梯1666，每隔時間(1000000/speed_count)/8000=125/speed_count
 8000d10:	4463      	add	r3, ip
    theta_hall = (theta_hall % 10000 + 10000) % 10000;
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	fb84 0403 	smull	r0, r4, r4, r3
 8000d18:	17d8      	asrs	r0, r3, #31
 8000d1a:	ebc0 3024 	rsb	r0, r0, r4, asr #12
 8000d1e:	f242 7410 	movw	r4, #10000	@ 0x2710
 8000d22:	fb04 3310 	mls	r3, r4, r0, r3
 8000d26:	4423      	add	r3, r4
 8000d28:	482b      	ldr	r0, [pc, #172]	@ (8000dd8 <TIM2_IRQHandler+0x1b0>)
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	fba0 5003 	umull	r5, r0, r0, r3
 8000d30:	0b40      	lsrs	r0, r0, #13
 8000d32:	fb04 3310 	mls	r3, r4, r0, r3
    wm_hall = speed_avg;
 8000d36:	4829      	ldr	r0, [pc, #164]	@ (8000ddc <TIM2_IRQHandler+0x1b4>)
    theta_hall = (theta_hall % 10000 + 10000) % 10000;
 8000d38:	8013      	strh	r3, [r2, #0]
    wm_hall = speed_avg;
 8000d3a:	8001      	strh	r1, [r0, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <TIM2_IRQHandler+0x18c>)
 8000d42:	8018      	strh	r0, [r3, #0]
    		speed = 0;
 8000d44:	4603      	mov	r3, r0
    	else speed_old = speed;
 8000d46:	491d      	ldr	r1, [pc, #116]	@ (8000dbc <TIM2_IRQHandler+0x194>)
 8000d48:	800b      	strh	r3, [r1, #0]
 8000d4a:	e7b9      	b.n	8000cc0 <TIM2_IRQHandler+0x98>
    if(speed_count == 0) speed_count = 1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	802b      	strh	r3, [r5, #0]
 8000d50:	f642 537a 	movw	r3, #11642	@ 0x2d7a
 8000d54:	e7db      	b.n	8000d0e <TIM2_IRQHandler+0xe6>
    if((hall_u_old != hall_u) || (hall_v_old != hall_v) || (hall_w_old != hall_w))
 8000d56:	782e      	ldrb	r6, [r5, #0]
 8000d58:	428e      	cmp	r6, r1
 8000d5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000d98 <TIM2_IRQHandler+0x170>)
 8000d5c:	d18e      	bne.n	8000c7c <TIM2_IRQHandler+0x54>
 8000d5e:	7837      	ldrb	r7, [r6, #0]
 8000d60:	4287      	cmp	r7, r0
 8000d62:	d18b      	bne.n	8000c7c <TIM2_IRQHandler+0x54>
    if(speed_count == 0) speed_count = 1;
 8000d64:	4d11      	ldr	r5, [pc, #68]	@ (8000dac <TIM2_IRQHandler+0x184>)
    theta_hall += (1666 * 125 / speed_count); //每格階梯1666，每隔時間(1000000/speed_count)/8000=125/speed_count
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <TIM2_IRQHandler+0x180>)
    wm_hall = speed_avg;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <TIM2_IRQHandler+0x1a4>)
    if(speed_count == 0) speed_count = 1;
 8000d6a:	8828      	ldrh	r0, [r5, #0]
    theta_hall += (1666 * 125 / speed_count); //每格階梯1666，每隔時間(1000000/speed_count)/8000=125/speed_count
 8000d6c:	f8b2 c000 	ldrh.w	ip, [r2]
    wm_hall = speed_avg;
 8000d70:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d74:	e7c6      	b.n	8000d04 <TIM2_IRQHandler+0xdc>
 8000d76:	bf00      	nop
 8000d78:	20000300 	.word	0x20000300
 8000d7c:	20000169 	.word	0x20000169
 8000d80:	20000168 	.word	0x20000168
 8000d84:	48000400 	.word	0x48000400
 8000d88:	20000167 	.word	0x20000167
 8000d8c:	2000013a 	.word	0x2000013a
 8000d90:	20000166 	.word	0x20000166
 8000d94:	20000165 	.word	0x20000165
 8000d98:	20000164 	.word	0x20000164
 8000d9c:	200002b0 	.word	0x200002b0
 8000da0:	08005db0 	.word	0x08005db0
 8000da4:	2000015c 	.word	0x2000015c
 8000da8:	2000013e 	.word	0x2000013e
 8000dac:	2000015e 	.word	0x2000015e
 8000db0:	20000138 	.word	0x20000138
 8000db4:	20000162 	.word	0x20000162
 8000db8:	002625a0 	.word	0x002625a0
 8000dbc:	20000160 	.word	0x20000160
 8000dc0:	20000142 	.word	0x20000142
 8000dc4:	20000254 	.word	0x20000254
 8000dc8:	aaaaaaab 	.word	0xaaaaaaab
 8000dcc:	2000013c 	.word	0x2000013c
 8000dd0:	00032d7a 	.word	0x00032d7a
 8000dd4:	68db8bad 	.word	0x68db8bad
 8000dd8:	d1b71759 	.word	0xd1b71759
 8000ddc:	20000140 	.word	0x20000140
 8000de0:	20000144 	.word	0x20000144

08000de4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000de4:	b530      	push	{r4, r5, lr}

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
  if(msecCnt > 5000 )
 8000de6:	4c35      	ldr	r4, [pc, #212]	@ (8000ebc <TIM7_IRQHandler+0xd8>)
  HAL_TIM_IRQHandler(&htim7);
 8000de8:	4835      	ldr	r0, [pc, #212]	@ (8000ec0 <TIM7_IRQHandler+0xdc>)
{
 8000dea:	b085      	sub	sp, #20
  HAL_TIM_IRQHandler(&htim7);
 8000dec:	f002 fff6 	bl	8003ddc <HAL_TIM_IRQHandler>
  if(msecCnt > 5000 )
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d925      	bls.n	8000e46 <TIM7_IRQHandler+0x62>
  {
	  wm_e = (msecCnt-5000)*wm_cmd/1000;		//有個斜率到命令轉速 2秒到wm_cmd
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	4a31      	ldr	r2, [pc, #196]	@ (8000ec4 <TIM7_IRQHandler+0xe0>)
 8000dfe:	4932      	ldr	r1, [pc, #200]	@ (8000ec8 <TIM7_IRQHandler+0xe4>)
 8000e00:	8812      	ldrh	r2, [r2, #0]
	  if(wm_e >= wm_cmd) wm_e = wm_cmd; //wm_cmd命令轉速、ms時間
	  Theta_e += (wm_e*4*10/60); // 速度(rpm)/60 *極對數*10，1圈1萬/1000(1秒1000次)、角度累加到10000
 8000e02:	4832      	ldr	r0, [pc, #200]	@ (8000ecc <TIM7_IRQHandler+0xe8>)
	  wm_e = (msecCnt-5000)*wm_cmd/1000;		//有個斜率到命令轉速 2秒到wm_cmd
 8000e04:	4d32      	ldr	r5, [pc, #200]	@ (8000ed0 <TIM7_IRQHandler+0xec>)
 8000e06:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	fba1 1303 	umull	r1, r3, r1, r3
 8000e14:	f3c3 138f 	ubfx	r3, r3, #6, #16
	  if(wm_e >= wm_cmd) wm_e = wm_cmd; //wm_cmd命令轉速、ms時間
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	bf8c      	ite	hi
 8000e1c:	461a      	movhi	r2, r3
 8000e1e:	4613      	movls	r3, r2
	  Theta_e += (wm_e*4*10/60); // 速度(rpm)/60 *極對數*10，1圈1萬/1000(1秒1000次)、角度累加到10000
 8000e20:	492c      	ldr	r1, [pc, #176]	@ (8000ed4 <TIM7_IRQHandler+0xf0>)
	  wm_e = (msecCnt-5000)*wm_cmd/1000;		//有個斜率到命令轉速 2秒到wm_cmd
 8000e22:	802b      	strh	r3, [r5, #0]
	  Theta_e += (wm_e*4*10/60); // 速度(rpm)/60 *極對數*10，1圈1萬/1000(1秒1000次)、角度累加到10000
 8000e24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	fba1 1202 	umull	r1, r2, r1, r2
 8000e2e:	8801      	ldrh	r1, [r0, #0]
 8000e30:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8000e34:	b293      	uxth	r3, r2
	  if(Theta_e >= 10000)  Theta_e -= 10000; //角度累加，一圈10000  1ms加多少，一直累加到10000
 8000e36:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	bf84      	itt	hi
 8000e3e:	f5a3 531c 	subhi.w	r3, r3, #9984	@ 0x2700
 8000e42:	3b10      	subhi	r3, #16
 8000e44:	8003      	strh	r3, [r0, #0]
	  else if(Theta_e < 0) Theta_e += 10000;
  }

  if(msecCnt >= 3500)
 8000e46:	6822      	ldr	r2, [r4, #0]
 8000e48:	f640 53ab 	movw	r3, #3499	@ 0xdab
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d80a      	bhi.n	8000e66 <TIM7_IRQHandler+0x82>
  {
	  adc_copy = adc_avg;
	  Ioffset = Update_Current_Offset(&adc_copy,&Idq,msecCnt);
  }

  if(msecCnt > 8000){
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000e56:	d823      	bhi.n	8000ea0 <TIM7_IRQHandler+0xbc>
  			Iq_ref = I0 + PID_Regulator(0, Qi, &Q);
  		}

  __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <TIM7_IRQHandler+0xdc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f06f 0201 	mvn.w	r2, #1
 8000e60:	611a      	str	r2, [r3, #16]
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
  /* USER CODE END TIM7_IRQn 1 */
}
 8000e62:	b005      	add	sp, #20
 8000e64:	bd30      	pop	{r4, r5, pc}
	  adc_copy = adc_avg;
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <TIM7_IRQHandler+0xf4>)
 8000e68:	491c      	ldr	r1, [pc, #112]	@ (8000edc <TIM7_IRQHandler+0xf8>)
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	6850      	ldr	r0, [r2, #4]
 8000e6e:	600b      	str	r3, [r1, #0]
	  Ioffset = Update_Current_Offset(&adc_copy,&Idq,msecCnt);
 8000e70:	6823      	ldr	r3, [r4, #0]
	  adc_copy = adc_avg;
 8000e72:	6048      	str	r0, [r1, #4]
 8000e74:	6890      	ldr	r0, [r2, #8]
 8000e76:	68d2      	ldr	r2, [r2, #12]
	  Ioffset = Update_Current_Offset(&adc_copy,&Idq,msecCnt);
 8000e78:	4d19      	ldr	r5, [pc, #100]	@ (8000ee0 <TIM7_IRQHandler+0xfc>)
	  adc_copy = adc_avg;
 8000e7a:	6088      	str	r0, [r1, #8]
	  Ioffset = Update_Current_Offset(&adc_copy,&Idq,msecCnt);
 8000e7c:	b29b      	uxth	r3, r3
	  adc_copy = adc_avg;
 8000e7e:	60ca      	str	r2, [r1, #12]
	  Ioffset = Update_Current_Offset(&adc_copy,&Idq,msecCnt);
 8000e80:	4668      	mov	r0, sp
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <TIM7_IRQHandler+0x100>)
 8000e84:	f003 fda8 	bl	80049d8 <Update_Current_Offset>
 8000e88:	9b00      	ldr	r3, [sp, #0]
 8000e8a:	602b      	str	r3, [r5, #0]
 8000e8c:	9b01      	ldr	r3, [sp, #4]
 8000e8e:	606b      	str	r3, [r5, #4]
 8000e90:	9b03      	ldr	r3, [sp, #12]
 8000e92:	9a02      	ldr	r2, [sp, #8]
 8000e94:	60eb      	str	r3, [r5, #12]
  if(msecCnt > 8000){
 8000e96:	6823      	ldr	r3, [r4, #0]
	  Ioffset = Update_Current_Offset(&adc_copy,&Idq,msecCnt);
 8000e98:	60aa      	str	r2, [r5, #8]
  if(msecCnt > 8000){
 8000e9a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000e9e:	d9db      	bls.n	8000e58 <TIM7_IRQHandler+0x74>
  			Iq_ref = I0 + PID_Regulator(0, Qi, &Q);
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <TIM7_IRQHandler+0x104>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <TIM7_IRQHandler+0x108>)
 8000ea4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f003 ffd3 	bl	8004e54 <PID_Regulator>
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <TIM7_IRQHandler+0x10c>)
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <TIM7_IRQHandler+0x110>)
 8000eb2:	8812      	ldrh	r2, [r2, #0]
 8000eb4:	4410      	add	r0, r2
 8000eb6:	8018      	strh	r0, [r3, #0]
 8000eb8:	e7ce      	b.n	8000e58 <TIM7_IRQHandler+0x74>
 8000eba:	bf00      	nop
 8000ebc:	200001d8 	.word	0x200001d8
 8000ec0:	20000260 	.word	0x20000260
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	10624dd3 	.word	0x10624dd3
 8000ecc:	2000016c 	.word	0x2000016c
 8000ed0:	2000016e 	.word	0x2000016e
 8000ed4:	88888889 	.word	0x88888889
 8000ed8:	20000224 	.word	0x20000224
 8000edc:	20000214 	.word	0x20000214
 8000ee0:	20000234 	.word	0x20000234
 8000ee4:	200001f4 	.word	0x200001f4
 8000ee8:	2000016a 	.word	0x2000016a
 8000eec:	20000174 	.word	0x20000174
 8000ef0:	20000172 	.word	0x20000172
 8000ef4:	20000170 	.word	0x20000170

08000ef8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	1e16      	subs	r6, r2, #0
 8000efc:	dd07      	ble.n	8000f0e <_read+0x16>
 8000efe:	460c      	mov	r4, r1
 8000f00:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	42a5      	cmp	r5, r4
 8000f0c:	d1f9      	bne.n	8000f02 <_read+0xa>
  }

  return len;
}
 8000f0e:	4630      	mov	r0, r6
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
 8000f12:	bf00      	nop

08000f14 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f20:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000f22:	2000      	movs	r0, #0
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000f28:	2001      	movs	r0, #1
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	4770      	bx	lr

08000f30 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f32:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000f34:	680b      	ldr	r3, [r1, #0]
{
 8000f36:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4c0c      	ldr	r4, [pc, #48]	@ (8000f6c <_sbrk+0x3c>)
 8000f3a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000f3c:	b12b      	cbz	r3, 8000f4a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4418      	add	r0, r3
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d807      	bhi.n	8000f54 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f44:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <_sbrk+0x40>)
 8000f4c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4418      	add	r0, r3
 8000f50:	4290      	cmp	r0, r2
 8000f52:	d9f7      	bls.n	8000f44 <_sbrk+0x14>
    errno = ENOMEM;
 8000f54:	f004 f94e 	bl	80051f4 <__errno>
 8000f58:	230c      	movs	r3, #12
 8000f5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	bd10      	pop	{r4, pc}
 8000f64:	20000258 	.word	0x20000258
 8000f68:	2000c000 	.word	0x2000c000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	200006e0 	.word	0x200006e0

08000f74 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f74:	4a03      	ldr	r2, [pc, #12]	@ (8000f84 <SystemInit+0x10>)
 8000f76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000f7a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f88:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8a:	4825      	ldr	r0, [pc, #148]	@ (8001020 <MX_TIM2_Init+0x98>)
{
 8000f8c:	b08d      	sub	sp, #52	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f94:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f98:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000f9c:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000fa4:	9303      	str	r3, [sp, #12]
  htim2.Init.Prescaler = 71;
 8000fa6:	6083      	str	r3, [r0, #8]
 8000fa8:	6103      	str	r3, [r0, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 125;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	6183      	str	r3, [r0, #24]
  htim2.Init.Prescaler = 71;
 8000fac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb0:	2347      	movs	r3, #71	@ 0x47
 8000fb2:	e9c0 2300 	strd	r2, r3, [r0]
 8000fb6:	237d      	movs	r3, #125	@ 0x7d
 8000fb8:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	f002 fa9f 	bl	80034fc <HAL_TIM_Base_Init>
 8000fbe:	bb00      	cbnz	r0, 8001002 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc4:	4816      	ldr	r0, [pc, #88]	@ (8001020 <MX_TIM2_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc6:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc8:	a908      	add	r1, sp, #32
 8000fca:	f002 fe53 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8000fce:	bb18      	cbnz	r0, 8001018 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.Commutation_Delay = 5;
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000fd8:	4811      	ldr	r0, [pc, #68]	@ (8001020 <MX_TIM2_Init+0x98>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2305      	movs	r3, #5
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000fde:	a904      	add	r1, sp, #16
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000fe4:	f003 f84a 	bl	800407c <HAL_TIMEx_HallSensor_Init>
 8000fe8:	b998      	cbnz	r0, 8001012 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fea:	2250      	movs	r2, #80	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_TIM2_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000ff0:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff2:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff6:	f003 f8fb 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	b928      	cbnz	r0, 8001008 <MX_TIM2_Init+0x80>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	b00d      	add	sp, #52	@ 0x34
 8000ffe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001002:	f7ff fcdf 	bl	80009c4 <Error_Handler>
 8001006:	e7db      	b.n	8000fc0 <MX_TIM2_Init+0x38>
    Error_Handler();
 8001008:	f7ff fcdc 	bl	80009c4 <Error_Handler>
}
 800100c:	b00d      	add	sp, #52	@ 0x34
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001012:	f7ff fcd7 	bl	80009c4 <Error_Handler>
 8001016:	e7e8      	b.n	8000fea <MX_TIM2_Init+0x62>
    Error_Handler();
 8001018:	f7ff fcd4 	bl	80009c4 <Error_Handler>
 800101c:	e7d8      	b.n	8000fd0 <MX_TIM2_Init+0x48>
 800101e:	bf00      	nop
 8001020:	20000300 	.word	0x20000300

08001024 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001024:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001026:	4812      	ldr	r0, [pc, #72]	@ (8001070 <MX_TIM6_Init+0x4c>)
 8001028:	4912      	ldr	r1, [pc, #72]	@ (8001074 <MX_TIM6_Init+0x50>)
{
 800102a:	b085      	sub	sp, #20
  htim6.Init.Prescaler = 71;
 800102c:	2247      	movs	r2, #71	@ 0x47
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 71;
 8001030:	e9c0 1200 	strd	r1, r2, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8001034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim6.Init.Period = 65535;
 800103c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	9303      	str	r3, [sp, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001044:	f002 fa5a 	bl	80034fc <HAL_TIM_Base_Init>
 8001048:	b950      	cbnz	r0, 8001060 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001050:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001052:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001054:	f003 f8cc 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	b928      	cbnz	r0, 8001066 <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800105a:	b005      	add	sp, #20
 800105c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001060:	f7ff fcb0 	bl	80009c4 <Error_Handler>
 8001064:	e7f1      	b.n	800104a <MX_TIM6_Init+0x26>
    Error_Handler();
 8001066:	f7ff fcad 	bl	80009c4 <Error_Handler>
}
 800106a:	b005      	add	sp, #20
 800106c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001070:	200002b0 	.word	0x200002b0
 8001074:	40001000 	.word	0x40001000

08001078 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001078:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <MX_TIM7_Init+0x4c>)
 800107c:	4912      	ldr	r1, [pc, #72]	@ (80010c8 <MX_TIM7_Init+0x50>)
{
 800107e:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 1;
 8001080:	2201      	movs	r2, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 1;
 8001084:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 36000-1;
 8001088:	f648 429f 	movw	r2, #35999	@ 0x8c9f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 36000-1;
 8001090:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001098:	f002 fa30 	bl	80034fc <HAL_TIM_Base_Init>
 800109c:	b950      	cbnz	r0, 80010b4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010a0:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010a4:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010a8:	f003 f8a2 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	b928      	cbnz	r0, 80010ba <MX_TIM7_Init+0x42>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010ae:	b005      	add	sp, #20
 80010b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010b4:	f7ff fc86 	bl	80009c4 <Error_Handler>
 80010b8:	e7f1      	b.n	800109e <MX_TIM7_Init+0x26>
    Error_Handler();
 80010ba:	f7ff fc83 	bl	80009c4 <Error_Handler>
}
 80010be:	b005      	add	sp, #20
 80010c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c4:	20000260 	.word	0x20000260
 80010c8:	40001400 	.word	0x40001400

080010cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010cc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_baseHandle->Instance==TIM1)
 80010ce:	6803      	ldr	r3, [r0, #0]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001200 <HAL_TIM_Base_MspInit+0x134>)
{
 80010d2:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM1)
 80010d6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80010dc:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80010e0:	940a      	str	r4, [sp, #40]	@ 0x28
  if(tim_baseHandle->Instance==TIM1)
 80010e2:	d016      	beq.n	8001112 <HAL_TIM_Base_MspInit+0x46>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d037      	beq.n	800115a <HAL_TIM_Base_MspInit+0x8e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 80010ea:	4a46      	ldr	r2, [pc, #280]	@ (8001204 <HAL_TIM_Base_MspInit+0x138>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d004      	beq.n	80010fa <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 80010f0:	4a45      	ldr	r2, [pc, #276]	@ (8001208 <HAL_TIM_Base_MspInit+0x13c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d070      	beq.n	80011d8 <HAL_TIM_Base_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80010f6:	b00c      	add	sp, #48	@ 0x30
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010fa:	4b44      	ldr	r3, [pc, #272]	@ (800120c <HAL_TIM_Base_MspInit+0x140>)
 80010fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010fe:	f042 0210 	orr.w	r2, r2, #16
 8001102:	659a      	str	r2, [r3, #88]	@ 0x58
 8001104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	9304      	str	r3, [sp, #16]
 800110c:	9b04      	ldr	r3, [sp, #16]
}
 800110e:	b00c      	add	sp, #48	@ 0x30
 8001110:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <HAL_TIM_Base_MspInit+0x140>)
 8001114:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8001116:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 800111a:	6618      	str	r0, [r3, #96]	@ 0x60
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001122:	4622      	mov	r2, r4
 8001124:	4621      	mov	r1, r4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001128:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800112c:	f001 f828 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001130:	2018      	movs	r0, #24
 8001132:	f001 f861 	bl	80021f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001136:	4622      	mov	r2, r4
 8001138:	2101      	movs	r1, #1
 800113a:	2019      	movs	r0, #25
 800113c:	f001 f820 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001140:	2019      	movs	r0, #25
 8001142:	f001 f859 	bl	80021f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001146:	4622      	mov	r2, r4
 8001148:	4621      	mov	r1, r4
 800114a:	201a      	movs	r0, #26
 800114c:	f001 f818 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001150:	201a      	movs	r0, #26
 8001152:	f001 f851 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 8001156:	b00c      	add	sp, #48	@ 0x30
 8001158:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2603      	movs	r6, #3
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001160:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	659a      	str	r2, [r3, #88]	@ 0x58
 8001168:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800116a:	f002 0201 	and.w	r2, r2, #1
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	64da      	str	r2, [r3, #76]	@ 0x4c
 800117a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800117c:	f002 0201 	and.w	r2, r2, #1
 8001180:	9202      	str	r2, [sp, #8]
 8001182:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001186:	f042 0202 	orr.w	r2, r2, #2
 800118a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001194:	2224      	movs	r2, #36	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800119a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80011a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f001 f949 	bl	8002440 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ae:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	4816      	ldr	r0, [pc, #88]	@ (8001210 <HAL_TIM_Base_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b6:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f001 f93e 	bl	8002440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c4:	4622      	mov	r2, r4
 80011c6:	4621      	mov	r1, r4
 80011c8:	201c      	movs	r0, #28
 80011ca:	f000 ffd9 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ce:	201c      	movs	r0, #28
 80011d0:	f001 f812 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 80011d4:	b00c      	add	sp, #48	@ 0x30
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <HAL_TIM_Base_MspInit+0x140>)
 80011da:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80011dc:	f040 0020 	orr.w	r0, r0, #32
 80011e0:	6598      	str	r0, [r3, #88]	@ 0x58
 80011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80011ea:	4622      	mov	r2, r4
 80011ec:	2102      	movs	r1, #2
 80011ee:	2037      	movs	r0, #55	@ 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011f0:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80011f2:	f000 ffc5 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011f6:	2037      	movs	r0, #55	@ 0x37
 80011f8:	f000 fffe 	bl	80021f8 <HAL_NVIC_EnableIRQ>
}
 80011fc:	e77b      	b.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
 80011fe:	bf00      	nop
 8001200:	40012c00 	.word	0x40012c00
 8001204:	40001000 	.word	0x40001000
 8001208:	40001400 	.word	0x40001400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001214:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_TIM_MspPostInit+0x78>)
 8001218:	6802      	ldr	r2, [r0, #0]
{
 800121a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 800121e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001224:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001228:	9406      	str	r4, [sp, #24]
  if(timHandle->Instance==TIM1)
 800122a:	d001      	beq.n	8001230 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800122c:	b008      	add	sp, #32
 800122e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001238:	f042 0201 	orr.w	r2, r2, #1
 800123c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800123e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001240:	f002 0201 	and.w	r2, r2, #1
 8001244:	9200      	str	r2, [sp, #0]
 8001246:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800124a:	f042 0202 	orr.w	r2, r2, #2
 800124e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001258:	f44f 6278 	mov.w	r2, #3968	@ 0xf80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001260:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001266:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	e9cd 5605 	strd	r5, r6, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f001 f8e6 	bl	8002440 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001278:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	e9cd 5302 	strd	r5, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f001 f8dc 	bl	8002440 <HAL_GPIO_Init>
}
 8001288:	b008      	add	sp, #32
 800128a:	bd70      	pop	{r4, r5, r6, pc}
 800128c:	40012c00 	.word	0x40012c00
 8001290:	48000400 	.word	0x48000400
 8001294:	00000000 	.word	0x00000000

08001298 <MX_TIM1_Init>:
{
 8001298:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	2400      	movs	r4, #0
{
 800129c:	b09c      	sub	sp, #112	@ 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	4621      	mov	r1, r4
 80012a0:	222c      	movs	r2, #44	@ 0x2c
 80012a2:	a810      	add	r0, sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ac:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80012b0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80012b4:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b8:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c0:	f003 ff49 	bl	8005156 <memset>
  htim1.Instance = TIM1;
 80012c4:	4848      	ldr	r0, [pc, #288]	@ (80013e8 <MX_TIM1_Init+0x150>)
 80012c6:	4b49      	ldr	r3, [pc, #292]	@ (80013ec <MX_TIM1_Init+0x154>)
 80012c8:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = 2400-1;
 80012ca:	2160      	movs	r1, #96	@ 0x60
 80012cc:	f640 135f 	movw	r3, #2399	@ 0x95f
 80012d0:	e9c0 1302 	strd	r1, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim1.Init.Prescaler = 1-1;
 80012da:	6044      	str	r4, [r0, #4]
  htim1.Init.RepetitionCounter = 0;
 80012dc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012de:	f002 f90d 	bl	80034fc <HAL_TIM_Base_Init>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d15a      	bne.n	800139c <MX_TIM1_Init+0x104>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ea:	483f      	ldr	r0, [pc, #252]	@ (80013e8 <MX_TIM1_Init+0x150>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ee:	a904      	add	r1, sp, #16
 80012f0:	f002 fcc0 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d16d      	bne.n	80013d4 <MX_TIM1_Init+0x13c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f8:	483b      	ldr	r0, [pc, #236]	@ (80013e8 <MX_TIM1_Init+0x150>)
 80012fa:	f002 fa23 	bl	8003744 <HAL_TIM_PWM_Init>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d165      	bne.n	80013ce <MX_TIM1_Init+0x136>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001302:	2300      	movs	r3, #0
 8001304:	2220      	movs	r2, #32
 8001306:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <MX_TIM1_Init+0x150>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800130c:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130e:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001310:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001312:	f002 ff6d 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	2800      	cmp	r0, #0
 8001318:	d156      	bne.n	80013c8 <MX_TIM1_Init+0x130>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	2000      	movs	r0, #0
 800131c:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 800131e:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001324:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001326:	4830      	ldr	r0, [pc, #192]	@ (80013e8 <MX_TIM1_Init+0x150>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132a:	a908      	add	r1, sp, #32
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132c:	e9cd 2209 	strd	r2, r2, [sp, #36]	@ 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001330:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001332:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001334:	f002 fafc 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 8001338:	2800      	cmp	r0, #0
 800133a:	d142      	bne.n	80013c2 <MX_TIM1_Init+0x12a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133c:	482a      	ldr	r0, [pc, #168]	@ (80013e8 <MX_TIM1_Init+0x150>)
 800133e:	2204      	movs	r2, #4
 8001340:	a908      	add	r1, sp, #32
 8001342:	f002 faf5 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 8001346:	2800      	cmp	r0, #0
 8001348:	d138      	bne.n	80013bc <MX_TIM1_Init+0x124>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800134a:	4827      	ldr	r0, [pc, #156]	@ (80013e8 <MX_TIM1_Init+0x150>)
 800134c:	2208      	movs	r2, #8
 800134e:	a908      	add	r1, sp, #32
 8001350:	f002 faee 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 8001354:	bb78      	cbnz	r0, 80013b6 <MX_TIM1_Init+0x11e>
  sConfigOC.Pulse = 100;
 8001356:	2364      	movs	r3, #100	@ 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001358:	4823      	ldr	r0, [pc, #140]	@ (80013e8 <MX_TIM1_Init+0x150>)
  sConfigOC.Pulse = 100;
 800135a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135c:	220c      	movs	r2, #12
 800135e:	a908      	add	r1, sp, #32
 8001360:	f002 fae6 	bl	8003930 <HAL_TIM_PWM_ConfigChannel>
 8001364:	bb20      	cbnz	r0, 80013b0 <MX_TIM1_Init+0x118>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001366:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 80013e0 <MX_TIM1_Init+0x148>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 34;
 800136c:	2022      	movs	r0, #34	@ 0x22
 800136e:	e9cd 3012 	strd	r3, r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001372:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001376:	481c      	ldr	r0, [pc, #112]	@ (80013e8 <MX_TIM1_Init+0x150>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001378:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137a:	a910      	add	r1, sp, #64	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137c:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001380:	e9cd 3214 	strd	r3, r2, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001384:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001388:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800138c:	f002 ff66 	bl	800425c <HAL_TIMEx_ConfigBreakDeadTime>
 8001390:	b938      	cbnz	r0, 80013a2 <MX_TIM1_Init+0x10a>
  HAL_TIM_MspPostInit(&htim1);
 8001392:	4815      	ldr	r0, [pc, #84]	@ (80013e8 <MX_TIM1_Init+0x150>)
 8001394:	f7ff ff3e 	bl	8001214 <HAL_TIM_MspPostInit>
}
 8001398:	b01c      	add	sp, #112	@ 0x70
 800139a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800139c:	f7ff fb12 	bl	80009c4 <Error_Handler>
 80013a0:	e7a1      	b.n	80012e6 <MX_TIM1_Init+0x4e>
    Error_Handler();
 80013a2:	f7ff fb0f 	bl	80009c4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80013a6:	4810      	ldr	r0, [pc, #64]	@ (80013e8 <MX_TIM1_Init+0x150>)
 80013a8:	f7ff ff34 	bl	8001214 <HAL_TIM_MspPostInit>
}
 80013ac:	b01c      	add	sp, #112	@ 0x70
 80013ae:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013b0:	f7ff fb08 	bl	80009c4 <Error_Handler>
 80013b4:	e7d7      	b.n	8001366 <MX_TIM1_Init+0xce>
    Error_Handler();
 80013b6:	f7ff fb05 	bl	80009c4 <Error_Handler>
 80013ba:	e7cc      	b.n	8001356 <MX_TIM1_Init+0xbe>
    Error_Handler();
 80013bc:	f7ff fb02 	bl	80009c4 <Error_Handler>
 80013c0:	e7c3      	b.n	800134a <MX_TIM1_Init+0xb2>
    Error_Handler();
 80013c2:	f7ff faff 	bl	80009c4 <Error_Handler>
 80013c6:	e7b9      	b.n	800133c <MX_TIM1_Init+0xa4>
    Error_Handler();
 80013c8:	f7ff fafc 	bl	80009c4 <Error_Handler>
 80013cc:	e7a5      	b.n	800131a <MX_TIM1_Init+0x82>
    Error_Handler();
 80013ce:	f7ff faf9 	bl	80009c4 <Error_Handler>
 80013d2:	e796      	b.n	8001302 <MX_TIM1_Init+0x6a>
    Error_Handler();
 80013d4:	f7ff faf6 	bl	80009c4 <Error_Handler>
 80013d8:	e78e      	b.n	80012f8 <MX_TIM1_Init+0x60>
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	02000000 	.word	0x02000000
 80013e4:	00000000 	.word	0x00000000
 80013e8:	20000350 	.word	0x20000350
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_USART1_UART_Init+0x34>)
 80013f4:	4c0c      	ldr	r4, [pc, #48]	@ (8001428 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 460800;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f44f 21e1 	mov.w	r1, #460800	@ 0x70800
 80013fc:	220c      	movs	r2, #12
 80013fe:	e9c0 4100 	strd	r4, r1, [r0]
 8001402:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8001406:	e9c0 3204 	strd	r3, r2, [r0, #16]
 800140a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001412:	f003 f975 	bl	8004700 <HAL_UART_Init>
 8001416:	b900      	cbnz	r0, 800141a <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001418:	bd10      	pop	{r4, pc}
 800141a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800141e:	f7ff bad1 	b.w	80009c4 <Error_Handler>
 8001422:	bf00      	nop
 8001424:	200003a0 	.word	0x200003a0
 8001428:	40013800 	.word	0x40013800
 800142c:	00000000 	.word	0x00000000

08001430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001430:	b510      	push	{r4, lr}
 8001432:	4604      	mov	r4, r0
 8001434:	b09c      	sub	sp, #112	@ 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	2254      	movs	r2, #84	@ 0x54
 800143a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001440:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001444:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001446:	f003 fe86 	bl	8005156 <memset>
  if(uartHandle->Instance==USART1)
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <HAL_UART_MspInit+0x90>)
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001452:	b01c      	add	sp, #112	@ 0x70
 8001454:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001456:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800145a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f001 fef0 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	bb10      	cbnz	r0, 80014a8 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001466:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001468:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800146c:	661a      	str	r2, [r3, #96]	@ 0x60
 800146e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001470:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001474:	9200      	str	r2, [sp, #0]
 8001476:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80014b0 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	f042 0202 	orr.w	r2, r2, #2
 8001482:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001486:	ed8d 7b02 	vstr	d7, [sp, #8]
 800148a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80014b8 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001496:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001498:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800149e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f000 ffce 	bl	8002440 <HAL_GPIO_Init>
}
 80014a4:	b01c      	add	sp, #112	@ 0x70
 80014a6:	bd10      	pop	{r4, pc}
      Error_Handler();
 80014a8:	f7ff fa8c 	bl	80009c4 <Error_Handler>
 80014ac:	e7d9      	b.n	8001462 <HAL_UART_MspInit+0x32>
 80014ae:	bf00      	nop
 80014b0:	000000c0 	.word	0x000000c0
 80014b4:	00000002 	.word	0x00000002
 80014b8:	00000000 	.word	0x00000000
 80014bc:	00000003 	.word	0x00000003
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000400 	.word	0x48000400

080014cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001504 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d0:	f7ff fd50 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	@ (800150c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <LoopForever+0xe>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001518 <LoopForever+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f003 fe81 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fe:	f7ff f9c5 	bl	800088c <main>

08001502 <LoopForever>:

LoopForever:
    b LoopForever
 8001502:	e7fe      	b.n	8001502 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001504:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001510:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 8001514:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001518:	200006dc 	.word	0x200006dc

0800151c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800151c:	e7fe      	b.n	800151c <CAN1_RX0_IRQHandler>
	...

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <HAL_InitTick+0x40>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b90b      	cbnz	r3, 800152c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001528:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800152a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800152c:	490d      	ldr	r1, [pc, #52]	@ (8001564 <HAL_InitTick+0x44>)
 800152e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001532:	4605      	mov	r5, r0
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	6808      	ldr	r0, [r1, #0]
 800153a:	fbb0 f0f3 	udiv	r0, r0, r3
 800153e:	f000 fe69 	bl	8002214 <HAL_SYSTICK_Config>
 8001542:	4604      	mov	r4, r0
 8001544:	2800      	cmp	r0, #0
 8001546:	d1ef      	bne.n	8001528 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001548:	2d0f      	cmp	r5, #15
 800154a:	d8ed      	bhi.n	8001528 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	4602      	mov	r2, r0
 800154e:	4629      	mov	r1, r5
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 fe14 	bl	8002180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_InitTick+0x48>)
 800155a:	4620      	mov	r0, r4
 800155c:	601d      	str	r5, [r3, #0]
}
 800155e:	bd38      	pop	{r3, r4, r5, pc}
 8001560:	20000008 	.word	0x20000008
 8001564:	20000004 	.word	0x20000004
 8001568:	2000000c 	.word	0x2000000c

0800156c <HAL_Init>:
{
 800156c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156e:	2003      	movs	r0, #3
 8001570:	f000 fdf4 	bl	800215c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff ffd3 	bl	8001520 <HAL_InitTick>
 800157a:	b110      	cbz	r0, 8001582 <HAL_Init+0x16>
    status = HAL_ERROR;
 800157c:	2401      	movs	r4, #1
}
 800157e:	4620      	mov	r0, r4
 8001580:	bd10      	pop	{r4, pc}
 8001582:	4604      	mov	r4, r0
    HAL_MspInit();
 8001584:	f7ff fa20 	bl	80009c8 <HAL_MspInit>
}
 8001588:	4620      	mov	r0, r4
 800158a:	bd10      	pop	{r4, pc}

0800158c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800158c:	4a03      	ldr	r2, [pc, #12]	@ (800159c <HAL_IncTick+0x10>)
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <HAL_IncTick+0x14>)
 8001590:	6811      	ldr	r1, [r2, #0]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	440b      	add	r3, r1
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000428 	.word	0x20000428
 80015a0:	20000008 	.word	0x20000008

080015a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015a4:	4b01      	ldr	r3, [pc, #4]	@ (80015ac <HAL_GetTick+0x8>)
 80015a6:	6818      	ldr	r0, [r3, #0]
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000428 	.word	0x20000428

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff fff6 	bl	80015a4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80015ba:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80015bc:	d002      	beq.n	80015c4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <HAL_Delay+0x20>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	1b40      	subs	r0, r0, r5
 80015ca:	42a0      	cmp	r0, r4
 80015cc:	d3fa      	bcc.n	80015c4 <HAL_Delay+0x14>
  {
  }
}
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d4:	b530      	push	{r4, r5, lr}
 80015d6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015d8:	2300      	movs	r3, #0
 80015da:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80015dc:	2800      	cmp	r0, #0
 80015de:	f000 8097 	beq.w	8001710 <HAL_ADC_Init+0x13c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e2:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80015e4:	4604      	mov	r4, r0
 80015e6:	2d00      	cmp	r5, #0
 80015e8:	f000 8097 	beq.w	800171a <HAL_ADC_Init+0x146>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015ec:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015ee:	6893      	ldr	r3, [r2, #8]
 80015f0:	009d      	lsls	r5, r3, #2
 80015f2:	d505      	bpl.n	8001600 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015f4:	6893      	ldr	r3, [r2, #8]
 80015f6:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015fe:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001600:	6893      	ldr	r3, [r2, #8]
 8001602:	00d8      	lsls	r0, r3, #3
 8001604:	d419      	bmi.n	800163a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001606:	4b56      	ldr	r3, [pc, #344]	@ (8001760 <HAL_ADC_Init+0x18c>)
 8001608:	4856      	ldr	r0, [pc, #344]	@ (8001764 <HAL_ADC_Init+0x190>)
 800160a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800160c:	6891      	ldr	r1, [r2, #8]
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	fba0 0303 	umull	r0, r3, r0, r3
 8001614:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001626:	6091      	str	r1, [r2, #8]
 8001628:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800162a:	9b01      	ldr	r3, [sp, #4]
 800162c:	b12b      	cbz	r3, 800163a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	3b01      	subs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800163a:	6893      	ldr	r3, [r2, #8]
 800163c:	00d9      	lsls	r1, r3, #3
 800163e:	d46a      	bmi.n	8001716 <HAL_ADC_Init+0x142>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001640:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001648:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800164a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164c:	4303      	orrs	r3, r0
 800164e:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001650:	6893      	ldr	r3, [r2, #8]
 8001652:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001656:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001658:	d156      	bne.n	8001708 <HAL_ADC_Init+0x134>
 800165a:	06db      	lsls	r3, r3, #27
 800165c:	d454      	bmi.n	8001708 <HAL_ADC_Init+0x134>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001660:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800166a:	6893      	ldr	r3, [r2, #8]
 800166c:	07dd      	lsls	r5, r3, #31
 800166e:	d40a      	bmi.n	8001686 <HAL_ADC_Init+0xb2>
 8001670:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <HAL_ADC_Init+0x194>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	07d9      	lsls	r1, r3, #31
 8001676:	d406      	bmi.n	8001686 <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001678:	493c      	ldr	r1, [pc, #240]	@ (800176c <HAL_ADC_Init+0x198>)
 800167a:	6865      	ldr	r5, [r4, #4]
 800167c:	688b      	ldr	r3, [r1, #8]
 800167e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001682:	432b      	orrs	r3, r5
 8001684:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8001686:	68e5      	ldr	r5, [r4, #12]
 8001688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800168a:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 800168e:	432b      	orrs	r3, r5
 8001690:	68a5      	ldr	r5, [r4, #8]
 8001692:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001694:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001696:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8001698:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800169c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a0:	d049      	beq.n	8001736 <HAL_ADC_Init+0x162>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80016a4:	b121      	cbz	r1, 80016b0 <HAL_ADC_Init+0xdc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 80016a6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a8:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80016ac:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ae:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016b0:	68d5      	ldr	r5, [r2, #12]
 80016b2:	492f      	ldr	r1, [pc, #188]	@ (8001770 <HAL_ADC_Init+0x19c>)
 80016b4:	4029      	ands	r1, r5
 80016b6:	4319      	orrs	r1, r3
 80016b8:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	071b      	lsls	r3, r3, #28
 80016be:	d414      	bmi.n	80016ea <HAL_ADC_Init+0x116>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c0:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016c2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016c6:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c8:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016cc:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016ce:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d2:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016d6:	430b      	orrs	r3, r1
 80016d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d02e      	beq.n	8001740 <HAL_ADC_Init+0x16c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016e2:	6913      	ldr	r3, [r2, #16]
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016ea:	6923      	ldr	r3, [r4, #16]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d01a      	beq.n	8001726 <HAL_ADC_Init+0x152>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016f0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80016f2:	f023 030f 	bic.w	r3, r3, #15
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001704:	b003      	add	sp, #12
 8001706:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001708:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
}
 8001712:	b003      	add	sp, #12
 8001714:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001716:	2000      	movs	r0, #0
 8001718:	e79a      	b.n	8001650 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 800171a:	f7fe ff95 	bl	8000648 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800171e:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001720:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001724:	e762      	b.n	80015ec <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001726:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001728:	69e3      	ldr	r3, [r4, #28]
 800172a:	f021 010f 	bic.w	r1, r1, #15
 800172e:	3b01      	subs	r3, #1
 8001730:	430b      	orrs	r3, r1
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
 8001734:	e7e0      	b.n	80016f8 <HAL_ADC_Init+0x124>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001736:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001738:	3901      	subs	r1, #1
 800173a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800173e:	e7b0      	b.n	80016a2 <HAL_ADC_Init+0xce>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001740:	6911      	ldr	r1, [r2, #16]
 8001742:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001744:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8001746:	f36f 018a 	bfc	r1, #2, #9
 800174a:	432b      	orrs	r3, r5
 800174c:	430b      	orrs	r3, r1
 800174e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001750:	430b      	orrs	r3, r1
 8001752:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001754:	430b      	orrs	r3, r1
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6113      	str	r3, [r2, #16]
 800175c:	e7c5      	b.n	80016ea <HAL_ADC_Init+0x116>
 800175e:	bf00      	nop
 8001760:	20000004 	.word	0x20000004
 8001764:	053e2d63 	.word	0x053e2d63
 8001768:	50040000 	.word	0x50040000
 800176c:	50040300 	.word	0x50040300
 8001770:	fff0c007 	.word	0xfff0c007

08001774 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800177c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800177e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001780:	f7ff fffa 	bl	8001778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001784:	bd08      	pop	{r3, pc}
 8001786:	bf00      	nop

08001788 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001790:	6803      	ldr	r3, [r0, #0]
{
 8001792:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001794:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001796:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001798:	07aa      	lsls	r2, r5, #30
{
 800179a:	4604      	mov	r4, r0
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800179c:	d501      	bpl.n	80017a2 <HAL_ADC_IRQHandler+0x12>
 800179e:	07b0      	lsls	r0, r6, #30
 80017a0:	d47e      	bmi.n	80018a0 <HAL_ADC_IRQHandler+0x110>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017a2:	076a      	lsls	r2, r5, #29
 80017a4:	d55c      	bpl.n	8001860 <HAL_ADC_IRQHandler+0xd0>
 80017a6:	0770      	lsls	r0, r6, #29
 80017a8:	d55a      	bpl.n	8001860 <HAL_ADC_IRQHandler+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80017ac:	06d0      	lsls	r0, r2, #27
 80017ae:	d403      	bmi.n	80017b8 <HAL_ADC_IRQHandler+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80017b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017b6:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80017be:	d118      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x62>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017c0:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80017c2:	0491      	lsls	r1, r2, #18
 80017c4:	d415      	bmi.n	80017f2 <HAL_ADC_IRQHandler+0x62>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	0712      	lsls	r2, r2, #28
 80017ca:	d512      	bpl.n	80017f2 <HAL_ADC_IRQHandler+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	0750      	lsls	r0, r2, #29
 80017d0:	f100 80c7 	bmi.w	8001962 <HAL_ADC_IRQHandler+0x1d2>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	f022 020c 	bic.w	r2, r2, #12
 80017da:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017e2:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017e6:	04d9      	lsls	r1, r3, #19
 80017e8:	d403      	bmi.n	80017f2 <HAL_ADC_IRQHandler+0x62>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff ffbe 	bl	8001774 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017fe:	06aa      	lsls	r2, r5, #26
 8001800:	d534      	bpl.n	800186c <HAL_ADC_IRQHandler+0xdc>
 8001802:	06b0      	lsls	r0, r6, #26
 8001804:	d532      	bpl.n	800186c <HAL_ADC_IRQHandler+0xdc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001806:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001808:	06d0      	lsls	r0, r2, #27
 800180a:	d403      	bmi.n	8001814 <HAL_ADC_IRQHandler+0x84>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800180c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800180e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001812:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001816:	f012 0fc0 	tst.w	r2, #192	@ 0xc0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800181a:	68da      	ldr	r2, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800181c:	d162      	bne.n	80018e4 <HAL_ADC_IRQHandler+0x154>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800181e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	f040 8099 	bne.w	800195a <HAL_ADC_IRQHandler+0x1ca>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001828:	4957      	ldr	r1, [pc, #348]	@ (8001988 <HAL_ADC_IRQHandler+0x1f8>)
 800182a:	4391      	bics	r1, r2
 800182c:	d05b      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x156>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	0648      	lsls	r0, r1, #25
 8001832:	d558      	bpl.n	80018e6 <HAL_ADC_IRQHandler+0x156>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001834:	0291      	lsls	r1, r2, #10
 8001836:	d456      	bmi.n	80018e6 <HAL_ADC_IRQHandler+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	0712      	lsls	r2, r2, #28
 800183c:	f100 809a 	bmi.w	8001974 <HAL_ADC_IRQHandler+0x1e4>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001846:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001848:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800184a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800184e:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001850:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001852:	05d8      	lsls	r0, r3, #23
 8001854:	d447      	bmi.n	80018e6 <HAL_ADC_IRQHandler+0x156>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001856:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6563      	str	r3, [r4, #84]	@ 0x54
 800185e:	e042      	b.n	80018e6 <HAL_ADC_IRQHandler+0x156>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001860:	0729      	lsls	r1, r5, #28
 8001862:	d5cc      	bpl.n	80017fe <HAL_ADC_IRQHandler+0x6e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001864:	0732      	lsls	r2, r6, #28
 8001866:	d4a0      	bmi.n	80017aa <HAL_ADC_IRQHandler+0x1a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001868:	06aa      	lsls	r2, r5, #26
 800186a:	d4ca      	bmi.n	8001802 <HAL_ADC_IRQHandler+0x72>
 800186c:	0669      	lsls	r1, r5, #25
 800186e:	d414      	bmi.n	800189a <HAL_ADC_IRQHandler+0x10a>
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001870:	0629      	lsls	r1, r5, #24
 8001872:	d501      	bpl.n	8001878 <HAL_ADC_IRQHandler+0xe8>
 8001874:	0632      	lsls	r2, r6, #24
 8001876:	d449      	bmi.n	800190c <HAL_ADC_IRQHandler+0x17c>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001878:	05e8      	lsls	r0, r5, #23
 800187a:	d501      	bpl.n	8001880 <HAL_ADC_IRQHandler+0xf0>
 800187c:	05f1      	lsls	r1, r6, #23
 800187e:	d450      	bmi.n	8001922 <HAL_ADC_IRQHandler+0x192>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001880:	05aa      	lsls	r2, r5, #22
 8001882:	d501      	bpl.n	8001888 <HAL_ADC_IRQHandler+0xf8>
 8001884:	05b0      	lsls	r0, r6, #22
 8001886:	d435      	bmi.n	80018f4 <HAL_ADC_IRQHandler+0x164>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001888:	06e9      	lsls	r1, r5, #27
 800188a:	d501      	bpl.n	8001890 <HAL_ADC_IRQHandler+0x100>
 800188c:	06f2      	lsls	r2, r6, #27
 800188e:	d415      	bmi.n	80018bc <HAL_ADC_IRQHandler+0x12c>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001890:	0569      	lsls	r1, r5, #21
 8001892:	d501      	bpl.n	8001898 <HAL_ADC_IRQHandler+0x108>
 8001894:	0572      	lsls	r2, r6, #21
 8001896:	d450      	bmi.n	800193a <HAL_ADC_IRQHandler+0x1aa>
}
 8001898:	bd70      	pop	{r4, r5, r6, pc}
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800189a:	0672      	lsls	r2, r6, #25
 800189c:	d5e8      	bpl.n	8001870 <HAL_ADC_IRQHandler+0xe0>
 800189e:	e7b2      	b.n	8001806 <HAL_ADC_IRQHandler+0x76>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018a2:	06d9      	lsls	r1, r3, #27
 80018a4:	d403      	bmi.n	80018ae <HAL_ADC_IRQHandler+0x11e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018ac:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f000 fc52 	bl	8002158 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e772      	b.n	80017a2 <HAL_ADC_IRQHandler+0x12>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018bc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80018be:	b112      	cbz	r2, 80018c6 <HAL_ADC_IRQHandler+0x136>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	07d0      	lsls	r0, r2, #31
 80018c4:	d50b      	bpl.n	80018de <HAL_ADC_IRQHandler+0x14e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018cc:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff58 	bl	800178c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	2210      	movs	r2, #16
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e7d5      	b.n	8001890 <HAL_ADC_IRQHandler+0x100>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018e4:	68db      	ldr	r3, [r3, #12]
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f000 fc2e 	bl	8002148 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	2260      	movs	r2, #96	@ 0x60
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e7bd      	b.n	8001870 <HAL_ADC_IRQHandler+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fa:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f000 fc29 	bl	8002154 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e7bd      	b.n	8001888 <HAL_ADC_IRQHandler+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800190c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800190e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001912:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ff37 	bl	8001788 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	2280      	movs	r2, #128	@ 0x80
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e7aa      	b.n	8001878 <HAL_ADC_IRQHandler+0xe8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001922:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800192a:	4620      	mov	r0, r4
 800192c:	f000 fc10 	bl	8002150 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e7a2      	b.n	8001880 <HAL_ADC_IRQHandler+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800193a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800193c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001940:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001942:	6da2      	ldr	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001944:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001948:	f042 0208 	orr.w	r2, r2, #8
 800194c:	65a2      	str	r2, [r4, #88]	@ 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800194e:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001950:	6019      	str	r1, [r3, #0]
}
 8001952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001956:	f000 bbf9 	b.w	800214c <HAL_ADCEx_InjectedQueueOverflowCallback>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800195a:	0191      	lsls	r1, r2, #6
 800195c:	f57f af67 	bpl.w	800182e <HAL_ADC_IRQHandler+0x9e>
 8001960:	e7c1      	b.n	80018e6 <HAL_ADC_IRQHandler+0x156>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001972:	e73e      	b.n	80017f2 <HAL_ADC_IRQHandler+0x62>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001974:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001984:	e7af      	b.n	80018e6 <HAL_ADC_IRQHandler+0x156>
 8001986:	bf00      	nop
 8001988:	02002000 	.word	0x02002000

0800198c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800198c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800198e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001990:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001994:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001996:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001998:	d11d      	bne.n	80019d6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800199a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a0:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80019a2:	680a      	ldr	r2, [r1, #0]
 80019a4:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019a8:	68ca      	ldr	r2, [r1, #12]
 80019aa:	d01b      	beq.n	80019e4 <ADC_DMAConvCplt+0x58>
 80019ac:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80019b0:	d10d      	bne.n	80019ce <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80019b2:	68ca      	ldr	r2, [r1, #12]
 80019b4:	0494      	lsls	r4, r2, #18
 80019b6:	d40a      	bmi.n	80019ce <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019be:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019c2:	04d1      	lsls	r1, r2, #19
 80019c4:	d403      	bmi.n	80019ce <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fed0 	bl	8001774 <HAL_ADC_ConvCpltCallback>
}
 80019d4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019d6:	06d2      	lsls	r2, r2, #27
 80019d8:	d40a      	bmi.n	80019f0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80019e4:	0790      	lsls	r0, r2, #30
 80019e6:	d5e7      	bpl.n	80019b8 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fec3 	bl	8001774 <HAL_ADC_ConvCpltCallback>
 80019ee:	e7f1      	b.n	80019d4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fecb 	bl	800178c <HAL_ADC_ErrorCallback>
}
 80019f6:	bd10      	pop	{r4, pc}

080019f8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019f8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80019fa:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80019fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a02:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a04:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a0c:	f7ff febe 	bl	800178c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a10:	bd08      	pop	{r3, pc}
 8001a12:	bf00      	nop

08001a14 <HAL_ADC_ConfigChannel>:
{
 8001a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8001a18:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001a20:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001a28:	f000 8122 	beq.w	8001c70 <HAL_ADC_ConfigChannel+0x25c>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a2c:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a34:	68a2      	ldr	r2, [r4, #8]
 8001a36:	f012 0c04 	ands.w	ip, r2, #4
 8001a3a:	d155      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0xd4>
    uint32_t config_rank = pConfig->Rank;
 8001a3c:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 8001a3e:	2805      	cmp	r0, #5
 8001a40:	f240 808e 	bls.w	8001b60 <HAL_ADC_ConfigChannel+0x14c>
  MODIFY_REG(*preg,
 8001a44:	f000 051f 	and.w	r5, r0, #31
 8001a48:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a4c:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8001a4e:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a52:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8001a56:	ea6f 0e0e 	mvn.w	lr, lr
 8001a5a:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a5c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8001a60:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001a64:	40aa      	lsls	r2, r5
 8001a66:	f850 500c 	ldr.w	r5, [r0, ip]
 8001a6a:	ea05 050e 	and.w	r5, r5, lr
 8001a6e:	432a      	orrs	r2, r5
 8001a70:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a74:	68a2      	ldr	r2, [r4, #8]
 8001a76:	0752      	lsls	r2, r2, #29
 8001a78:	d540      	bpl.n	8001afc <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a7a:	68a2      	ldr	r2, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a7c:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a7e:	68a0      	ldr	r0, [r4, #8]
 8001a80:	07c6      	lsls	r6, r0, #31
 8001a82:	d412      	bmi.n	8001aaa <HAL_ADC_ConfigChannel+0x96>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a84:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001a86:	48b8      	ldr	r0, [pc, #736]	@ (8001d68 <HAL_ADC_ConfigChannel+0x354>)
 8001a88:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8001a8c:	f006 0718 	and.w	r7, r6, #24
 8001a90:	40f8      	lsrs	r0, r7
 8001a92:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8001a96:	4010      	ands	r0, r2
 8001a98:	ea25 0507 	bic.w	r5, r5, r7
 8001a9c:	4328      	orrs	r0, r5
 8001a9e:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aa2:	48b2      	ldr	r0, [pc, #712]	@ (8001d6c <HAL_ADC_ConfigChannel+0x358>)
 8001aa4:	4286      	cmp	r6, r0
 8001aa6:	f000 8093 	beq.w	8001bd0 <HAL_ADC_ConfigChannel+0x1bc>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001aaa:	49b1      	ldr	r1, [pc, #708]	@ (8001d70 <HAL_ADC_ConfigChannel+0x35c>)
 8001aac:	420a      	tst	r2, r1
 8001aae:	d019      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab0:	48b0      	ldr	r0, [pc, #704]	@ (8001d74 <HAL_ADC_ConfigChannel+0x360>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab2:	4db1      	ldr	r5, [pc, #708]	@ (8001d78 <HAL_ADC_ConfigChannel+0x364>)
 8001ab4:	6881      	ldr	r1, [r0, #8]
 8001ab6:	42aa      	cmp	r2, r5
 8001ab8:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8001abc:	d066      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x178>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001abe:	4daf      	ldr	r5, [pc, #700]	@ (8001d7c <HAL_ADC_ConfigChannel+0x368>)
 8001ac0:	42aa      	cmp	r2, r5
 8001ac2:	f000 80d9 	beq.w	8001c78 <HAL_ADC_ConfigChannel+0x264>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ac6:	4dae      	ldr	r5, [pc, #696]	@ (8001d80 <HAL_ADC_ConfigChannel+0x36c>)
 8001ac8:	42aa      	cmp	r2, r5
 8001aca:	d10b      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001acc:	024a      	lsls	r2, r1, #9
 8001ace:	d409      	bmi.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ad0:	4aac      	ldr	r2, [pc, #688]	@ (8001d84 <HAL_ADC_ConfigChannel+0x370>)
 8001ad2:	4294      	cmp	r4, r2
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ad6:	6882      	ldr	r2, [r0, #8]
 8001ad8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001adc:	4332      	orrs	r2, r6
 8001ade:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001ae2:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e003      	b.n	8001af0 <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001af6:	b002      	add	sp, #8
 8001af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001afc:	68a0      	ldr	r0, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001afe:	680a      	ldr	r2, [r1, #0]
 8001b00:	0707      	lsls	r7, r0, #28
 8001b02:	d4bc      	bmi.n	8001a7e <HAL_ADC_ConfigChannel+0x6a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b04:	0dd0      	lsrs	r0, r2, #23
 8001b06:	f000 0004 	and.w	r0, r0, #4
 8001b0a:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8001b0e:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 8001b12:	688e      	ldr	r6, [r1, #8]
 8001b14:	582a      	ldr	r2, [r5, r0]
 8001b16:	2707      	movs	r7, #7
 8001b18:	fa07 f70c 	lsl.w	r7, r7, ip
 8001b1c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001b20:	ea22 0207 	bic.w	r2, r2, r7
 8001b24:	4332      	orrs	r2, r6
 8001b26:	502a      	str	r2, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b28:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b2c:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b2e:	68e0      	ldr	r0, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b30:	f000 80c5 	beq.w	8001cbe <HAL_ADC_ConfigChannel+0x2aa>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b34:	f104 0660 	add.w	r6, r4, #96	@ 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b38:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001b3c:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8001b3e:	f856 c025 	ldr.w	ip, [r6, r5, lsl #2]
 8001b42:	4f91      	ldr	r7, [pc, #580]	@ (8001d88 <HAL_ADC_ConfigChannel+0x374>)
 8001b44:	4082      	lsls	r2, r0
 8001b46:	6808      	ldr	r0, [r1, #0]
 8001b48:	ea0c 0707 	and.w	r7, ip, r7
 8001b4c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001b50:	4338      	orrs	r0, r7
 8001b52:	4302      	orrs	r2, r0
 8001b54:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b58:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b5c:	680a      	ldr	r2, [r1, #0]
}
 8001b5e:	e78e      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 8001b60:	3802      	subs	r0, #2
 8001b62:	2803      	cmp	r0, #3
 8001b64:	d903      	bls.n	8001b6e <HAL_ADC_ConfigChannel+0x15a>
    if (pConfig->Rank <= 5U)
 8001b66:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8001b6a:	2506      	movs	r5, #6
 8001b6c:	e775      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x46>
 8001b6e:	4a87      	ldr	r2, [pc, #540]	@ (8001d8c <HAL_ADC_ConfigChannel+0x378>)
 8001b70:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 8001b74:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b78:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 8001b7a:	f005 051f 	and.w	r5, r5, #31
 8001b7e:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b82:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8001b86:	ea6f 0e0e 	mvn.w	lr, lr
 8001b8a:	e766      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b8c:	020d      	lsls	r5, r1, #8
 8001b8e:	d4a9      	bmi.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b90:	4a7c      	ldr	r2, [pc, #496]	@ (8001d84 <HAL_ADC_ConfigChannel+0x370>)
 8001b92:	4294      	cmp	r4, r2
 8001b94:	d1a6      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b96:	6882      	ldr	r2, [r0, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b98:	497d      	ldr	r1, [pc, #500]	@ (8001d90 <HAL_ADC_ConfigChannel+0x37c>)
 8001b9a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001b9e:	4332      	orrs	r2, r6
 8001ba0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ba4:	6082      	str	r2, [r0, #8]
 8001ba6:	680a      	ldr	r2, [r1, #0]
 8001ba8:	497a      	ldr	r1, [pc, #488]	@ (8001d94 <HAL_ADC_ConfigChannel+0x380>)
 8001baa:	0992      	lsrs	r2, r2, #6
 8001bac:	fba1 1202 	umull	r1, r2, r1, r2
 8001bb0:	0992      	lsrs	r2, r2, #6
 8001bb2:	3201      	adds	r2, #1
 8001bb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001bbc:	9a01      	ldr	r2, [sp, #4]
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	d090      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8001bc2:	9a01      	ldr	r2, [sp, #4]
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001bc8:	9a01      	ldr	r2, [sp, #4]
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x1ae>
 8001bce:	e789      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd0:	2f00      	cmp	r7, #0
 8001bd2:	d060      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x282>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f000 809e 	beq.w	8001d1a <HAL_ADC_ConfigChannel+0x306>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001bde:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be2:	3001      	adds	r0, #1
 8001be4:	f000 001f 	and.w	r0, r0, #31
 8001be8:	2809      	cmp	r0, #9
 8001bea:	f240 8096 	bls.w	8001d1a <HAL_ADC_ConfigChannel+0x306>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	f000 814f 	beq.w	8001e96 <HAL_ADC_ConfigChannel+0x482>
  return __builtin_clz(value);
 8001bf8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	0680      	lsls	r0, r0, #26
 8001c00:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	f000 814e 	beq.w	8001eaa <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8001c0e:	fab5 f585 	clz	r5, r5
 8001c12:	3501      	adds	r5, #1
 8001c14:	f005 051f 	and.w	r5, r5, #31
 8001c18:	2601      	movs	r6, #1
 8001c1a:	fa06 f505 	lsl.w	r5, r6, r5
 8001c1e:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	f000 813e 	beq.w	8001ea6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	1c55      	adds	r5, r2, #1
 8001c30:	f005 051f 	and.w	r5, r5, #31
 8001c34:	2203      	movs	r2, #3
 8001c36:	f06f 061d 	mvn.w	r6, #29
 8001c3a:	fb12 6205 	smlabb	r2, r2, r5, r6
 8001c3e:	0512      	lsls	r2, r2, #20
 8001c40:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c44:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c46:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8001c48:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c4a:	f006 0604 	and.w	r6, r6, #4
 8001c4e:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8001c52:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001c56:	fa00 f702 	lsl.w	r7, r0, r2
 8001c5a:	f04f 0c07 	mov.w	ip, #7
 8001c5e:	59a8      	ldr	r0, [r5, r6]
 8001c60:	fa0c f202 	lsl.w	r2, ip, r2
 8001c64:	ea20 0202 	bic.w	r2, r0, r2
 8001c68:	433a      	orrs	r2, r7
 8001c6a:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c6c:	680a      	ldr	r2, [r1, #0]
}
 8001c6e:	e71c      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8001c70:	2002      	movs	r0, #2
}
 8001c72:	b002      	add	sp, #8
 8001c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c78:	01c9      	lsls	r1, r1, #7
 8001c7a:	f53f af33 	bmi.w	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c7e:	4a41      	ldr	r2, [pc, #260]	@ (8001d84 <HAL_ADC_ConfigChannel+0x370>)
 8001c80:	4294      	cmp	r4, r2
 8001c82:	f47f af2f 	bne.w	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c86:	6882      	ldr	r2, [r0, #8]
 8001c88:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c8c:	4332      	orrs	r2, r6
 8001c8e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001c92:	6082      	str	r2, [r0, #8]
}
 8001c94:	e726      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c96:	0e92      	lsrs	r2, r2, #26
 8001c98:	3201      	adds	r2, #1
 8001c9a:	f002 051f 	and.w	r5, r2, #31
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	0692      	lsls	r2, r2, #26
 8001ca2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8001ca6:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca8:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001caa:	ea40 0002 	orr.w	r0, r0, r2
 8001cae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb2:	d957      	bls.n	8001d64 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cb4:	3a1e      	subs	r2, #30
 8001cb6:	0512      	lsls	r2, r2, #20
 8001cb8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8001cbc:	e7c2      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x230>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cbe:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001cc2:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8001cc4:	f3c0 0612 	ubfx	r6, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cc8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ccc:	4602      	mov	r2, r0
 8001cce:	2e00      	cmp	r6, #0
 8001cd0:	d162      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x384>
 8001cd2:	f3c0 6284 	ubfx	r2, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cd6:	4295      	cmp	r5, r2
 8001cd8:	f000 8096 	beq.w	8001e08 <HAL_ADC_ConfigChannel+0x3f4>
 8001cdc:	6e65      	ldr	r5, [r4, #100]	@ 0x64
 8001cde:	6e66      	ldr	r6, [r4, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce0:	f104 0560 	add.w	r5, r4, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001ce8:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
 8001cec:	4296      	cmp	r6, r2
 8001cee:	f000 80b6 	beq.w	8001e5e <HAL_ADC_ConfigChannel+0x44a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cf2:	68ae      	ldr	r6, [r5, #8]
 8001cf4:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	f105 0c08 	add.w	ip, r5, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cfa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001cfe:	4296      	cmp	r6, r2
 8001d00:	f000 8097 	beq.w	8001e32 <HAL_ADC_ConfigChannel+0x41e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d04:	68ee      	ldr	r6, [r5, #12]
 8001d06:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d08:	f105 070c 	add.w	r7, r5, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d0c:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8001d10:	42aa      	cmp	r2, r5
 8001d12:	f000 80ba 	beq.w	8001e8a <HAL_ADC_ConfigChannel+0x476>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d16:	4602      	mov	r2, r0
 8001d18:	e6b1      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x6a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	f000 80cf 	beq.w	8001ec2 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8001d24:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d28:	3001      	adds	r0, #1
 8001d2a:	0680      	lsls	r0, r0, #26
 8001d2c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001d34:	2d00      	cmp	r5, #0
 8001d36:	f000 80c2 	beq.w	8001ebe <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 8001d3a:	fab5 f585 	clz	r5, r5
 8001d3e:	3501      	adds	r5, #1
 8001d40:	f005 051f 	and.w	r5, r5, #31
 8001d44:	2601      	movs	r6, #1
 8001d46:	fa06 f505 	lsl.w	r5, r6, r5
 8001d4a:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	f000 80b1 	beq.w	8001eb8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	3201      	adds	r2, #1
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d64:	0512      	lsls	r2, r2, #20
 8001d66:	e76d      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x230>
 8001d68:	0007ffff 	.word	0x0007ffff
 8001d6c:	407f0000 	.word	0x407f0000
 8001d70:	80080000 	.word	0x80080000
 8001d74:	50040300 	.word	0x50040300
 8001d78:	c7520000 	.word	0xc7520000
 8001d7c:	cb840000 	.word	0xcb840000
 8001d80:	80000001 	.word	0x80000001
 8001d84:	50040000 	.word	0x50040000
 8001d88:	03fff000 	.word	0x03fff000
 8001d8c:	08005e08 	.word	0x08005e08
 8001d90:	20000004 	.word	0x20000004
 8001d94:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8001d9c:	b11e      	cbz	r6, 8001da6 <HAL_ADC_ConfigChannel+0x392>
  return __builtin_clz(value);
 8001d9e:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001da2:	42b5      	cmp	r5, r6
 8001da4:	d030      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x3f4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001da6:	6e65      	ldr	r5, [r4, #100]	@ 0x64
 8001da8:	6e66      	ldr	r6, [r4, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001daa:	f104 0560 	add.w	r5, r4, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dae:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001db2:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	fa90 f7a0 	rbit	r7, r0
 8001dba:	f105 0c08 	add.w	ip, r5, #8
 8001dbe:	46e0      	mov	r8, ip
  if (value == 0U)
 8001dc0:	2f00      	cmp	r7, #0
 8001dc2:	d074      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x49a>
  return __builtin_clz(value);
 8001dc4:	fab7 f787 	clz	r7, r7
 8001dc8:	42b7      	cmp	r7, r6
 8001dca:	d04a      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0x44e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dcc:	f8dc 6000 	ldr.w	r6, [ip]
 8001dd0:	f8dc 6000 	ldr.w	r6, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dd4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	fa90 fea0 	rbit	lr, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ddc:	f105 070c 	add.w	r7, r5, #12
 8001de0:	46b8      	mov	r8, r7
  if (value == 0U)
 8001de2:	f1be 0f00 	cmp.w	lr, #0
 8001de6:	d059      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8001de8:	fabe fe8e 	clz	lr, lr
 8001dec:	45b6      	cmp	lr, r6
 8001dee:	d022      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x422>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001df0:	683d      	ldr	r5, [r7, #0]
 8001df2:	683d      	ldr	r5, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001df4:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8001dfc:	2e00      	cmp	r6, #0
 8001dfe:	f43f ae3e 	beq.w	8001a7e <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 8001e02:	fab6 f286 	clz	r2, r6
 8001e06:	e783      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8001e08:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001e0a:	4625      	mov	r5, r4
 8001e0c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e10:	f845 2f60 	str.w	r2, [r5, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e14:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e18:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8001e1a:	f3c0 0712 	ubfx	r7, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1e:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e22:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e26:	4602      	mov	r2, r0
 8001e28:	2f00      	cmp	r7, #0
 8001e2a:	d1c4      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x3a2>
 8001e2c:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8001e30:	e75c      	b.n	8001cec <HAL_ADC_ConfigChannel+0x2d8>
 8001e32:	f105 080c 	add.w	r8, r5, #12
  MODIFY_REG(*preg,
 8001e36:	f8dc 2000 	ldr.w	r2, [ip]
 8001e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e3e:	f8cc 2000 	str.w	r2, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e42:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e44:	68ea      	ldr	r2, [r5, #12]
 8001e46:	68ed      	ldr	r5, [r5, #12]
 8001e48:	f3c0 0612 	ubfx	r6, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4c:	4647      	mov	r7, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4e:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e52:	4602      	mov	r2, r0
 8001e54:	2e00      	cmp	r6, #0
 8001e56:	d1cf      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x3e4>
 8001e58:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8001e5c:	e758      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2fc>
 8001e5e:	f105 0808 	add.w	r8, r5, #8
  MODIFY_REG(*preg,
 8001e62:	f8de 2000 	ldr.w	r2, [lr]
 8001e66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e6a:	f8ce 2000 	str.w	r2, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e6e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e70:	68aa      	ldr	r2, [r5, #8]
 8001e72:	68ae      	ldr	r6, [r5, #8]
 8001e74:	f3c0 0712 	ubfx	r7, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e78:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e7a:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e7e:	4602      	mov	r2, r0
 8001e80:	2f00      	cmp	r7, #0
 8001e82:	d1a9      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x3c4>
 8001e84:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8001e88:	e739      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x2ea>
  MODIFY_REG(*preg,
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e90:	603a      	str	r2, [r7, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e92:	680a      	ldr	r2, [r1, #0]
}
 8001e94:	e5f3      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x6a>
 8001e96:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001e9a:	e6b3      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x1f0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e9c:	68ee      	ldr	r6, [r5, #12]
 8001e9e:	68ed      	ldr	r5, [r5, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea0:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8001ea4:	e7a8      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x3e4>
 8001ea6:	4a08      	ldr	r2, [pc, #32]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x4b4>)
 8001ea8:	e6cc      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x230>
 8001eaa:	2502      	movs	r5, #2
 8001eac:	e6b7      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x20a>
 8001eae:	68ae      	ldr	r6, [r5, #8]
 8001eb0:	68ae      	ldr	r6, [r5, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eb2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001eb6:	e78f      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x3c4>
 8001eb8:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001ebc:	e6c2      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x230>
 8001ebe:	2502      	movs	r5, #2
 8001ec0:	e743      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x336>
 8001ec2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001ec6:	e733      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x31c>
 8001ec8:	fe500000 	.word	0xfe500000

08001ecc <ADC_Enable>:
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001ed0:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8001ed4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	07d2      	lsls	r2, r2, #31
 8001eda:	d42c      	bmi.n	8001f36 <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <ADC_Enable+0xb4>)
 8001ee0:	4211      	tst	r1, r2
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	d12a      	bne.n	8001f3c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001ee6:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee8:	4926      	ldr	r1, [pc, #152]	@ (8001f84 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 8001eea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001eee:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ef8:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	d429      	bmi.n	8001f52 <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 8001efe:	f7ff fb51 	bl	80015a4 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8001f08:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f0a:	d414      	bmi.n	8001f36 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8001f0c:	4e1e      	ldr	r6, [pc, #120]	@ (8001f88 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	07d0      	lsls	r0, r2, #31
 8001f12:	d404      	bmi.n	8001f1e <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	4032      	ands	r2, r6
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f1e:	f7ff fb41 	bl	80015a4 <HAL_GetTick>
 8001f22:	1b43      	subs	r3, r0, r5
 8001f24:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f26:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f28:	d902      	bls.n	8001f30 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	07d1      	lsls	r1, r2, #31
 8001f2e:	d505      	bpl.n	8001f3c <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	07d2      	lsls	r2, r2, #31
 8001f34:	d5eb      	bpl.n	8001f0e <ADC_Enable+0x42>
  return HAL_OK;
 8001f36:	2000      	movs	r0, #0
}
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f3e:	f043 0310 	orr.w	r3, r3, #16
 8001f42:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <ADC_Enable+0xc0>)
 8001f54:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <ADC_Enable+0xc4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	099b      	lsrs	r3, r3, #6
 8001f60:	3301      	adds	r3, #1
 8001f62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001f6a:	9b01      	ldr	r3, [sp, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0c6      	beq.n	8001efe <ADC_Enable+0x32>
        wait_loop_index--;
 8001f70:	9b01      	ldr	r3, [sp, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001f76:	9b01      	ldr	r3, [sp, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <ADC_Enable+0xa4>
 8001f7c:	e7bf      	b.n	8001efe <ADC_Enable+0x32>
 8001f7e:	bf00      	nop
 8001f80:	8000003f 	.word	0x8000003f
 8001f84:	50040300 	.word	0x50040300
 8001f88:	7fffffc0 	.word	0x7fffffc0
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	053e2d63 	.word	0x053e2d63

08001f94 <HAL_ADC_Start_DMA>:
{
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f96:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f98:	689d      	ldr	r5, [r3, #8]
 8001f9a:	f015 0504 	ands.w	r5, r5, #4
 8001f9e:	d141      	bne.n	8002024 <HAL_ADC_Start_DMA+0x90>
    __HAL_LOCK(hadc);
 8001fa0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	d03c      	beq.n	8002024 <HAL_ADC_Start_DMA+0x90>
 8001faa:	2301      	movs	r3, #1
 8001fac:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      tmp_hal_status = ADC_Enable(hadc);
 8001fb0:	460f      	mov	r7, r1
 8001fb2:	4616      	mov	r6, r2
 8001fb4:	f7ff ff8a 	bl	8001ecc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d135      	bne.n	8002028 <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fbe:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fc0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fce:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fd0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001fd2:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fd6:	bf1c      	itt	ne
 8001fd8:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 8001fda:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001fde:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <HAL_ADC_Start_DMA+0x9c>)
 8001fe2:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_ADC_Start_DMA+0xa0>)
 8001fe6:	6303      	str	r3, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fe8:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_ADC_Start_DMA+0xa4>)
 8001fec:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fee:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8001ff0:	2500      	movs	r5, #0
 8001ff2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ff6:	684d      	ldr	r5, [r1, #4]
 8001ff8:	f045 0510 	orr.w	r5, r5, #16
 8001ffc:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ffe:	68cd      	ldr	r5, [r1, #12]
 8002000:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002004:	4633      	mov	r3, r6
 8002006:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002008:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800200a:	3140      	adds	r1, #64	@ 0x40
 800200c:	f000 f986 	bl	800231c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002010:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002012:	6893      	ldr	r3, [r2, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6093      	str	r3, [r2, #8]
}
 8002022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002024:	2002      	movs	r0, #2
}
 8002026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8002028:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 800202c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202e:	bf00      	nop
 8002030:	0800198d 	.word	0x0800198d
 8002034:	0800177d 	.word	0x0800177d
 8002038:	080019f9 	.word	0x080019f9

0800203c <ADC_Disable>:
{
 800203c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800203e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	0795      	lsls	r5, r2, #30
 8002044:	d502      	bpl.n	800204c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002046:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002048:	2000      	movs	r0, #0
}
 800204a:	bd38      	pop	{r3, r4, r5, pc}
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	07d4      	lsls	r4, r2, #31
 8002050:	d5fa      	bpl.n	8002048 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	f002 020d 	and.w	r2, r2, #13
 8002058:	2a01      	cmp	r2, #1
 800205a:	4604      	mov	r4, r0
 800205c:	d009      	beq.n	8002072 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002060:	f043 0310 	orr.w	r3, r3, #16
 8002064:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800206e:	2001      	movs	r0, #1
}
 8002070:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002078:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800207c:	2103      	movs	r1, #3
 800207e:	f042 0202 	orr.w	r2, r2, #2
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002086:	f7ff fa8d 	bl	80015a4 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002090:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002092:	d403      	bmi.n	800209c <ADC_Disable+0x60>
 8002094:	e7d8      	b.n	8002048 <ADC_Disable+0xc>
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	07db      	lsls	r3, r3, #31
 800209a:	d5d5      	bpl.n	8002048 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800209c:	f7ff fa82 	bl	80015a4 <HAL_GetTick>
 80020a0:	1b40      	subs	r0, r0, r5
 80020a2:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020a4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a6:	d9f6      	bls.n	8002096 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	07d2      	lsls	r2, r2, #31
 80020ac:	d5f3      	bpl.n	8002096 <ADC_Disable+0x5a>
 80020ae:	e7d6      	b.n	800205e <ADC_Disable+0x22>

080020b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80020b0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b2:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80020b6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80020b8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80020ba:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80020bc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80020be:	d03f      	beq.n	8002140 <HAL_ADCEx_Calibration_Start+0x90>
 80020c0:	2301      	movs	r3, #1
 80020c2:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80020c6:	4604      	mov	r4, r0
 80020c8:	460d      	mov	r5, r1
 80020ca:	f7ff ffb7 	bl	800203c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status == HAL_OK)
 80020d0:	b9e0      	cbnz	r0, 800210c <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020d6:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80020da:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80020e2:	6893      	ldr	r3, [r2, #8]
 80020e4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80020e8:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f0:	430b      	orrs	r3, r1
 80020f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020f6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0e      	blt.n	800211c <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002100:	f023 0303 	bic.w	r3, r3, #3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6563      	str	r3, [r4, #84]	@ 0x54
 800210a:	e002      	b.n	8002112 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002112:	2300      	movs	r3, #0
 8002114:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002118:	b003      	add	sp, #12
 800211a:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800211c:	9b01      	ldr	r3, [sp, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002122:	9b01      	ldr	r3, [sp, #4]
 8002124:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002128:	d3e6      	bcc.n	80020f8 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800212a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800212c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8002130:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8002138:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800213c:	2001      	movs	r0, #1
 800213e:	e7eb      	b.n	8002118 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8002140:	2002      	movs	r0, #2
}
 8002142:	b003      	add	sp, #12
 8002144:	bd30      	pop	{r4, r5, pc}
 8002146:	bf00      	nop

08002148 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop

08002154 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4907      	ldr	r1, [pc, #28]	@ (800217c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800215e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002166:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002176:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_NVIC_SetPriority+0x70>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218a:	f1c3 0e07 	rsb	lr, r3, #7
 800218e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002196:	bf28      	it	cs
 8002198:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219c:	f1bc 0f06 	cmp.w	ip, #6
 80021a0:	d91c      	bls.n	80021dc <HAL_NVIC_SetPriority+0x5c>
 80021a2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	fa03 f30c 	lsl.w	r3, r3, ip
 80021ae:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	fa03 f30e 	lsl.w	r3, r3, lr
 80021ba:	ea21 0303 	bic.w	r3, r1, r3
 80021be:	fa03 f30c 	lsl.w	r3, r3, ip
 80021c2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80021c6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80021ca:	db0a      	blt.n	80021e2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80021d0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80021d4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021dc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	4694      	mov	ip, r2
 80021e0:	e7e7      	b.n	80021b2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_NVIC_SetPriority+0x74>)
 80021e4:	f000 000f 	and.w	r0, r0, #15
 80021e8:	4402      	add	r2, r0
 80021ea:	7613      	strb	r3, [r2, #24]
 80021ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	e000ecfc 	.word	0xe000ecfc

080021f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021f8:	2800      	cmp	r0, #0
 80021fa:	db07      	blt.n	800220c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_NVIC_EnableIRQ+0x18>)
 80021fe:	0941      	lsrs	r1, r0, #5
 8002200:	2301      	movs	r3, #1
 8002202:	f000 001f 	and.w	r0, r0, #31
 8002206:	4083      	lsls	r3, r0
 8002208:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100

08002214 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	3801      	subs	r0, #1
 8002216:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800221a:	d301      	bcc.n	8002220 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800221e:	4770      	bx	lr
{
 8002220:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	4c07      	ldr	r4, [pc, #28]	@ (8002244 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002228:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800222e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002232:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002234:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002236:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	6119      	str	r1, [r3, #16]
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002248:	2800      	cmp	r0, #0
 800224a:	d04e      	beq.n	80022ea <HAL_DMA_Init+0xa2>
{
 800224c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800224e:	4a2d      	ldr	r2, [pc, #180]	@ (8002304 <HAL_DMA_Init+0xbc>)
 8002250:	6804      	ldr	r4, [r0, #0]
 8002252:	4294      	cmp	r4, r2
 8002254:	4603      	mov	r3, r0
 8002256:	d93f      	bls.n	80022d8 <HAL_DMA_Init+0x90>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002258:	492b      	ldr	r1, [pc, #172]	@ (8002308 <HAL_DMA_Init+0xc0>)
 800225a:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA2;
 800225c:	4d2c      	ldr	r5, [pc, #176]	@ (8002310 <HAL_DMA_Init+0xc8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800225e:	4421      	add	r1, r4
 8002260:	fba2 2101 	umull	r2, r1, r2, r1
 8002264:	0909      	lsrs	r1, r1, #4
 8002266:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	2202      	movs	r2, #2
 800226a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800226e:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8002274:	6820      	ldr	r0, [r4, #0]
 8002276:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 8002278:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	433a      	orrs	r2, r7
 800227c:	695f      	ldr	r7, [r3, #20]
 800227e:	6459      	str	r1, [r3, #68]	@ 0x44
 8002280:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002282:	699f      	ldr	r7, [r3, #24]
 8002284:	433a      	orrs	r2, r7
 8002286:	69df      	ldr	r7, [r3, #28]
 8002288:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800228a:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800228c:	f36f 100e 	bfc	r0, #4, #11
          hdma->Init.Mode                | hdma->Init.Priority;
 8002290:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8002292:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002294:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8002298:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800229a:	d014      	beq.n	80022c6 <HAL_DMA_Init+0x7e>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800229c:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800229e:	f001 011c 	and.w	r1, r1, #28
 80022a2:	220f      	movs	r2, #15
 80022a4:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022a6:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80022a8:	491a      	ldr	r1, [pc, #104]	@ (8002314 <HAL_DMA_Init+0xcc>)
 80022aa:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022ac:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80022b0:	d01d      	beq.n	80022ee <HAL_DMA_Init+0xa6>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022b2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 80022b6:	4022      	ands	r2, r4
 80022b8:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022bc:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 80022c0:	4302      	orrs	r2, r0
 80022c2:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022c8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ca:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022cc:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80022d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 80022d4:	bcf0      	pop	{r4, r5, r6, r7}
 80022d6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022d8:	490f      	ldr	r1, [pc, #60]	@ (8002318 <HAL_DMA_Init+0xd0>)
 80022da:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA1;
 80022dc:	4d0d      	ldr	r5, [pc, #52]	@ (8002314 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022de:	4421      	add	r1, r4
 80022e0:	fba2 2101 	umull	r2, r1, r2, r1
 80022e4:	0909      	lsrs	r1, r1, #4
 80022e6:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80022e8:	e7be      	b.n	8002268 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80022ea:	2001      	movs	r0, #1
}
 80022ec:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022ee:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 80022f2:	400a      	ands	r2, r1
 80022f4:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022f8:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 80022fc:	4302      	orrs	r2, r0
 80022fe:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8002302:	e7e0      	b.n	80022c6 <HAL_DMA_Init+0x7e>
 8002304:	40020407 	.word	0x40020407
 8002308:	bffdfbf8 	.word	0xbffdfbf8
 800230c:	cccccccd 	.word	0xcccccccd
 8002310:	40020400 	.word	0x40020400
 8002314:	40020000 	.word	0x40020000
 8002318:	bffdfff8 	.word	0xbffdfff8

0800231c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231c:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231e:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8002322:	2c01      	cmp	r4, #1
 8002324:	d00b      	beq.n	800233e <HAL_DMA_Start_IT+0x22>
 8002326:	2401      	movs	r4, #1
 8002328:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800232c:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8002330:	2c01      	cmp	r4, #1
 8002332:	fa5f fc84 	uxtb.w	ip, r4
 8002336:	d005      	beq.n	8002344 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	2300      	movs	r3, #0
 800233a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 800233e:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8002340:	bc70      	pop	{r4, r5, r6}
 8002342:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002344:	2502      	movs	r5, #2
 8002346:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 800234a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234c:	2500      	movs	r5, #0
 800234e:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002350:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002352:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8002354:	f026 0601 	bic.w	r6, r6, #1
 8002358:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800235a:	f005 051c 	and.w	r5, r5, #28
 800235e:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8002360:	fa0c f505 	lsl.w	r5, ip, r5
 8002364:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002366:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002368:	6883      	ldr	r3, [r0, #8]
 800236a:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800236c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800236e:	bf0b      	itete	eq
 8002370:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002372:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002374:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002376:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002378:	b153      	cbz	r3, 8002390 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	f043 030e 	orr.w	r3, r3, #14
 8002380:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800238a:	6023      	str	r3, [r4, #0]
}
 800238c:	bc70      	pop	{r4, r5, r6}
 800238e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f023 0304 	bic.w	r3, r3, #4
 8002396:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	f043 030a 	orr.w	r3, r3, #10
 800239e:	6023      	str	r3, [r4, #0]
 80023a0:	e7ef      	b.n	8002382 <HAL_DMA_Start_IT+0x66>
 80023a2:	bf00      	nop

080023a4 <HAL_DMA_IRQHandler>:
{
 80023a4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023a8:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80023aa:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ac:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80023ae:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023b0:	f003 031c 	and.w	r3, r3, #28
 80023b4:	2204      	movs	r2, #4
 80023b6:	409a      	lsls	r2, r3
 80023b8:	420a      	tst	r2, r1
 80023ba:	d00e      	beq.n	80023da <HAL_DMA_IRQHandler+0x36>
 80023bc:	f014 0f04 	tst.w	r4, #4
 80023c0:	d00b      	beq.n	80023da <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	069b      	lsls	r3, r3, #26
 80023c6:	d403      	bmi.n	80023d0 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80023d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023d2:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80023d4:	b1cb      	cbz	r3, 800240a <HAL_DMA_IRQHandler+0x66>
}
 80023d6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80023d8:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023da:	2202      	movs	r2, #2
 80023dc:	409a      	lsls	r2, r3
 80023de:	420a      	tst	r2, r1
 80023e0:	d015      	beq.n	800240e <HAL_DMA_IRQHandler+0x6a>
 80023e2:	f014 0f02 	tst.w	r4, #2
 80023e6:	d012      	beq.n	800240e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	0699      	lsls	r1, r3, #26
 80023ec:	d406      	bmi.n	80023fc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	f023 030a 	bic.w	r3, r3, #10
 80023f4:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 80023fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023fe:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8002400:	2100      	movs	r1, #0
 8002402:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1e5      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x32>
}
 800240a:	bc70      	pop	{r4, r5, r6}
 800240c:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800240e:	2208      	movs	r2, #8
 8002410:	409a      	lsls	r2, r3
 8002412:	420a      	tst	r2, r1
 8002414:	d0f9      	beq.n	800240a <HAL_DMA_IRQHandler+0x66>
 8002416:	0722      	lsls	r2, r4, #28
 8002418:	d5f7      	bpl.n	800240a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800241c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241e:	f022 020e 	bic.w	r2, r2, #14
 8002422:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002424:	2201      	movs	r2, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800242a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800242c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800242e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002430:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002434:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8002438:	2900      	cmp	r1, #0
 800243a:	d0e6      	beq.n	800240a <HAL_DMA_IRQHandler+0x66>
}
 800243c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800243e:	4708      	bx	r1

08002440 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 817b 	beq.w	800273e <HAL_GPIO_Init+0x2fe>
{
 8002448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8002450:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8002452:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002456:	f04f 0b01 	mov.w	fp, #1
 800245a:	f000 8137 	beq.w	80026cc <HAL_GPIO_Init+0x28c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800245e:	f8df e304 	ldr.w	lr, [pc, #772]	@ 8002764 <HAL_GPIO_Init+0x324>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	e05f      	b.n	8002526 <HAL_GPIO_Init+0xe6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002466:	2f03      	cmp	r7, #3
 8002468:	f040 816a 	bne.w	8002740 <HAL_GPIO_Init+0x300>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8002470:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002472:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002474:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002476:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800247a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800247c:	d04d      	beq.n	800251a <HAL_GPIO_Init+0xda>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4eb6      	ldr	r6, [pc, #728]	@ (8002758 <HAL_GPIO_Init+0x318>)
 8002480:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8002482:	f044 0401 	orr.w	r4, r4, #1
 8002486:	6634      	str	r4, [r6, #96]	@ 0x60
 8002488:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800248a:	f004 0401 	and.w	r4, r4, #1
 800248e:	9403      	str	r4, [sp, #12]
 8002490:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002492:	f022 0403 	bic.w	r4, r2, #3
 8002496:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249a:	f002 0703 	and.w	r7, r2, #3
 800249e:	230f      	movs	r3, #15
 80024a0:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 80024a4:	00bf      	lsls	r7, r7, #2
 80024a6:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024aa:	4bac      	ldr	r3, [pc, #688]	@ (800275c <HAL_GPIO_Init+0x31c>)
        temp = SYSCFG->EXTICR[position >> 2u];
 80024ac:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ae:	4298      	cmp	r0, r3
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b0:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b4:	f000 813d 	beq.w	8002732 <HAL_GPIO_Init+0x2f2>
 80024b8:	4ba9      	ldr	r3, [pc, #676]	@ (8002760 <HAL_GPIO_Init+0x320>)
 80024ba:	4298      	cmp	r0, r3
 80024bc:	bf0c      	ite	eq
 80024be:	f04f 0c02 	moveq.w	ip, #2
 80024c2:	f04f 0c07 	movne.w	ip, #7
 80024c6:	fa0c f707 	lsl.w	r7, ip, r7
 80024ca:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024cc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 80024ce:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80024d2:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d6:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80024d8:	bf54      	ite	pl
 80024da:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024dc:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 80024e0:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80024e4:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e8:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 80024ea:	bf54      	ite	pl
 80024ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024ee:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 80024f2:	f8ce 400c 	str.w	r4, [lr, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f6:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024fa:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 80024fc:	bf54      	ite	pl
 80024fe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002500:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8002504:	f8ce 4004 	str.w	r4, [lr, #4]

        temp = EXTI->IMR1;
 8002508:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800250c:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 800250e:	bf54      	ite	pl
 8002510:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002512:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8002516:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 800251c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	fa33 f402 	lsrs.w	r4, r3, r2
 8002522:	f000 80f7 	beq.w	8002714 <HAL_GPIO_Init+0x2d4>
    if (iocurrent != 0x00u)
 8002526:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002528:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 800252c:	ea1c 0a03 	ands.w	sl, ip, r3
 8002530:	d0f3      	beq.n	800251a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002532:	684d      	ldr	r5, [r1, #4]
 8002534:	f005 0703 	and.w	r7, r5, #3
 8002538:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253a:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800253c:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002540:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002544:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002548:	ea6f 0606 	mvn.w	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800254c:	d88b      	bhi.n	8002466 <HAL_GPIO_Init+0x26>
        temp = GPIOx->OSPEEDR;
 800254e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002552:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002554:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002558:	fa03 f804 	lsl.w	r8, r3, r4
 800255c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002560:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002564:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002568:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256a:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256e:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8002572:	fa0c fc02 	lsl.w	ip, ip, r2
 8002576:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 800257a:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 800257e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002582:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002586:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258a:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258e:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 8002590:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	f47f af6a 	bne.w	800246c <HAL_GPIO_Init+0x2c>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002598:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 800259a:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259e:	f002 0c07 	and.w	ip, r2, #7
 80025a2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80025a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025aa:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3u];
 80025ae:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b2:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b4:	230f      	movs	r3, #15
 80025b6:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ba:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025bc:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c0:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3u] = temp;
 80025c4:	f8c8 c020 	str.w	ip, [r8, #32]
 80025c8:	e750      	b.n	800246c <HAL_GPIO_Init+0x2c>
        temp = GPIOx->OSPEEDR;
 80025ca:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025ce:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025d0:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d4:	fa06 f807 	lsl.w	r8, r6, r7
 80025d8:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80025dc:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80025e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025e4:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80025ec:	fa0e fe02 	lsl.w	lr, lr, r2
 80025f0:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80025f4:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80025f8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fc:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025fe:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002602:	fa06 fe07 	lsl.w	lr, r6, r7
 8002606:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800260c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	d119      	bne.n	8002646 <HAL_GPIO_Init+0x206>
        temp = GPIOx->AFR[position >> 3u];
 8002612:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002616:	690e      	ldr	r6, [r1, #16]
 8002618:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800261c:	f002 0807 	and.w	r8, r2, #7
 8002620:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8002624:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002628:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3u];
 800262c:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002630:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002632:	260f      	movs	r6, #15
 8002634:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002638:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800263a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800263e:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8002642:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002646:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8002648:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800264a:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800264e:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002650:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002654:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002656:	d035      	beq.n	80026c4 <HAL_GPIO_Init+0x284>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002658:	4f3f      	ldr	r7, [pc, #252]	@ (8002758 <HAL_GPIO_Init+0x318>)
 800265a:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 800265c:	f044 0401 	orr.w	r4, r4, #1
 8002660:	663c      	str	r4, [r7, #96]	@ 0x60
 8002662:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8002664:	f004 0401 	and.w	r4, r4, #1
 8002668:	9403      	str	r4, [sp, #12]
 800266a:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800266c:	f022 0403 	bic.w	r4, r2, #3
 8002670:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8002674:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002678:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800267c:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002680:	260f      	movs	r6, #15
 8002682:	00bf      	lsls	r7, r7, #2
 8002684:	fa06 f707 	lsl.w	r7, r6, r7
 8002688:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268c:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 800268e:	4c35      	ldr	r4, [pc, #212]	@ (8002764 <HAL_GPIO_Init+0x324>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002690:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8002692:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8002694:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002698:	d43f      	bmi.n	800271a <HAL_GPIO_Init+0x2da>
        temp &= ~(iocurrent);
 800269a:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 800269c:	4e31      	ldr	r6, [pc, #196]	@ (8002764 <HAL_GPIO_Init+0x324>)
 800269e:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 80026a0:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a2:	02ae      	lsls	r6, r5, #10
 80026a4:	d43f      	bmi.n	8002726 <HAL_GPIO_Init+0x2e6>
        temp &= ~(iocurrent);
 80026a6:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 80026a8:	4e2e      	ldr	r6, [pc, #184]	@ (8002764 <HAL_GPIO_Init+0x324>)
 80026aa:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 80026ac:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ae:	03ae      	lsls	r6, r5, #14
 80026b0:	d436      	bmi.n	8002720 <HAL_GPIO_Init+0x2e0>
        temp &= ~(iocurrent);
 80026b2:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 80026b4:	4e2b      	ldr	r6, [pc, #172]	@ (8002764 <HAL_GPIO_Init+0x324>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026b6:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 80026b8:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 80026ba:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026bc:	d436      	bmi.n	800272c <HAL_GPIO_Init+0x2ec>
        temp &= ~(iocurrent);
 80026be:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 80026c0:	4d28      	ldr	r5, [pc, #160]	@ (8002764 <HAL_GPIO_Init+0x324>)
 80026c2:	602c      	str	r4, [r5, #0]
    position++;
 80026c4:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c6:	fa33 f402 	lsrs.w	r4, r3, r2
 80026ca:	d023      	beq.n	8002714 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026cc:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 80026d0:	ea13 0c0e 	ands.w	ip, r3, lr
 80026d4:	d0f6      	beq.n	80026c4 <HAL_GPIO_Init+0x284>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d6:	684d      	ldr	r5, [r1, #4]
 80026d8:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026da:	2603      	movs	r6, #3
 80026dc:	fa06 f807 	lsl.w	r8, r6, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026e4:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e8:	f104 38ff 	add.w	r8, r4, #4294967295
 80026ec:	f1b8 0f01 	cmp.w	r8, #1
 80026f0:	f67f af6b 	bls.w	80025ca <HAL_GPIO_Init+0x18a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f4:	2c03      	cmp	r4, #3
 80026f6:	d0a6      	beq.n	8002646 <HAL_GPIO_Init+0x206>
        temp = GPIOx->PUPDR;
 80026f8:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026fc:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 80026fe:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002702:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002706:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270a:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 800270e:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	e798      	b.n	8002646 <HAL_GPIO_Init+0x206>
  }
}
 8002714:	b005      	add	sp, #20
 8002716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          temp |= iocurrent;
 800271a:	ea44 040c 	orr.w	r4, r4, ip
 800271e:	e7bd      	b.n	800269c <HAL_GPIO_Init+0x25c>
          temp |= iocurrent;
 8002720:	ea4c 0404 	orr.w	r4, ip, r4
 8002724:	e7c6      	b.n	80026b4 <HAL_GPIO_Init+0x274>
          temp |= iocurrent;
 8002726:	ea44 040c 	orr.w	r4, r4, ip
 800272a:	e7bd      	b.n	80026a8 <HAL_GPIO_Init+0x268>
          temp |= iocurrent;
 800272c:	ea4c 0404 	orr.w	r4, ip, r4
 8002730:	e7c6      	b.n	80026c0 <HAL_GPIO_Init+0x280>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002732:	f04f 0c01 	mov.w	ip, #1
 8002736:	fa0c f707 	lsl.w	r7, ip, r7
 800273a:	433e      	orrs	r6, r7
 800273c:	e6c6      	b.n	80024cc <HAL_GPIO_Init+0x8c>
 800273e:	4770      	bx	lr
        temp = GPIOx->PUPDR;
 8002740:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002746:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274a:	fa03 fc04 	lsl.w	ip, r3, r4
 800274e:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8002752:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002756:	e689      	b.n	800246c <HAL_GPIO_Init+0x2c>
 8002758:	40021000 	.word	0x40021000
 800275c:	48000400 	.word	0x48000400
 8002760:	48000800 	.word	0x48000800
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002768:	6903      	ldr	r3, [r0, #16]
 800276a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800276c:	bf14      	ite	ne
 800276e:	2001      	movne	r0, #1
 8002770:	2000      	moveq	r0, #0
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002774:	b10a      	cbz	r2, 800277a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002776:	6181      	str	r1, [r0, #24]
 8002778:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002780:	4a02      	ldr	r2, [pc, #8]	@ (800278c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002782:	6813      	ldr	r3, [r2, #0]
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	4770      	bx	lr
 800278c:	40007000 	.word	0x40007000

08002790 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002790:	4b02      	ldr	r3, [pc, #8]	@ (800279c <HAL_PWREx_GetVoltageRange+0xc>)
 8002792:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002794:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000

080027a0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80027a4:	d00e      	beq.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002814 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b2:	d005      	beq.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027c0:	2000      	movs	r0, #0
 80027c2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c4:	4913      	ldr	r1, [pc, #76]	@ (8002814 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80027c6:	680b      	ldr	r3, [r1, #0]
 80027c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d0:	d0f6      	beq.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d2:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027d4:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027de:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027e0:	6813      	ldr	r3, [r2, #0]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027e4:	2032      	movs	r0, #50	@ 0x32
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ea:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f2:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027f4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f8:	d506      	bpl.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x68>
 80027fa:	e000      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x5e>
 80027fc:	b123      	cbz	r3, 8002808 <HAL_PWREx_ControlVoltageScaling+0x68>
 80027fe:	694a      	ldr	r2, [r1, #20]
 8002800:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002802:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002806:	d4f9      	bmi.n	80027fc <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002808:	4b02      	ldr	r3, [pc, #8]	@ (8002814 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	055b      	lsls	r3, r3, #21
 800280e:	d5d7      	bpl.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002810:	2003      	movs	r0, #3
}
 8002812:	4770      	bx	lr
 8002814:	40007000 	.word	0x40007000
 8002818:	20000004 	.word	0x20000004
 800281c:	431bde83 	.word	0x431bde83

08002820 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002820:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002822:	4d20      	ldr	r5, [pc, #128]	@ (80028a4 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002824:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002826:	00db      	lsls	r3, r3, #3
{
 8002828:	b083      	sub	sp, #12
 800282a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800282c:	d51a      	bpl.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800282e:	f7ff ffaf 	bl	8002790 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002832:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002836:	d027      	beq.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002838:	2c80      	cmp	r4, #128	@ 0x80
 800283a:	d82c      	bhi.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800283c:	d02f      	beq.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800283e:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8002842:	fab4 f484 	clz	r4, r4
 8002846:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002848:	4917      	ldr	r1, [pc, #92]	@ (80028a8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800284a:	680b      	ldr	r3, [r1, #0]
 800284c:	f023 0307 	bic.w	r3, r3, #7
 8002850:	4323      	orrs	r3, r4
 8002852:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002854:	6808      	ldr	r0, [r1, #0]
 8002856:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800285a:	1b00      	subs	r0, r0, r4
 800285c:	bf18      	it	ne
 800285e:	2001      	movne	r0, #1
 8002860:	b003      	add	sp, #12
 8002862:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800286c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002876:	f7ff ff8b 	bl	8002790 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002884:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002886:	d1d7      	bne.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002888:	2c80      	cmp	r4, #128	@ 0x80
 800288a:	d906      	bls.n	800289a <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 800288c:	2ca0      	cmp	r4, #160	@ 0xa0
 800288e:	bf8c      	ite	hi
 8002890:	2402      	movhi	r4, #2
 8002892:	2401      	movls	r4, #1
 8002894:	e7d8      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002896:	2403      	movs	r4, #3
 8002898:	e7d6      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800289a:	2400      	movs	r4, #0
 800289c:	e7d4      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800289e:	2402      	movs	r4, #2
 80028a0:	e7d2      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40022000 	.word	0x40022000

080028ac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ac:	4a23      	ldr	r2, [pc, #140]	@ (800293c <HAL_RCC_GetSysClockFreq+0x90>)
 80028ae:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028b2:	f013 030c 	ands.w	r3, r3, #12
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x1e>
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d036      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d032      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x7a>
    sysclockfreq = HSE_VALUE;
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	481f      	ldr	r0, [pc, #124]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c4:	bf18      	it	ne
 80028c6:	2000      	movne	r0, #0
 80028c8:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ca:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <HAL_RCC_GetSysClockFreq+0x90>)
 80028cc:	6811      	ldr	r1, [r2, #0]
 80028ce:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028d0:	bf54      	ite	pl
 80028d2:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028d6:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80028d8:	491a      	ldr	r1, [pc, #104]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028da:	bf54      	ite	pl
 80028dc:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028e0:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80028e4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e8:	b1f3      	cbz	r3, 8002928 <HAL_RCC_GetSysClockFreq+0x7c>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <HAL_RCC_GetSysClockFreq+0x90>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d01f      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x8a>
 80028f6:	4a12      	ldr	r2, [pc, #72]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	bf08      	it	eq
 80028fc:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <HAL_RCC_GetSysClockFreq+0x90>)
 8002900:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002902:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800290a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800290e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002912:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002914:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002918:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800291c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002920:	fbb2 f0f3 	udiv	r0, r2, r3
 8002924:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002926:	4808      	ldr	r0, [pc, #32]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 8002928:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800292e:	2a01      	cmp	r2, #1
 8002930:	d0cb      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x1e>
 8002932:	2000      	movs	r0, #0
 8002934:	e7d9      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x3e>
      pllvco = HSI_VALUE;
 8002936:	4804      	ldr	r0, [pc, #16]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002938:	e7e1      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x52>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	007a1200 	.word	0x007a1200
 8002944:	08005dc0 	.word	0x08005dc0
 8002948:	00f42400 	.word	0x00f42400

0800294c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800294c:	2800      	cmp	r0, #0
 800294e:	f000 8309 	beq.w	8002f64 <HAL_RCC_OscConfig+0x618>
{
 8002952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4a8d      	ldr	r2, [pc, #564]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002958:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800295e:	06d9      	lsls	r1, r3, #27
{
 8002960:	b083      	sub	sp, #12
 8002962:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002968:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800296c:	461a      	mov	r2, r3
 800296e:	d52f      	bpl.n	80029d0 <HAL_RCC_OscConfig+0x84>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002970:	2d00      	cmp	r5, #0
 8002972:	f000 8114 	beq.w	8002b9e <HAL_RCC_OscConfig+0x252>
 8002976:	2d0c      	cmp	r5, #12
 8002978:	f000 810e 	beq.w	8002b98 <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800297c:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800297e:	4f83      	ldr	r7, [pc, #524]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 81a8 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_MSI_ENABLE();
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800298e:	f7fe fe09 	bl	80015a4 <HAL_GetTick>
 8002992:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002994:	e006      	b.n	80029a4 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002996:	f7fe fe05 	bl	80015a4 <HAL_GetTick>
 800299a:	eba0 0008 	sub.w	r0, r0, r8
 800299e:	2802      	cmp	r0, #2
 80029a0:	f200 8195 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	079a      	lsls	r2, r3, #30
 80029a8:	d5f5      	bpl.n	8002996 <HAL_RCC_OscConfig+0x4a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6a22      	ldr	r2, [r4, #32]
 80029b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ba:	4313      	orrs	r3, r2
 80029bc:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69e2      	ldr	r2, [r4, #28]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80029ca:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	07df      	lsls	r7, r3, #31
 80029d2:	d529      	bpl.n	8002a28 <HAL_RCC_OscConfig+0xdc>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029d4:	2d08      	cmp	r5, #8
 80029d6:	f000 814c 	beq.w	8002c72 <HAL_RCC_OscConfig+0x326>
 80029da:	2d0c      	cmp	r5, #12
 80029dc:	f000 8146 	beq.w	8002c6c <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e0:	6863      	ldr	r3, [r4, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e6:	f000 818a 	beq.w	8002cfe <HAL_RCC_OscConfig+0x3b2>
 80029ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ee:	f000 8208 	beq.w	8002e02 <HAL_RCC_OscConfig+0x4b6>
 80029f2:	4f66      	ldr	r7, [pc, #408]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029fa:	603a      	str	r2, [r7, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a02:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 817f 	bne.w	8002d08 <HAL_RCC_OscConfig+0x3bc>
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fdcb 	bl	80015a4 <HAL_GetTick>
 8002a0e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a10:	e006      	b.n	8002a20 <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a12:	f7fe fdc7 	bl	80015a4 <HAL_GetTick>
 8002a16:	eba0 0008 	sub.w	r0, r0, r8
 8002a1a:	2864      	cmp	r0, #100	@ 0x64
 8002a1c:	f200 8157 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	0398      	lsls	r0, r3, #14
 8002a24:	d4f5      	bmi.n	8002a12 <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	0791      	lsls	r1, r2, #30
 8002a2a:	d513      	bpl.n	8002a54 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a2c:	2d04      	cmp	r5, #4
 8002a2e:	f040 80f8 	bne.w	8002c22 <HAL_RCC_OscConfig+0x2d6>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a32:	4b56      	ldr	r3, [pc, #344]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	055a      	lsls	r2, r3, #21
 8002a38:	d503      	bpl.n	8002a42 <HAL_RCC_OscConfig+0xf6>
 8002a3a:	68e3      	ldr	r3, [r4, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8113 	beq.w	8002c68 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4a52      	ldr	r2, [pc, #328]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a44:	6921      	ldr	r1, [r4, #16]
 8002a46:	6853      	ldr	r3, [r2, #4]
 8002a48:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002a4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002a50:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	0711      	lsls	r1, r2, #28
 8002a56:	d519      	bpl.n	8002a8c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a58:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4e4c      	ldr	r6, [pc, #304]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8111 	beq.w	8002c84 <HAL_RCC_OscConfig+0x338>
      __HAL_RCC_LSI_ENABLE();
 8002a62:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fd99 	bl	80015a4 <HAL_GetTick>
 8002a72:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a74:	e005      	b.n	8002a82 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a76:	f7fe fd95 	bl	80015a4 <HAL_GetTick>
 8002a7a:	1bc0      	subs	r0, r0, r7
 8002a7c:	2802      	cmp	r0, #2
 8002a7e:	f200 8126 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a82:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002a86:	079a      	lsls	r2, r3, #30
 8002a88:	d5f5      	bpl.n	8002a76 <HAL_RCC_OscConfig+0x12a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	0757      	lsls	r7, r2, #29
 8002a8e:	d53f      	bpl.n	8002b10 <HAL_RCC_OscConfig+0x1c4>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a90:	4b3e      	ldr	r3, [pc, #248]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002a92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a94:	00d6      	lsls	r6, r2, #3
 8002a96:	f100 8147 	bmi.w	8002d28 <HAL_RCC_OscConfig+0x3dc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a9c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002aa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002aac:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4f38      	ldr	r7, [pc, #224]	@ (8002b90 <HAL_RCC_OscConfig+0x244>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	05d8      	lsls	r0, r3, #23
 8002ab4:	f140 80fa 	bpl.w	8002cac <HAL_RCC_OscConfig+0x360>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	68a3      	ldr	r3, [r4, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	f000 8148 	beq.w	8002d50 <HAL_RCC_OscConfig+0x404>
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	f000 81ab 	beq.w	8002e1c <HAL_RCC_OscConfig+0x4d0>
 8002ac6:	4f31      	ldr	r7, [pc, #196]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002ad4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002ad8:	f022 0204 	bic.w	r2, r2, #4
 8002adc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 813c 	bne.w	8002d5e <HAL_RCC_OscConfig+0x412>
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fd5d 	bl	80015a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002aee:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af0:	e006      	b.n	8002b00 <HAL_RCC_OscConfig+0x1b4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fd57 	bl	80015a4 <HAL_GetTick>
 8002af6:	eba0 0008 	sub.w	r0, r0, r8
 8002afa:	4548      	cmp	r0, r9
 8002afc:	f200 80e7 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b04:	079b      	lsls	r3, r3, #30
 8002b06:	d4f4      	bmi.n	8002af2 <HAL_RCC_OscConfig+0x1a6>
    if(pwrclkchanged == SET)
 8002b08:	2e00      	cmp	r6, #0
 8002b0a:	f040 816e 	bne.w	8002dea <HAL_RCC_OscConfig+0x49e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	0690      	lsls	r0, r2, #26
 8002b12:	d518      	bpl.n	8002b46 <HAL_RCC_OscConfig+0x1fa>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8002b16:	4e1d      	ldr	r6, [pc, #116]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8151 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x474>
      __HAL_RCC_HSI48_ENABLE();
 8002b1e:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fd3b 	bl	80015a4 <HAL_GetTick>
 8002b2e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b30:	e005      	b.n	8002b3e <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b32:	f7fe fd37 	bl	80015a4 <HAL_GetTick>
 8002b36:	1bc0      	subs	r0, r0, r7
 8002b38:	2802      	cmp	r0, #2
 8002b3a:	f200 80c8 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b3e:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002b42:	0799      	lsls	r1, r3, #30
 8002b44:	d5f5      	bpl.n	8002b32 <HAL_RCC_OscConfig+0x1e6>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b48:	b1db      	cbz	r3, 8002b82 <HAL_RCC_OscConfig+0x236>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f000 817c 	beq.w	8002e48 <HAL_RCC_OscConfig+0x4fc>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b50:	2d0c      	cmp	r5, #12
 8002b52:	f000 8089 	beq.w	8002c68 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4c0d      	ldr	r4, [pc, #52]	@ (8002b8c <HAL_RCC_OscConfig+0x240>)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b60:	f7fe fd20 	bl	80015a4 <HAL_GetTick>
 8002b64:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	e005      	b.n	8002b74 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fd1c 	bl	80015a4 <HAL_GetTick>
 8002b6c:	1b40      	subs	r0, r0, r5
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	f200 80ad 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	019b      	lsls	r3, r3, #6
 8002b78:	d4f6      	bmi.n	8002b68 <HAL_RCC_OscConfig+0x21c>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b7a:	68e2      	ldr	r2, [r4, #12]
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_OscConfig+0x248>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8002b82:	2000      	movs	r0, #0
}
 8002b84:	b003      	add	sp, #12
 8002b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40007000 	.word	0x40007000
 8002b94:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b98:	2e01      	cmp	r6, #1
 8002b9a:	f47f aeef 	bne.w	800297c <HAL_RCC_OscConfig+0x30>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9e:	4ba6      	ldr	r3, [pc, #664]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	079b      	lsls	r3, r3, #30
 8002ba4:	d45d      	bmi.n	8002c62 <HAL_RCC_OscConfig+0x316>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ba6:	4ba4      	ldr	r3, [pc, #656]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002ba8:	6a20      	ldr	r0, [r4, #32]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	0717      	lsls	r7, r2, #28
 8002bae:	bf56      	itet	pl
 8002bb0:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8002bb4:	681b      	ldrmi	r3, [r3, #0]
 8002bb6:	091b      	lsrpl	r3, r3, #4
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bbc:	4298      	cmp	r0, r3
 8002bbe:	f200 80e3 	bhi.w	8002d88 <HAL_RCC_OscConfig+0x43c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bc2:	4b9d      	ldr	r3, [pc, #628]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	69e1      	ldr	r1, [r4, #28]
 8002bda:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002bde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002be2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be4:	2d00      	cmp	r5, #0
 8002be6:	f000 8106 	beq.w	8002df6 <HAL_RCC_OscConfig+0x4aa>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bea:	f7ff fe5f 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002bee:	4b92      	ldr	r3, [pc, #584]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002bf0:	4a92      	ldr	r2, [pc, #584]	@ (8002e3c <HAL_RCC_OscConfig+0x4f0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8002bfa:	4a91      	ldr	r2, [pc, #580]	@ (8002e40 <HAL_RCC_OscConfig+0x4f4>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002c04:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c06:	4a8f      	ldr	r2, [pc, #572]	@ (8002e44 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002c0a:	f7fe fc89 	bl	8001520 <HAL_InitTick>
        if(status != HAL_OK)
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d1b8      	bne.n	8002b84 <HAL_RCC_OscConfig+0x238>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	07d1      	lsls	r1, r2, #31
 8002c16:	4613      	mov	r3, r2
 8002c18:	f53f aedf 	bmi.w	80029da <HAL_RCC_OscConfig+0x8e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1c:	0791      	lsls	r1, r2, #30
 8002c1e:	f57f af19 	bpl.w	8002a54 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c22:	2d0c      	cmp	r5, #12
 8002c24:	f000 80c8 	beq.w	8002db8 <HAL_RCC_OscConfig+0x46c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c28:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002c2a:	4e83      	ldr	r6, [pc, #524]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d07d      	beq.n	8002d2c <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_ENABLE();
 8002c30:	6833      	ldr	r3, [r6, #0]
 8002c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c36:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c38:	f7fe fcb4 	bl	80015a4 <HAL_GetTick>
 8002c3c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3e:	e004      	b.n	8002c4a <HAL_RCC_OscConfig+0x2fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe fcb0 	bl	80015a4 <HAL_GetTick>
 8002c44:	1bc0      	subs	r0, r0, r7
 8002c46:	2802      	cmp	r0, #2
 8002c48:	d841      	bhi.n	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4a:	6833      	ldr	r3, [r6, #0]
 8002c4c:	055b      	lsls	r3, r3, #21
 8002c4e:	d5f7      	bpl.n	8002c40 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	6873      	ldr	r3, [r6, #4]
 8002c52:	6922      	ldr	r2, [r4, #16]
 8002c54:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002c58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c5c:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	e6f8      	b.n	8002a54 <HAL_RCC_OscConfig+0x108>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c62:	69a3      	ldr	r3, [r4, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d19e      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x25a>
    return HAL_ERROR;
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e78b      	b.n	8002b84 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c6c:	2e03      	cmp	r6, #3
 8002c6e:	f47f aeb7 	bne.w	80029e0 <HAL_RCC_OscConfig+0x94>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4a71      	ldr	r2, [pc, #452]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	0390      	lsls	r0, r2, #14
 8002c78:	d502      	bpl.n	8002c80 <HAL_RCC_OscConfig+0x334>
 8002c7a:	6862      	ldr	r2, [r4, #4]
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d0f3      	beq.n	8002c68 <HAL_RCC_OscConfig+0x31c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c80:	461a      	mov	r2, r3
 8002c82:	e7cb      	b.n	8002c1c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 8002c84:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002c90:	f7fe fc88 	bl	80015a4 <HAL_GetTick>
 8002c94:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c96:	e004      	b.n	8002ca2 <HAL_RCC_OscConfig+0x356>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fe fc84 	bl	80015a4 <HAL_GetTick>
 8002c9c:	1bc0      	subs	r0, r0, r7
 8002c9e:	2802      	cmp	r0, #2
 8002ca0:	d815      	bhi.n	8002cce <HAL_RCC_OscConfig+0x382>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca2:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002ca6:	079b      	lsls	r3, r3, #30
 8002ca8:	d4f6      	bmi.n	8002c98 <HAL_RCC_OscConfig+0x34c>
 8002caa:	e6ee      	b.n	8002a8a <HAL_RCC_OscConfig+0x13e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fc76 	bl	80015a4 <HAL_GetTick>
 8002cb8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	05d9      	lsls	r1, r3, #23
 8002cbe:	f53f aefb 	bmi.w	8002ab8 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe fc6f 	bl	80015a4 <HAL_GetTick>
 8002cc6:	eba0 0008 	sub.w	r0, r0, r8
 8002cca:	2802      	cmp	r0, #2
 8002ccc:	d9f5      	bls.n	8002cba <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 8002cce:	2003      	movs	r0, #3
}
 8002cd0:	b003      	add	sp, #12
 8002cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_MSI_DISABLE();
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002cde:	f7fe fc61 	bl	80015a4 <HAL_GetTick>
 8002ce2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fc5d 	bl	80015a4 <HAL_GetTick>
 8002cea:	eba0 0008 	sub.w	r0, r0, r8
 8002cee:	2802      	cmp	r0, #2
 8002cf0:	d8ed      	bhi.n	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	079b      	lsls	r3, r3, #30
 8002cf6:	d4f6      	bmi.n	8002ce6 <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e668      	b.n	80029d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002d00:	6813      	ldr	r3, [r2, #0]
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d08:	f7fe fc4c 	bl	80015a4 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0c:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8002e38 <HAL_RCC_OscConfig+0x4ec>
        tickstart = HAL_GetTick();
 8002d10:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	e004      	b.n	8002d1e <HAL_RCC_OscConfig+0x3d2>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fc46 	bl	80015a4 <HAL_GetTick>
 8002d18:	1bc0      	subs	r0, r0, r7
 8002d1a:	2864      	cmp	r0, #100	@ 0x64
 8002d1c:	d8d7      	bhi.n	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d22:	039b      	lsls	r3, r3, #14
 8002d24:	d5f6      	bpl.n	8002d14 <HAL_RCC_OscConfig+0x3c8>
 8002d26:	e67e      	b.n	8002a26 <HAL_RCC_OscConfig+0xda>
    FlagStatus       pwrclkchanged = RESET;
 8002d28:	2600      	movs	r6, #0
 8002d2a:	e6c0      	b.n	8002aae <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002d2c:	6833      	ldr	r3, [r6, #0]
 8002d2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d32:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d34:	f7fe fc36 	bl	80015a4 <HAL_GetTick>
 8002d38:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_OscConfig+0x3fa>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe fc32 	bl	80015a4 <HAL_GetTick>
 8002d40:	1bc0      	subs	r0, r0, r7
 8002d42:	2802      	cmp	r0, #2
 8002d44:	d8c3      	bhi.n	8002cce <HAL_RCC_OscConfig+0x382>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d46:	6833      	ldr	r3, [r6, #0]
 8002d48:	0558      	lsls	r0, r3, #21
 8002d4a:	d4f7      	bmi.n	8002d3c <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	e681      	b.n	8002a54 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	4a39      	ldr	r2, [pc, #228]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002d52:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fc21 	bl	80015a4 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e38 <HAL_RCC_OscConfig+0x4ec>
      tickstart = HAL_GetTick();
 8002d66:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6c:	e004      	b.n	8002d78 <HAL_RCC_OscConfig+0x42c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fc19 	bl	80015a4 <HAL_GetTick>
 8002d72:	1bc0      	subs	r0, r0, r7
 8002d74:	4548      	cmp	r0, r9
 8002d76:	d8aa      	bhi.n	8002cce <HAL_RCC_OscConfig+0x382>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d78:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8002d7c:	079a      	lsls	r2, r3, #30
 8002d7e:	d5f6      	bpl.n	8002d6e <HAL_RCC_OscConfig+0x422>
    if(pwrclkchanged == SET)
 8002d80:	2e00      	cmp	r6, #0
 8002d82:	f43f aec4 	beq.w	8002b0e <HAL_RCC_OscConfig+0x1c2>
 8002d86:	e030      	b.n	8002dea <HAL_RCC_OscConfig+0x49e>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d88:	f7ff fd4a 	bl	8002820 <RCC_SetFlashLatencyFromMSIRange>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	f47f af6b 	bne.w	8002c68 <HAL_RCC_OscConfig+0x31c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d92:	4b29      	ldr	r3, [pc, #164]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	6a21      	ldr	r1, [r4, #32]
 8002da0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	69e1      	ldr	r1, [r4, #28]
 8002dac:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002db0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e718      	b.n	8002bea <HAL_RCC_OscConfig+0x29e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db8:	2e02      	cmp	r6, #2
 8002dba:	f47f af35 	bne.w	8002c28 <HAL_RCC_OscConfig+0x2dc>
 8002dbe:	e638      	b.n	8002a32 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSI48_DISABLE();
 8002dc0:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fbea 	bl	80015a4 <HAL_GetTick>
 8002dd0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd2:	e005      	b.n	8002de0 <HAL_RCC_OscConfig+0x494>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd4:	f7fe fbe6 	bl	80015a4 <HAL_GetTick>
 8002dd8:	1bc0      	subs	r0, r0, r7
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	f63f af77 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de0:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002de4:	079a      	lsls	r2, r3, #30
 8002de6:	d4f5      	bmi.n	8002dd4 <HAL_RCC_OscConfig+0x488>
 8002de8:	e6ad      	b.n	8002b46 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dea:	4a13      	ldr	r2, [pc, #76]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002dec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df4:	e68b      	b.n	8002b0e <HAL_RCC_OscConfig+0x1c2>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df6:	f7ff fd13 	bl	8002820 <RCC_SetFlashLatencyFromMSIRange>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	f43f aef5 	beq.w	8002bea <HAL_RCC_OscConfig+0x29e>
 8002e00:	e732      	b.n	8002c68 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e06:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e18:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e1a:	e775      	b.n	8002d08 <HAL_RCC_OscConfig+0x3bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_RCC_OscConfig+0x4ec>)
 8002e1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002e22:	f042 0204 	orr.w	r2, r2, #4
 8002e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002e2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	e792      	b.n	8002d5e <HAL_RCC_OscConfig+0x412>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08005df8 	.word	0x08005df8
 8002e40:	2000000c 	.word	0x2000000c
 8002e44:	20000004 	.word	0x20000004
      pll_config = RCC->PLLCFGR;
 8002e48:	4e47      	ldr	r6, [pc, #284]	@ (8002f68 <HAL_RCC_OscConfig+0x61c>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8002e4c:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	f003 0103 	and.w	r1, r3, #3
 8002e52:	4291      	cmp	r1, r2
 8002e54:	d049      	beq.n	8002eea <HAL_RCC_OscConfig+0x59e>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e56:	2d0c      	cmp	r5, #12
 8002e58:	f43f af06 	beq.w	8002c68 <HAL_RCC_OscConfig+0x31c>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e5c:	4d42      	ldr	r5, [pc, #264]	@ (8002f68 <HAL_RCC_OscConfig+0x61c>)
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	015b      	lsls	r3, r3, #5
 8002e62:	f53f af01 	bmi.w	8002c68 <HAL_RCC_OscConfig+0x31c>
            __HAL_RCC_PLL_DISABLE();
 8002e66:	682b      	ldr	r3, [r5, #0]
 8002e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002e6e:	f7fe fb99 	bl	80015a4 <HAL_GetTick>
 8002e72:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	e005      	b.n	8002e82 <HAL_RCC_OscConfig+0x536>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fb95 	bl	80015a4 <HAL_GetTick>
 8002e7a:	1b80      	subs	r0, r0, r6
 8002e7c:	2802      	cmp	r0, #2
 8002e7e:	f63f af26 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	019f      	lsls	r7, r3, #6
 8002e86:	d4f6      	bmi.n	8002e76 <HAL_RCC_OscConfig+0x52a>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e88:	68e9      	ldr	r1, [r5, #12]
 8002e8a:	4b38      	ldr	r3, [pc, #224]	@ (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002e8e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002e90:	400b      	ands	r3, r1
 8002e92:	4313      	orrs	r3, r2
 8002e94:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8002e98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e9c:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002ea0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8002ea4:	3801      	subs	r0, #1
 8002ea6:	0849      	lsrs	r1, r1, #1
 8002ea8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002eac:	3901      	subs	r1, #1
 8002eae:	0852      	lsrs	r2, r2, #1
 8002eb0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002eba:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec4:	68eb      	ldr	r3, [r5, #12]
 8002ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eca:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002ecc:	f7fe fb6a 	bl	80015a4 <HAL_GetTick>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	4d25      	ldr	r5, [pc, #148]	@ (8002f68 <HAL_RCC_OscConfig+0x61c>)
            tickstart = HAL_GetTick();
 8002ed2:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	e005      	b.n	8002ee2 <HAL_RCC_OscConfig+0x596>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fb65 	bl	80015a4 <HAL_GetTick>
 8002eda:	1b00      	subs	r0, r0, r4
 8002edc:	2802      	cmp	r0, #2
 8002ede:	f63f aef6 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	682b      	ldr	r3, [r5, #0]
 8002ee4:	0198      	lsls	r0, r3, #6
 8002ee6:	d5f6      	bpl.n	8002ed6 <HAL_RCC_OscConfig+0x58a>
 8002ee8:	e64b      	b.n	8002b82 <HAL_RCC_OscConfig+0x236>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002eec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ef0:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002ef6:	d1ae      	bne.n	8002e56 <HAL_RCC_OscConfig+0x50a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002efa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efe:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002f02:	d1a8      	bne.n	8002e56 <HAL_RCC_OscConfig+0x50a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002f06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002f0e:	d1a2      	bne.n	8002e56 <HAL_RCC_OscConfig+0x50a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f12:	0852      	lsrs	r2, r2, #1
 8002f14:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002f18:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f1a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002f1e:	d19a      	bne.n	8002e56 <HAL_RCC_OscConfig+0x50a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f20:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002f28:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002f2e:	d192      	bne.n	8002e56 <HAL_RCC_OscConfig+0x50a>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f30:	6833      	ldr	r3, [r6, #0]
 8002f32:	0199      	lsls	r1, r3, #6
 8002f34:	f53f ae25 	bmi.w	8002b82 <HAL_RCC_OscConfig+0x236>
          __HAL_RCC_PLL_ENABLE();
 8002f38:	6833      	ldr	r3, [r6, #0]
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f40:	68f3      	ldr	r3, [r6, #12]
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f46:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8002f48:	f7fe fb2c 	bl	80015a4 <HAL_GetTick>
 8002f4c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	e005      	b.n	8002f5c <HAL_RCC_OscConfig+0x610>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fb28 	bl	80015a4 <HAL_GetTick>
 8002f54:	1b03      	subs	r3, r0, r4
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	f63f aeb9 	bhi.w	8002cce <HAL_RCC_OscConfig+0x382>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5c:	6833      	ldr	r3, [r6, #0]
 8002f5e:	019a      	lsls	r2, r3, #6
 8002f60:	d5f6      	bpl.n	8002f50 <HAL_RCC_OscConfig+0x604>
 8002f62:	e60e      	b.n	8002b82 <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 8002f64:	2001      	movs	r0, #1
}
 8002f66:	4770      	bx	lr
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	019d808c 	.word	0x019d808c

08002f70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f000 80a0 	beq.w	80030b6 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f76:	4a54      	ldr	r2, [pc, #336]	@ (80030c8 <HAL_RCC_ClockConfig+0x158>)
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	428b      	cmp	r3, r1
{
 8002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f84:	460d      	mov	r5, r1
 8002f86:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	d20c      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	6813      	ldr	r3, [r2, #0]
 8002f8c:	f023 0307 	bic.w	r3, r3, #7
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f94:	6813      	ldr	r3, [r2, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	428b      	cmp	r3, r1
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
}
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa8:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	d570      	bpl.n	8003090 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fae:	4e47      	ldr	r6, [pc, #284]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
 8002fb0:	68a0      	ldr	r0, [r4, #8]
 8002fb2:	68b1      	ldr	r1, [r6, #8]
 8002fb4:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8002fb8:	4288      	cmp	r0, r1
 8002fba:	d904      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	68b1      	ldr	r1, [r6, #8]
 8002fbe:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	b332      	cbz	r2, 8003016 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fcc:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fce:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd0:	d065      	beq.n	800309e <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	2a02      	cmp	r2, #2
 8002fd4:	d06c      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	d171      	bne.n	80030be <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fda:	079e      	lsls	r6, r3, #30
 8002fdc:	d5df      	bpl.n	8002f9e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fde:	4e3b      	ldr	r6, [pc, #236]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
 8002fe0:	68b3      	ldr	r3, [r6, #8]
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fea:	f7fe fadb 	bl	80015a4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fee:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002ff2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	e004      	b.n	8003000 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f7fe fad5 	bl	80015a4 <HAL_GetTick>
 8002ffa:	1bc0      	subs	r0, r0, r7
 8002ffc:	4540      	cmp	r0, r8
 8002ffe:	d85c      	bhi.n	80030ba <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003000:	68b3      	ldr	r3, [r6, #8]
 8003002:	6862      	ldr	r2, [r4, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800300c:	d1f3      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	0799      	lsls	r1, r3, #30
 8003012:	d506      	bpl.n	8003022 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003014:	68a0      	ldr	r0, [r4, #8]
 8003016:	492d      	ldr	r1, [pc, #180]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
 8003018:	688a      	ldr	r2, [r1, #8]
 800301a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800301e:	4282      	cmp	r2, r0
 8003020:	d840      	bhi.n	80030a4 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003022:	4929      	ldr	r1, [pc, #164]	@ (80030c8 <HAL_RCC_ClockConfig+0x158>)
 8003024:	680a      	ldr	r2, [r1, #0]
 8003026:	f002 0207 	and.w	r2, r2, #7
 800302a:	42aa      	cmp	r2, r5
 800302c:	d909      	bls.n	8003042 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	680a      	ldr	r2, [r1, #0]
 8003030:	f022 0207 	bic.w	r2, r2, #7
 8003034:	432a      	orrs	r2, r5
 8003036:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003038:	680a      	ldr	r2, [r1, #0]
 800303a:	f002 0207 	and.w	r2, r2, #7
 800303e:	42aa      	cmp	r2, r5
 8003040:	d1ad      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003042:	075a      	lsls	r2, r3, #29
 8003044:	d506      	bpl.n	8003054 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003046:	4921      	ldr	r1, [pc, #132]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
 8003048:	68e0      	ldr	r0, [r4, #12]
 800304a:	688a      	ldr	r2, [r1, #8]
 800304c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003050:	4302      	orrs	r2, r0
 8003052:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	d507      	bpl.n	8003068 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003058:	4a1c      	ldr	r2, [pc, #112]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
 800305a:	6921      	ldr	r1, [r4, #16]
 800305c:	6893      	ldr	r3, [r2, #8]
 800305e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003062:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003066:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003068:	f7ff fc20 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800306c:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
 800306e:	4c18      	ldr	r4, [pc, #96]	@ (80030d0 <HAL_RCC_ClockConfig+0x160>)
 8003070:	6892      	ldr	r2, [r2, #8]
 8003072:	4918      	ldr	r1, [pc, #96]	@ (80030d4 <HAL_RCC_ClockConfig+0x164>)
 8003074:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003078:	4603      	mov	r3, r0
 800307a:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800307c:	4816      	ldr	r0, [pc, #88]	@ (80030d8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307e:	f002 021f 	and.w	r2, r2, #31
 8003082:	40d3      	lsrs	r3, r2
}
 8003084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003088:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308a:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800308c:	f7fe ba48 	b.w	8001520 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003090:	2a00      	cmp	r2, #0
 8003092:	d0c6      	beq.n	8003022 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309c:	d199      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309e:	019b      	lsls	r3, r3, #6
 80030a0:	d49d      	bmi.n	8002fde <HAL_RCC_ClockConfig+0x6e>
 80030a2:	e77c      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	688a      	ldr	r2, [r1, #8]
 80030a6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80030aa:	4302      	orrs	r2, r0
 80030ac:	608a      	str	r2, [r1, #8]
 80030ae:	e7b8      	b.n	8003022 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b0:	039f      	lsls	r7, r3, #14
 80030b2:	d494      	bmi.n	8002fde <HAL_RCC_ClockConfig+0x6e>
 80030b4:	e773      	b.n	8002f9e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80030b6:	2001      	movs	r0, #1
}
 80030b8:	4770      	bx	lr
        return HAL_TIMEOUT;
 80030ba:	2003      	movs	r0, #3
 80030bc:	e770      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030be:	0558      	lsls	r0, r3, #21
 80030c0:	f57f af6d 	bpl.w	8002f9e <HAL_RCC_ClockConfig+0x2e>
 80030c4:	e78b      	b.n	8002fde <HAL_RCC_ClockConfig+0x6e>
 80030c6:	bf00      	nop
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08005df8 	.word	0x08005df8
 80030d4:	20000004 	.word	0x20000004
 80030d8:	2000000c 	.word	0x2000000c

080030dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80030de:	4a06      	ldr	r2, [pc, #24]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030e0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80030e2:	4906      	ldr	r1, [pc, #24]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80030e8:	6808      	ldr	r0, [r1, #0]
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
}
 80030f0:	40d8      	lsrs	r0, r3
 80030f2:	4770      	bx	lr
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08005df0 	.word	0x08005df0
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003102:	4a06      	ldr	r2, [pc, #24]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003104:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003106:	4906      	ldr	r1, [pc, #24]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003108:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800310c:	6808      	ldr	r0, [r1, #0]
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
}
 8003114:	40d8      	lsrs	r0, r3
 8003116:	4770      	bx	lr
 8003118:	40021000 	.word	0x40021000
 800311c:	08005df0 	.word	0x08005df0
 8003120:	20000004 	.word	0x20000004

08003124 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003124:	4a45      	ldr	r2, [pc, #276]	@ (800323c <RCCEx_PLLSAI1_Config+0x118>)
{
 8003126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003128:	68d6      	ldr	r6, [r2, #12]
{
 800312a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312c:	07b1      	lsls	r1, r6, #30
{
 800312e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003130:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003132:	d006      	beq.n	8003142 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003134:	68d1      	ldr	r1, [r2, #12]
 8003136:	f001 0103 	and.w	r1, r1, #3
 800313a:	4281      	cmp	r1, r0
 800313c:	d04b      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0xb2>
 800313e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003142:	2802      	cmp	r0, #2
 8003144:	d058      	beq.n	80031f8 <RCCEx_PLLSAI1_Config+0xd4>
 8003146:	2803      	cmp	r0, #3
 8003148:	d04f      	beq.n	80031ea <RCCEx_PLLSAI1_Config+0xc6>
 800314a:	2801      	cmp	r0, #1
 800314c:	d1f7      	bne.n	800313e <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	0793      	lsls	r3, r2, #30
 8003152:	d5f5      	bpl.n	8003140 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003154:	4939      	ldr	r1, [pc, #228]	@ (800323c <RCCEx_PLLSAI1_Config+0x118>)
 8003156:	68ca      	ldr	r2, [r1, #12]
 8003158:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800315c:	ea42 0300 	orr.w	r3, r2, r0
 8003160:	6862      	ldr	r2, [r4, #4]
 8003162:	3a01      	subs	r2, #1
 8003164:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003168:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800316a:	4e34      	ldr	r6, [pc, #208]	@ (800323c <RCCEx_PLLSAI1_Config+0x118>)
 800316c:	6833      	ldr	r3, [r6, #0]
 800316e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003172:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003174:	f7fe fa16 	bl	80015a4 <HAL_GetTick>
 8003178:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800317a:	e004      	b.n	8003186 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800317c:	f7fe fa12 	bl	80015a4 <HAL_GetTick>
 8003180:	1bc3      	subs	r3, r0, r7
 8003182:	2b02      	cmp	r3, #2
 8003184:	d83c      	bhi.n	8003200 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003186:	6833      	ldr	r3, [r6, #0]
 8003188:	011a      	lsls	r2, r3, #4
 800318a:	d4f7      	bmi.n	800317c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800318c:	68a3      	ldr	r3, [r4, #8]
 800318e:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003190:	2d00      	cmp	r5, #0
 8003192:	d137      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003194:	6932      	ldr	r2, [r6, #16]
 8003196:	68e3      	ldr	r3, [r4, #12]
 8003198:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 800319c:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 80031a0:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80031a4:	4313      	orrs	r3, r2
 80031a6:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80031a8:	4d24      	ldr	r5, [pc, #144]	@ (800323c <RCCEx_PLLSAI1_Config+0x118>)
 80031aa:	682b      	ldr	r3, [r5, #0]
 80031ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031b0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031b2:	f7fe f9f7 	bl	80015a4 <HAL_GetTick>
 80031b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031b8:	e004      	b.n	80031c4 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ba:	f7fe f9f3 	bl	80015a4 <HAL_GetTick>
 80031be:	1b80      	subs	r0, r0, r6
 80031c0:	2802      	cmp	r0, #2
 80031c2:	d81d      	bhi.n	8003200 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	d5f7      	bpl.n	80031ba <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031ca:	692b      	ldr	r3, [r5, #16]
 80031cc:	69a2      	ldr	r2, [r4, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	2000      	movs	r0, #0
 80031d2:	612b      	str	r3, [r5, #16]
}
 80031d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80031d6:	2900      	cmp	r1, #0
 80031d8:	d0b1      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031da:	68d3      	ldr	r3, [r2, #12]
       ||
 80031dc:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80031e2:	3301      	adds	r3, #1
       ||
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d1aa      	bne.n	800313e <RCCEx_PLLSAI1_Config+0x1a>
 80031e8:	e7bf      	b.n	800316a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ea:	6811      	ldr	r1, [r2, #0]
 80031ec:	038e      	lsls	r6, r1, #14
 80031ee:	d4b1      	bmi.n	8003154 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	0351      	lsls	r1, r2, #13
 80031f4:	d5a3      	bpl.n	800313e <RCCEx_PLLSAI1_Config+0x1a>
 80031f6:	e7ad      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	0557      	lsls	r7, r2, #21
 80031fc:	d59f      	bpl.n	800313e <RCCEx_PLLSAI1_Config+0x1a>
 80031fe:	e7a9      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x30>
 8003200:	2003      	movs	r0, #3
}
 8003202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003204:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003206:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003208:	d00b      	beq.n	8003222 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320a:	6962      	ldr	r2, [r4, #20]
 800320c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003210:	0852      	lsrs	r2, r2, #1
 8003212:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003216:	3a01      	subs	r2, #1
 8003218:	430b      	orrs	r3, r1
 800321a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800321e:	6133      	str	r3, [r6, #16]
 8003220:	e7c2      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003222:	6922      	ldr	r2, [r4, #16]
 8003224:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003228:	0852      	lsrs	r2, r2, #1
 800322a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800322e:	3a01      	subs	r2, #1
 8003230:	430b      	orrs	r3, r1
 8003232:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003236:	6133      	str	r3, [r6, #16]
 8003238:	e7b6      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0x84>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 800324a:	b083      	sub	sp, #12
 800324c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800324e:	d013      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003250:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003252:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003256:	f000 80ec 	beq.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800325a:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800325e:	f000 80ed 	beq.w	800343c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8003262:	2900      	cmp	r1, #0
 8003264:	f040 811d 	bne.w	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003268:	3004      	adds	r0, #4
 800326a:	f7ff ff5b 	bl	8003124 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800326e:	4606      	mov	r6, r0
 8003270:	2800      	cmp	r0, #0
 8003272:	f000 8134 	beq.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	039f      	lsls	r7, r3, #14
 800327a:	d543      	bpl.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800327c:	4b99      	ldr	r3, [pc, #612]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800327e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003280:	00d5      	lsls	r5, r2, #3
 8003282:	f140 80cb 	bpl.w	800341c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8003286:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003288:	4d97      	ldr	r5, [pc, #604]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003290:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003292:	f7fe f987 	bl	80015a4 <HAL_GetTick>
 8003296:	4680      	mov	r8, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003298:	e005      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x66>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fe f983 	bl	80015a4 <HAL_GetTick>
 800329e:	eba0 0308 	sub.w	r3, r0, r8
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d829      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032a6:	682b      	ldr	r3, [r5, #0]
 80032a8:	05d8      	lsls	r0, r3, #23
 80032aa:	d5f6      	bpl.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    if(ret == HAL_OK)
 80032ac:	bb36      	cbnz	r6, 80032fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ae:	4d8d      	ldr	r5, [pc, #564]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80032ba:	f000 80e5 	beq.w	8003488 <HAL_RCCEx_PeriphCLKConfig+0x248>
 80032be:	4293      	cmp	r3, r2
 80032c0:	f000 80e2 	beq.w	8003488 <HAL_RCCEx_PeriphCLKConfig+0x248>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c4:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032dc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032e0:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e4:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80032e6:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032ea:	f140 80cd 	bpl.w	8003488 <HAL_RCCEx_PeriphCLKConfig+0x248>
        tickstart = HAL_GetTick();
 80032ee:	f7fe f959 	bl	80015a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80032f6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f8:	e0c1      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x23e>
        ret = HAL_TIMEOUT;
 80032fa:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fc:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80032fe:	2f00      	cmp	r7, #0
 8003300:	f040 80a6 	bne.w	8003450 <HAL_RCCEx_PeriphCLKConfig+0x210>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003304:	07df      	lsls	r7, r3, #31
 8003306:	d508      	bpl.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xda>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003308:	4976      	ldr	r1, [pc, #472]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800330a:	6a20      	ldr	r0, [r4, #32]
 800330c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003310:	f022 0203 	bic.w	r2, r2, #3
 8003314:	4302      	orrs	r2, r0
 8003316:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331a:	079d      	lsls	r5, r3, #30
 800331c:	d508      	bpl.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800331e:	4971      	ldr	r1, [pc, #452]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003320:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003322:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003326:	f022 020c 	bic.w	r2, r2, #12
 800332a:	4302      	orrs	r2, r0
 800332c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003330:	0698      	lsls	r0, r3, #26
 8003332:	d508      	bpl.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003334:	496b      	ldr	r1, [pc, #428]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003336:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003338:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800333c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003340:	4302      	orrs	r2, r0
 8003342:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003346:	0599      	lsls	r1, r3, #22
 8003348:	d508      	bpl.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334a:	4966      	ldr	r1, [pc, #408]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800334c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800334e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003352:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003356:	4302      	orrs	r2, r0
 8003358:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800335c:	055a      	lsls	r2, r3, #21
 800335e:	d508      	bpl.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x132>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	4960      	ldr	r1, [pc, #384]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003362:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003364:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003368:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800336c:	4302      	orrs	r2, r0
 800336e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003372:	065f      	lsls	r7, r3, #25
 8003374:	d508      	bpl.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x148>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003376:	495b      	ldr	r1, [pc, #364]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003378:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800337a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800337e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003382:	4302      	orrs	r2, r0
 8003384:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003388:	05dd      	lsls	r5, r3, #23
 800338a:	d508      	bpl.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800338c:	4955      	ldr	r1, [pc, #340]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800338e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003390:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003394:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003398:	4302      	orrs	r2, r0
 800339a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800339e:	0498      	lsls	r0, r3, #18
 80033a0:	d50e      	bpl.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a2:	4950      	ldr	r1, [pc, #320]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80033a4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80033a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80033aa:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80033ae:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033b0:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033b8:	d050      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ba:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80033be:	d07b      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033c0:	0359      	lsls	r1, r3, #13
 80033c2:	d50e      	bpl.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c4:	4947      	ldr	r1, [pc, #284]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80033c6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80033c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80033cc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80033d0:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033d2:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033da:	d044      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x226>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033dc:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80033e0:	d074      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033e2:	045a      	lsls	r2, r3, #17
 80033e4:	d50b      	bpl.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e6:	483f      	ldr	r0, [pc, #252]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80033e8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80033ea:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80033ee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033f2:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033f4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033f8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033fc:	d053      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	d508      	bpl.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003402:	4a38      	ldr	r2, [pc, #224]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003404:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003406:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800340a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800340e:	430b      	orrs	r3, r1
 8003410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8003414:	4630      	mov	r0, r6
 8003416:	b003      	add	sp, #12
 8003418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800341e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003422:	659a      	str	r2, [r3, #88]	@ 0x58
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800342e:	2701      	movs	r7, #1
 8003430:	e72a      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003432:	482c      	ldr	r0, [pc, #176]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003434:	68c2      	ldr	r2, [r0, #12]
 8003436:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800343a:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800343c:	4829      	ldr	r0, [pc, #164]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800343e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003442:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003446:	430a      	orrs	r2, r1
 8003448:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800344c:	2600      	movs	r6, #0
 800344e:	e713      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4924      	ldr	r1, [pc, #144]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003452:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003454:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003458:	658a      	str	r2, [r1, #88]	@ 0x58
 800345a:	e753      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	68ca      	ldr	r2, [r1, #12]
 800345e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003462:	60ca      	str	r2, [r1, #12]
 8003464:	e7ac      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003466:	68ca      	ldr	r2, [r1, #12]
 8003468:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800346c:	60ca      	str	r2, [r1, #12]
 800346e:	e7b8      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe f898 	bl	80015a4 <HAL_GetTick>
 8003474:	eba0 0008 	sub.w	r0, r0, r8
 8003478:	4548      	cmp	r0, r9
 800347a:	f63f af3e 	bhi.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0xba>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003482:	079b      	lsls	r3, r3, #30
 8003484:	d5f4      	bpl.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x230>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003486:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003488:	4916      	ldr	r1, [pc, #88]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800348a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800348e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003498:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800349a:	2f00      	cmp	r7, #0
 800349c:	f43f af32 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80034a0:	e7d6      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a2:	2601      	movs	r6, #1
 80034a4:	e6e8      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034a6:	2102      	movs	r1, #2
 80034a8:	1d20      	adds	r0, r4, #4
 80034aa:	f7ff fe3b 	bl	8003124 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ae:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d0a4      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        status = ret;
 80034b4:	4606      	mov	r6, r0
 80034b6:	e7a2      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b8:	2101      	movs	r1, #1
 80034ba:	1d20      	adds	r0, r4, #4
 80034bc:	f7ff fe32 	bl	8003124 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c0:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 80034c2:	2800      	cmp	r0, #0
 80034c4:	f43f af7c 	beq.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
          status = ret;
 80034c8:	4606      	mov	r6, r0
 80034ca:	e779      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034cc:	2101      	movs	r1, #1
 80034ce:	1d20      	adds	r0, r4, #4
 80034d0:	f7ff fe28 	bl	8003124 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d083      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
        status = ret;
 80034da:	4606      	mov	r6, r0
 80034dc:	e781      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034de:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	e7ab      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80034ec:	4a02      	ldr	r2, [pc, #8]	@ (80034f8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	4770      	bx	lr
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d06a      	beq.n	80035d6 <HAL_TIM_Base_Init+0xda>
{
 8003500:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003506:	4604      	mov	r4, r0
 8003508:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05d      	beq.n	80035cc <HAL_TIM_Base_Init+0xd0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003510:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003512:	4e32      	ldr	r6, [pc, #200]	@ (80035dc <HAL_TIM_Base_Init+0xe0>)
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003514:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003516:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	2202      	movs	r2, #2
 800351c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003520:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8003522:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	d010      	beq.n	8003548 <HAL_TIM_Base_Init+0x4c>
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352a:	d00d      	beq.n	8003548 <HAL_TIM_Base_Init+0x4c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352c:	f506 56a0 	add.w	r6, r6, #5120	@ 0x1400
 8003530:	42b3      	cmp	r3, r6
 8003532:	d040      	beq.n	80035b6 <HAL_TIM_Base_Init+0xba>
 8003534:	4e2a      	ldr	r6, [pc, #168]	@ (80035e0 <HAL_TIM_Base_Init+0xe4>)
 8003536:	42b3      	cmp	r3, r6
 8003538:	d03d      	beq.n	80035b6 <HAL_TIM_Base_Init+0xba>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800353a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003540:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003542:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003544:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003546:	e012      	b.n	800356e <HAL_TIM_Base_Init+0x72>
    tmpcr1 |= Structure->CounterMode;
 8003548:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800354e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003550:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003556:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800355c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800355e:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003560:	4a1e      	ldr	r2, [pc, #120]	@ (80035dc <HAL_TIM_Base_Init+0xe0>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003562:	62d8      	str	r0, [r3, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003564:	4293      	cmp	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003566:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003568:	d101      	bne.n	800356e <HAL_TIM_Base_Init+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800356a:	6962      	ldr	r2, [r4, #20]
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356e:	2201      	movs	r2, #1
 8003570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	07d2      	lsls	r2, r2, #31
 8003576:	d503      	bpl.n	8003580 <HAL_TIM_Base_Init+0x84>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003580:	2301      	movs	r3, #1
 8003582:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003586:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800358a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800358e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003592:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003596:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800359a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80035a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80035a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80035aa:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80035ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80035b2:	2000      	movs	r0, #0
}
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035bc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035c2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80035c4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035c8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ca:	e7ce      	b.n	800356a <HAL_TIM_Base_Init+0x6e>
    htim->Lock = HAL_UNLOCKED;
 80035cc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80035d0:	f7fd fd7c 	bl	80010cc <HAL_TIM_Base_MspInit>
 80035d4:	e79c      	b.n	8003510 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80035d6:	2001      	movs	r0, #1
}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40014400 	.word	0x40014400

080035e4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80035e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d116      	bne.n	800361a <HAL_TIM_Base_Start_IT+0x36>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	4910      	ldr	r1, [pc, #64]	@ (8003630 <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	2202      	movs	r2, #2
 80035f2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003600:	d00d      	beq.n	800361e <HAL_TIM_Base_Start_IT+0x3a>
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d00a      	beq.n	800361e <HAL_TIM_Base_Start_IT+0x3a>
 8003608:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <HAL_TIM_Base_Start_IT+0x50>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003616:	2000      	movs	r0, #0
 8003618:	4770      	bx	lr
    return HAL_ERROR;
 800361a:	2001      	movs	r0, #1
}
 800361c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <HAL_TIM_Base_Start_IT+0x54>)
 8003622:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	2a06      	cmp	r2, #6
 8003626:	d0f6      	beq.n	8003616 <HAL_TIM_Base_Start_IT+0x32>
 8003628:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800362c:	d1ef      	bne.n	800360e <HAL_TIM_Base_Start_IT+0x2a>
 800362e:	e7f2      	b.n	8003616 <HAL_TIM_Base_Start_IT+0x32>
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40014000 	.word	0x40014000
 8003638:	00010007 	.word	0x00010007

0800363c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363c:	2910      	cmp	r1, #16
 800363e:	d80a      	bhi.n	8003656 <HAL_TIM_OC_Start+0x1a>
 8003640:	e8df f001 	tbb	[pc, r1]
 8003644:	09090919 	.word	0x09090919
 8003648:	0909093f 	.word	0x0909093f
 800364c:	09090957 	.word	0x09090957
 8003650:	09090947 	.word	0x09090947
 8003654:	4f          	.byte	0x4f
 8003655:	00          	.byte	0x00
 8003656:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800365a:	2b01      	cmp	r3, #1
 800365c:	d162      	bne.n	8003724 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	1f0b      	subs	r3, r1, #4
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d84e      	bhi.n	8003702 <HAL_TIM_OC_Start+0xc6>
 8003664:	e8df f003 	tbb	[pc, r3]
 8003668:	4d4d4d31 	.word	0x4d4d4d31
 800366c:	4d4d4d49 	.word	0x4d4d4d49
 8003670:	4d4d4d39 	.word	0x4d4d4d39
 8003674:	41          	.byte	0x41
 8003675:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003676:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800367a:	2b01      	cmp	r3, #1
 800367c:	d152      	bne.n	8003724 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	2302      	movs	r3, #2
 8003680:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003684:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003686:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368a:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800368c:	2201      	movs	r2, #1
 800368e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003690:	ea20 0002 	bic.w	r0, r0, r2
 8003694:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003696:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003698:	4926      	ldr	r1, [pc, #152]	@ (8003734 <HAL_TIM_OC_Start+0xf8>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800369a:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800369c:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800369e:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	d033      	beq.n	800370a <HAL_TIM_OC_Start+0xce>
 80036a2:	4a25      	ldr	r2, [pc, #148]	@ (8003738 <HAL_TIM_OC_Start+0xfc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d030      	beq.n	800370a <HAL_TIM_OC_Start+0xce>
 80036a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d03b      	beq.n	8003728 <HAL_TIM_OC_Start+0xec>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b4:	d02d      	beq.n	8003712 <HAL_TIM_OC_Start+0xd6>
      __HAL_TIM_ENABLE(htim);
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036be:	2000      	movs	r0, #0
 80036c0:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036c2:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d12c      	bne.n	8003724 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ca:	2302      	movs	r3, #2
 80036cc:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80036d0:	e7d8      	b.n	8003684 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d124      	bne.n	8003724 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	2302      	movs	r3, #2
 80036dc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 80036e0:	e7d0      	b.n	8003684 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036e2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d11c      	bne.n	8003724 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	2302      	movs	r3, #2
 80036ec:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 80036f0:	e7c8      	b.n	8003684 <HAL_TIM_OC_Start+0x48>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036f2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d114      	bne.n	8003724 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fa:	2302      	movs	r3, #2
 80036fc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003700:	e7c0      	b.n	8003684 <HAL_TIM_OC_Start+0x48>
 8003702:	2302      	movs	r3, #2
 8003704:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8003708:	e7bc      	b.n	8003684 <HAL_TIM_OC_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800370a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800370c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_TIM_OC_Start+0x100>)
 8003716:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	2a06      	cmp	r2, #6
 800371a:	d0d0      	beq.n	80036be <HAL_TIM_OC_Start+0x82>
 800371c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003720:	d1c9      	bne.n	80036b6 <HAL_TIM_OC_Start+0x7a>
 8003722:	e7cc      	b.n	80036be <HAL_TIM_OC_Start+0x82>
    return HAL_ERROR;
 8003724:	2001      	movs	r0, #1
}
 8003726:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8003728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800372a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003730:	e7c1      	b.n	80036b6 <HAL_TIM_OC_Start+0x7a>
 8003732:	bf00      	nop
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40014000 	.word	0x40014000
 800373c:	00010007 	.word	0x00010007

08003740 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003744:	2800      	cmp	r0, #0
 8003746:	d06a      	beq.n	800381e <HAL_TIM_PWM_Init+0xda>
{
 8003748:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800374a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800374e:	4604      	mov	r4, r0
 8003750:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003754:	2b00      	cmp	r3, #0
 8003756:	d05d      	beq.n	8003814 <HAL_TIM_PWM_Init+0xd0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003758:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375a:	4e32      	ldr	r6, [pc, #200]	@ (8003824 <HAL_TIM_PWM_Init+0xe0>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375c:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375e:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003760:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003762:	2202      	movs	r2, #2
 8003764:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003768:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 800376a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800376c:	d010      	beq.n	8003790 <HAL_TIM_PWM_Init+0x4c>
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003772:	d00d      	beq.n	8003790 <HAL_TIM_PWM_Init+0x4c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003774:	f506 56a0 	add.w	r6, r6, #5120	@ 0x1400
 8003778:	42b3      	cmp	r3, r6
 800377a:	d040      	beq.n	80037fe <HAL_TIM_PWM_Init+0xba>
 800377c:	4e2a      	ldr	r6, [pc, #168]	@ (8003828 <HAL_TIM_PWM_Init+0xe4>)
 800377e:	42b3      	cmp	r3, r6
 8003780:	d03d      	beq.n	80037fe <HAL_TIM_PWM_Init+0xba>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003782:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003786:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003788:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800378c:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378e:	e012      	b.n	80037b6 <HAL_TIM_PWM_Init+0x72>
    tmpcr1 |= Structure->CounterMode;
 8003790:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003792:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003796:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003798:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a4:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80037a6:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003824 <HAL_TIM_PWM_Init+0xe0>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037aa:	62d8      	str	r0, [r3, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	4293      	cmp	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80037ae:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_PWM_Init+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 80037b2:	6962      	ldr	r2, [r4, #20]
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80037b6:	2201      	movs	r2, #1
 80037b8:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	07d2      	lsls	r2, r2, #31
 80037be:	d503      	bpl.n	80037c8 <HAL_TIM_PWM_Init+0x84>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80037d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80037d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80037da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80037de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80037ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80037ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80037f2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80037fa:	2000      	movs	r0, #0
}
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fe:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003800:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003804:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800380a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800380c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800380e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003810:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003812:	e7ce      	b.n	80037b2 <HAL_TIM_PWM_Init+0x6e>
    htim->Lock = HAL_UNLOCKED;
 8003814:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003818:	f7ff ff92 	bl	8003740 <HAL_TIM_PWM_MspInit>
 800381c:	e79c      	b.n	8003758 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 800381e:	2001      	movs	r0, #1
}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014400 	.word	0x40014400

0800382c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800382c:	2910      	cmp	r1, #16
 800382e:	d80a      	bhi.n	8003846 <HAL_TIM_PWM_Start+0x1a>
 8003830:	e8df f001 	tbb	[pc, r1]
 8003834:	09090919 	.word	0x09090919
 8003838:	0909093f 	.word	0x0909093f
 800383c:	09090957 	.word	0x09090957
 8003840:	09090947 	.word	0x09090947
 8003844:	4f          	.byte	0x4f
 8003845:	00          	.byte	0x00
 8003846:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800384a:	2b01      	cmp	r3, #1
 800384c:	d162      	bne.n	8003914 <HAL_TIM_PWM_Start+0xe8>
 800384e:	1f0b      	subs	r3, r1, #4
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d84e      	bhi.n	80038f2 <HAL_TIM_PWM_Start+0xc6>
 8003854:	e8df f003 	tbb	[pc, r3]
 8003858:	4d4d4d31 	.word	0x4d4d4d31
 800385c:	4d4d4d49 	.word	0x4d4d4d49
 8003860:	4d4d4d39 	.word	0x4d4d4d39
 8003864:	41          	.byte	0x41
 8003865:	00          	.byte	0x00
 8003866:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800386a:	2b01      	cmp	r3, #1
 800386c:	d152      	bne.n	8003914 <HAL_TIM_PWM_Start+0xe8>
 800386e:	2302      	movs	r3, #2
 8003870:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8003874:	6803      	ldr	r3, [r0, #0]
 8003876:	f001 011f 	and.w	r1, r1, #31
 800387a:	6a18      	ldr	r0, [r3, #32]
 800387c:	2201      	movs	r2, #1
 800387e:	408a      	lsls	r2, r1
 8003880:	ea20 0002 	bic.w	r0, r0, r2
 8003884:	6218      	str	r0, [r3, #32]
 8003886:	6a18      	ldr	r0, [r3, #32]
 8003888:	4926      	ldr	r1, [pc, #152]	@ (8003924 <HAL_TIM_PWM_Start+0xf8>)
 800388a:	4302      	orrs	r2, r0
 800388c:	428b      	cmp	r3, r1
 800388e:	621a      	str	r2, [r3, #32]
 8003890:	d033      	beq.n	80038fa <HAL_TIM_PWM_Start+0xce>
 8003892:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <HAL_TIM_PWM_Start+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d030      	beq.n	80038fa <HAL_TIM_PWM_Start+0xce>
 8003898:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800389c:	4293      	cmp	r3, r2
 800389e:	d03b      	beq.n	8003918 <HAL_TIM_PWM_Start+0xec>
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d02d      	beq.n	8003902 <HAL_TIM_PWM_Start+0xd6>
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	2000      	movs	r0, #0
 80038b0:	4770      	bx	lr
 80038b2:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d12c      	bne.n	8003914 <HAL_TIM_PWM_Start+0xe8>
 80038ba:	2302      	movs	r3, #2
 80038bc:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80038c0:	e7d8      	b.n	8003874 <HAL_TIM_PWM_Start+0x48>
 80038c2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d124      	bne.n	8003914 <HAL_TIM_PWM_Start+0xe8>
 80038ca:	2302      	movs	r3, #2
 80038cc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 80038d0:	e7d0      	b.n	8003874 <HAL_TIM_PWM_Start+0x48>
 80038d2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d11c      	bne.n	8003914 <HAL_TIM_PWM_Start+0xe8>
 80038da:	2302      	movs	r3, #2
 80038dc:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 80038e0:	e7c8      	b.n	8003874 <HAL_TIM_PWM_Start+0x48>
 80038e2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d114      	bne.n	8003914 <HAL_TIM_PWM_Start+0xe8>
 80038ea:	2302      	movs	r3, #2
 80038ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80038f0:	e7c0      	b.n	8003874 <HAL_TIM_PWM_Start+0x48>
 80038f2:	2302      	movs	r3, #2
 80038f4:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 80038f8:	e7bc      	b.n	8003874 <HAL_TIM_PWM_Start+0x48>
 80038fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	4a09      	ldr	r2, [pc, #36]	@ (800392c <HAL_TIM_PWM_Start+0x100>)
 8003906:	400a      	ands	r2, r1
 8003908:	2a06      	cmp	r2, #6
 800390a:	d0d0      	beq.n	80038ae <HAL_TIM_PWM_Start+0x82>
 800390c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003910:	d1c9      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x7a>
 8003912:	e7cc      	b.n	80038ae <HAL_TIM_PWM_Start+0x82>
 8003914:	2001      	movs	r0, #1
 8003916:	4770      	bx	lr
 8003918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003920:	e7c1      	b.n	80038a6 <HAL_TIM_PWM_Start+0x7a>
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40014000 	.word	0x40014000
 800392c:	00010007 	.word	0x00010007

08003930 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003930:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	f000 819b 	beq.w	8003c70 <HAL_TIM_PWM_ConfigChannel+0x340>
 800393a:	2301      	movs	r3, #1
{
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8003940:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003944:	2a14      	cmp	r2, #20
 8003946:	d816      	bhi.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x46>
 8003948:	e8df f012 	tbh	[pc, r2, lsl #1]
 800394c:	0015004f 	.word	0x0015004f
 8003950:	00150015 	.word	0x00150015
 8003954:	00150081 	.word	0x00150081
 8003958:	00150015 	.word	0x00150015
 800395c:	001500b5 	.word	0x001500b5
 8003960:	00150015 	.word	0x00150015
 8003964:	001500e6 	.word	0x001500e6
 8003968:	00150015 	.word	0x00150015
 800396c:	00150119 	.word	0x00150119
 8003970:	00150015 	.word	0x00150015
 8003974:	001a      	.short	0x001a
  __HAL_UNLOCK(htim);
 8003976:	2300      	movs	r3, #0
 8003978:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 800397c:	2001      	movs	r0, #1
}
 800397e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003980:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003982:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003984:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800398c:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800398e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003992:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003996:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800399e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039a0:	f420 1000 	bic.w	r0, r0, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039a4:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a8:	4dac      	ldr	r5, [pc, #688]	@ (8003c5c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 80039aa:	42ab      	cmp	r3, r5
 80039ac:	f000 815a 	beq.w	8003c64 <HAL_TIM_PWM_ConfigChannel+0x334>
 80039b0:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 80039b4:	42ab      	cmp	r3, r5
 80039b6:	f000 8155 	beq.w	8003c64 <HAL_TIM_PWM_ConfigChannel+0x334>
 80039ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80039be:	42ab      	cmp	r3, r5
 80039c0:	f000 8150 	beq.w	8003c64 <HAL_TIM_PWM_ConfigChannel+0x334>
  TIMx->CR2 = tmpcr2;
 80039c4:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80039c8:	684a      	ldr	r2, [r1, #4]
 80039ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 80039cc:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039e8:	e0f8      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x2ac>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ea:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80039ec:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80039ee:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f0:	6a18      	ldr	r0, [r3, #32]
 80039f2:	f020 0001 	bic.w	r0, r0, #1
 80039f6:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80039f8:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80039fa:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039fc:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003a00:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003a06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003a08:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8003a0c:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a0e:	4d93      	ldr	r5, [pc, #588]	@ (8003c5c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8003a10:	42ab      	cmp	r3, r5
 8003a12:	f000 8108 	beq.w	8003c26 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8003a16:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8003a1a:	42ab      	cmp	r3, r5
 8003a1c:	f000 8103 	beq.w	8003c26 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8003a20:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	f000 80fe 	beq.w	8003c26 <HAL_TIM_PWM_ConfigChannel+0x2f6>
  TIMx->CR2 = tmpcr2;
 8003a2a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a2c:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003a2e:	6848      	ldr	r0, [r1, #4]
 8003a30:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003a32:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a36:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a38:	f042 0208 	orr.w	r2, r2, #8
 8003a3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	f022 0204 	bic.w	r2, r2, #4
 8003a44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]
      break;
 8003a4c:	e0c6      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x2ac>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a50:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003a52:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a54:	6a18      	ldr	r0, [r3, #32]
 8003a56:	f020 0010 	bic.w	r0, r0, #16
 8003a5a:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003a5c:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a5e:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a60:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8003a64:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a6c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003a6e:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a72:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a76:	4d79      	ldr	r5, [pc, #484]	@ (8003c5c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8003a78:	42ab      	cmp	r3, r5
 8003a7a:	f000 80c4 	beq.w	8003c06 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7e:	4d78      	ldr	r5, [pc, #480]	@ (8003c60 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8003a80:	42ab      	cmp	r3, r5
 8003a82:	f000 80c7 	beq.w	8003c14 <HAL_TIM_PWM_ConfigChannel+0x2e4>
 8003a86:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a8a:	42ab      	cmp	r3, r5
 8003a8c:	f000 80c2 	beq.w	8003c14 <HAL_TIM_PWM_ConfigChannel+0x2e4>
  TIMx->CR2 = tmpcr2;
 8003a90:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a92:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a94:	6848      	ldr	r0, [r1, #4]
 8003a96:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003a98:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ab2:	619a      	str	r2, [r3, #24]
      break;
 8003ab4:	e092      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x2ac>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003aba:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003abc:	6a18      	ldr	r0, [r3, #32]
 8003abe:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8003ac2:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003ac4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ac6:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003acc:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003ad0:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003adc:	4d5f      	ldr	r5, [pc, #380]	@ (8003c5c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8003ade:	42ab      	cmp	r3, r5
 8003ae0:	f000 8081 	beq.w	8003be6 <HAL_TIM_PWM_ConfigChannel+0x2b6>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae4:	4d5e      	ldr	r5, [pc, #376]	@ (8003c60 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8003ae6:	42ab      	cmp	r3, r5
 8003ae8:	f000 8084 	beq.w	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8003aec:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	d07f      	beq.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x2c4>
  TIMx->CR2 = tmpcr2;
 8003af4:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003af6:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003af8:	6848      	ldr	r0, [r1, #4]
 8003afa:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8003afc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003afe:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b00:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e061      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x2ac>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b18:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003b1c:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b24:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b26:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b28:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b2a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003b2e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b38:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b3c:	ea40 3005 	orr.w	r0, r0, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	4d46      	ldr	r5, [pc, #280]	@ (8003c5c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8003b42:	42ab      	cmp	r3, r5
 8003b44:	f000 8084 	beq.w	8003c50 <HAL_TIM_PWM_ConfigChannel+0x320>
 8003b48:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	d07f      	beq.n	8003c50 <HAL_TIM_PWM_ConfigChannel+0x320>
 8003b50:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003b54:	42ab      	cmp	r3, r5
 8003b56:	d07b      	beq.n	8003c50 <HAL_TIM_PWM_ConfigChannel+0x320>
  TIMx->CR2 = tmpcr2;
 8003b58:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b5a:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003b5c:	684a      	ldr	r2, [r1, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8003b60:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b62:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b64:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b7a:	61da      	str	r2, [r3, #28]
      break;
 8003b7c:	e02e      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x2ac>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b7e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003b80:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003b82:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b8a:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b8c:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003b8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b90:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b94:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003b98:	432a      	orrs	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b9a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8003b9c:	f420 3000 	bic.w	r0, r0, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ba0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	4d2d      	ldr	r5, [pc, #180]	@ (8003c5c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8003ba6:	42ab      	cmp	r3, r5
 8003ba8:	d04c      	beq.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x314>
 8003baa:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8003bae:	42ab      	cmp	r3, r5
 8003bb0:	d048      	beq.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x314>
 8003bb2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003bb6:	42ab      	cmp	r3, r5
 8003bb8:	d044      	beq.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x314>
  TIMx->CR2 = tmpcr2;
 8003bba:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003bbe:	684a      	ldr	r2, [r1, #4]
 8003bc0:	659a      	str	r2, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 8003bc2:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bc6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bc8:	f042 0208 	orr.w	r2, r2, #8
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd0:	f022 0204 	bic.w	r2, r2, #4
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(htim);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2000      	movs	r0, #0
}
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bf4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf8:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfc:	ea46 0e05 	orr.w	lr, r6, r5
 8003c00:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8003c04:	e776      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c06:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c0c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c14:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c18:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c1c:	ea46 0e05 	orr.w	lr, r6, r5
 8003c20:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8003c24:	e734      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x160>
    tmpccer |= OC_Config->OCNPolarity;
 8003c26:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c28:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003c2c:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c2e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c32:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c36:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c3e:	ea4e 0404 	orr.w	r4, lr, r4
 8003c42:	e6f2      	b.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0xfa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c44:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c46:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c4a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003c4e:	e7b4      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x28a>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c50:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c52:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c56:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003c5a:	e77d      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x228>
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40014000 	.word	0x40014000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c64:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c66:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c6a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8003c6e:	e6a9      	b.n	80039c4 <HAL_TIM_PWM_ConfigChannel+0x94>
  __HAL_LOCK(htim);
 8003c70:	2002      	movs	r0, #2
}
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003c74:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003c78:	2a01      	cmp	r2, #1
 8003c7a:	d06c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xe2>
 8003c7c:	4603      	mov	r3, r0
{
 8003c7e:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8003c84:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c86:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003c8a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003c8e:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c90:	4c4c      	ldr	r4, [pc, #304]	@ (8003dc4 <HAL_TIM_ConfigClockSource+0x150>)
 8003c92:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8003c94:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c96:	680c      	ldr	r4, [r1, #0]
 8003c98:	2c60      	cmp	r4, #96	@ 0x60
 8003c9a:	d076      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x116>
 8003c9c:	d811      	bhi.n	8003cc2 <HAL_TIM_ConfigClockSource+0x4e>
 8003c9e:	2c40      	cmp	r4, #64	@ 0x40
 8003ca0:	d05b      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xe6>
 8003ca2:	d82e      	bhi.n	8003d02 <HAL_TIM_ConfigClockSource+0x8e>
 8003ca4:	2c20      	cmp	r4, #32
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x3e>
 8003ca8:	f200 8088 	bhi.w	8003dbc <HAL_TIM_ConfigClockSource+0x148>
 8003cac:	f034 0110 	bics.w	r1, r4, #16
 8003cb0:	d11f      	bne.n	8003cf2 <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr = TIMx->SMCR;
 8003cb2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cb4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb8:	4321      	orrs	r1, r4
 8003cba:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8003cbe:	6091      	str	r1, [r2, #8]
}
 8003cc0:	e016      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8003cc2:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003cc6:	d013      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0x7c>
 8003cc8:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8003ccc:	d033      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xc2>
 8003cce:	2c70      	cmp	r4, #112	@ 0x70
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_TIM_ConfigClockSource+0x7e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd2:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003cd6:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd8:	4328      	orrs	r0, r5
 8003cda:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003ce4:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8003ce6:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003ce8:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cea:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003cee:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cf2:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003cf4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cf6:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003cfe:	bc30      	pop	{r4, r5}
 8003d00:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003d02:	2c50      	cmp	r4, #80	@ 0x50
 8003d04:	d1f5      	bne.n	8003cf2 <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8003d06:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003d08:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d0a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003d10:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	6a11      	ldr	r1, [r2, #32]
 8003d14:	f021 0101 	bic.w	r1, r1, #1
 8003d18:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d1c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d20:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d24:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003d26:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003d28:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2e:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003d32:	6091      	str	r1, [r2, #8]
}
 8003d34:	e7dc      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d36:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003d3a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3c:	4328      	orrs	r0, r5
 8003d3e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d44:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003d48:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8003d4a:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d4c:	6891      	ldr	r1, [r2, #8]
 8003d4e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8003d52:	6091      	str	r1, [r2, #8]
      break;
 8003d54:	e7cc      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x7c>
  __HAL_LOCK(htim);
 8003d56:	2002      	movs	r0, #2
}
 8003d58:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8003d5a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5c:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d5e:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d60:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003d64:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d66:	6a11      	ldr	r1, [r2, #32]
 8003d68:	f021 0101 	bic.w	r1, r1, #1
 8003d6c:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6e:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d70:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d74:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d78:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003d7a:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003d7c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d7e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d82:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003d86:	6091      	str	r1, [r2, #8]
}
 8003d88:	e7b2      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x7c>
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8c:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d8e:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d90:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d94:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d98:	6a10      	ldr	r0, [r2, #32]
 8003d9a:	f020 0010 	bic.w	r0, r0, #16
 8003d9e:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da0:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da2:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da6:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003daa:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8003dac:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003dae:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db4:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003db8:	6091      	str	r1, [r2, #8]
}
 8003dba:	e799      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8003dbc:	2c30      	cmp	r4, #48	@ 0x30
 8003dbe:	f43f af78 	beq.w	8003cb2 <HAL_TIM_ConfigClockSource+0x3e>
 8003dc2:	e796      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x7e>
 8003dc4:	fffe0088 	.word	0xfffe0088

08003dc8 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop

08003dcc <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop

08003dd0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop

08003dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop

08003dd8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003ddc:	6803      	ldr	r3, [r0, #0]
{
 8003dde:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003de0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003de2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003de4:	07aa      	lsls	r2, r5, #30
{
 8003de6:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003de8:	d501      	bpl.n	8003dee <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dea:	07b1      	lsls	r1, r6, #30
 8003dec:	d452      	bmi.n	8003e94 <HAL_TIM_IRQHandler+0xb8>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dee:	076b      	lsls	r3, r5, #29
 8003df0:	d501      	bpl.n	8003df6 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003df2:	0770      	lsls	r0, r6, #29
 8003df4:	d43b      	bmi.n	8003e6e <HAL_TIM_IRQHandler+0x92>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003df6:	0729      	lsls	r1, r5, #28
 8003df8:	d501      	bpl.n	8003dfe <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dfa:	0732      	lsls	r2, r6, #28
 8003dfc:	d425      	bmi.n	8003e4a <HAL_TIM_IRQHandler+0x6e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dfe:	06e8      	lsls	r0, r5, #27
 8003e00:	d501      	bpl.n	8003e06 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e02:	06f1      	lsls	r1, r6, #27
 8003e04:	d411      	bmi.n	8003e2a <HAL_TIM_IRQHandler+0x4e>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e06:	07ea      	lsls	r2, r5, #31
 8003e08:	d501      	bpl.n	8003e0e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e0a:	07f3      	lsls	r3, r6, #31
 8003e0c:	d464      	bmi.n	8003ed8 <HAL_TIM_IRQHandler+0xfc>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003e0e:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 8003e12:	d04c      	beq.n	8003eae <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e14:	0630      	lsls	r0, r6, #24
 8003e16:	d467      	bmi.n	8003ee8 <HAL_TIM_IRQHandler+0x10c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e18:	0668      	lsls	r0, r5, #25
 8003e1a:	d501      	bpl.n	8003e20 <HAL_TIM_IRQHandler+0x44>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e1c:	0671      	lsls	r1, r6, #25
 8003e1e:	d46d      	bmi.n	8003efc <HAL_TIM_IRQHandler+0x120>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e20:	06aa      	lsls	r2, r5, #26
 8003e22:	d501      	bpl.n	8003e28 <HAL_TIM_IRQHandler+0x4c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e24:	06b3      	lsls	r3, r6, #26
 8003e26:	d44e      	bmi.n	8003ec6 <HAL_TIM_IRQHandler+0xea>
}
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	f06f 0210 	mvn.w	r2, #16
 8003e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e32:	2208      	movs	r2, #8
 8003e34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e3e:	d071      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x148>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e40:	f7ff ffc6 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e44:	2300      	movs	r3, #0
 8003e46:	7723      	strb	r3, [r4, #28]
 8003e48:	e7dd      	b.n	8003e06 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	f06f 0208 	mvn.w	r2, #8
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e52:	2204      	movs	r2, #4
 8003e54:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e5c:	d15f      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	f7ff ffb5 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff ffb6 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	7723      	strb	r3, [r4, #28]
 8003e6c:	e7c7      	b.n	8003dfe <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f06f 0204 	mvn.w	r2, #4
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e76:	2202      	movs	r2, #2
 8003e78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e82:	d149      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e84:	f7ff ffa2 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f7ff ffa3 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	7723      	strb	r3, [r4, #28]
 8003e92:	e7b0      	b.n	8003df6 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e94:	f06f 0202 	mvn.w	r2, #2
 8003e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	079a      	lsls	r2, r3, #30
 8003ea2:	d033      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x130>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea4:	f7ff ff94 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	7723      	strb	r3, [r4, #28]
 8003eac:	e79f      	b.n	8003dee <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003eae:	05ea      	lsls	r2, r5, #23
 8003eb0:	d5b2      	bpl.n	8003e18 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eb2:	0633      	lsls	r3, r6, #24
 8003eb4:	d5b0      	bpl.n	8003e18 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ebc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f000 fa12 	bl	80042e8 <HAL_TIMEx_Break2Callback>
 8003ec4:	e7a8      	b.n	8003e18 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003ecc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ece:	611a      	str	r2, [r3, #16]
}
 8003ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003ed4:	f000 ba04 	b.w	80042e0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f06f 0201 	mvn.w	r2, #1
 8003ede:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff ff71 	bl	8003dc8 <HAL_TIM_PeriodElapsedCallback>
 8003ee6:	e792      	b.n	8003e0e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003eee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 f9f7 	bl	80042e4 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ef6:	05e9      	lsls	r1, r5, #23
 8003ef8:	d58e      	bpl.n	8003e18 <HAL_TIM_IRQHandler+0x3c>
 8003efa:	e7dc      	b.n	8003eb6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f02:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7ff ff67 	bl	8003dd8 <HAL_TIM_TriggerCallback>
 8003f0a:	e789      	b.n	8003e20 <HAL_TIM_IRQHandler+0x44>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0c:	f7ff ff5e 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7ff ff5f 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f16:	e7c7      	b.n	8003ea8 <HAL_TIM_IRQHandler+0xcc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f18:	f7ff ff5a 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e7b7      	b.n	8003e8e <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	f7ff ff57 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003f22:	e7a1      	b.n	8003e68 <HAL_TIM_IRQHandler+0x8c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f24:	f7ff ff52 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ff53 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f2e:	e789      	b.n	8003e44 <HAL_TIM_IRQHandler+0x68>

08003f30 <TIM_Base_SetConfig>:
{
 8003f30:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f32:	4e20      	ldr	r6, [pc, #128]	@ (8003fb4 <TIM_Base_SetConfig+0x84>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f34:	694d      	ldr	r5, [r1, #20]
  tmpcr1 = TIMx->CR1;
 8003f36:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f38:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003f3a:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	42b0      	cmp	r0, r6
 8003f3e:	d010      	beq.n	8003f62 <TIM_Base_SetConfig+0x32>
 8003f40:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003f44:	d00d      	beq.n	8003f62 <TIM_Base_SetConfig+0x32>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f46:	f506 56a0 	add.w	r6, r6, #5120	@ 0x1400
 8003f4a:	42b0      	cmp	r0, r6
 8003f4c:	d027      	beq.n	8003f9e <TIM_Base_SetConfig+0x6e>
 8003f4e:	4e1a      	ldr	r6, [pc, #104]	@ (8003fb8 <TIM_Base_SetConfig+0x88>)
 8003f50:	42b0      	cmp	r0, r6
 8003f52:	d024      	beq.n	8003f9e <TIM_Base_SetConfig+0x6e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f58:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f5e:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f60:	e012      	b.n	8003f88 <TIM_Base_SetConfig+0x58>
    tmpcr1 |= Structure->CounterMode;
 8003f62:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f68:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f70:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f76:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f78:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <TIM_Base_SetConfig+0x84>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f7c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7e:	4298      	cmp	r0, r3
  TIMx->PSC = Structure->Prescaler;
 8003f80:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f82:	d101      	bne.n	8003f88 <TIM_Base_SetConfig+0x58>
    TIMx->RCR = Structure->RepetitionCounter;
 8003f84:	690b      	ldr	r3, [r1, #16]
 8003f86:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8c:	6903      	ldr	r3, [r0, #16]
 8003f8e:	07db      	lsls	r3, r3, #31
 8003f90:	d503      	bpl.n	8003f9a <TIM_Base_SetConfig+0x6a>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f92:	6903      	ldr	r3, [r0, #16]
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6103      	str	r3, [r0, #16]
}
 8003f9a:	bc70      	pop	{r4, r5, r6}
 8003f9c:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9e:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003faa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003fac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fae:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fb0:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb2:	e7e7      	b.n	8003f84 <TIM_Base_SetConfig+0x54>
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40014400 	.word	0x40014400

08003fbc <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8003fbc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbe:	6a02      	ldr	r2, [r0, #32]
 8003fc0:	f022 0210 	bic.w	r2, r2, #16
{
 8003fc4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003fc8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fce:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003fd2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fda:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003fdc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe4:	4d10      	ldr	r5, [pc, #64]	@ (8004028 <TIM_OC2_SetConfig+0x6c>)
 8003fe6:	42a8      	cmp	r0, r5
 8003fe8:	d015      	beq.n	8004016 <TIM_OC2_SetConfig+0x5a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	4d10      	ldr	r5, [pc, #64]	@ (800402c <TIM_OC2_SetConfig+0x70>)
 8003fec:	42a8      	cmp	r0, r5
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC2_SetConfig+0x3c>
 8003ff0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003ff4:	42a8      	cmp	r0, r5
 8003ff6:	d107      	bne.n	8004008 <TIM_OC2_SetConfig+0x4c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ffc:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004000:	ea46 0c05 	orr.w	ip, r6, r5
 8004004:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004008:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800400a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800400c:	6182      	str	r2, [r0, #24]
}
 800400e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004010:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004012:	6203      	str	r3, [r0, #32]
}
 8004014:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004016:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800401c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	e7e8      	b.n	8003ff8 <TIM_OC2_SetConfig+0x3c>
 8004026:	bf00      	nop
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40014000 	.word	0x40014000

08004030 <TIM_TI1_SetConfig>:
{
 8004030:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004032:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004034:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004036:	4e0f      	ldr	r6, [pc, #60]	@ (8004074 <TIM_TI1_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004038:	f024 0401 	bic.w	r4, r4, #1
 800403c:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800403e:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8004040:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004042:	d009      	beq.n	8004058 <TIM_TI1_SetConfig+0x28>
 8004044:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004048:	d006      	beq.n	8004058 <TIM_TI1_SetConfig+0x28>
 800404a:	f506 56a0 	add.w	r6, r6, #5120	@ 0x1400
 800404e:	42b0      	cmp	r0, r6
 8004050:	d002      	beq.n	8004058 <TIM_TI1_SetConfig+0x28>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004052:	f044 0201 	orr.w	r2, r4, #1
 8004056:	e002      	b.n	800405e <TIM_TI1_SetConfig+0x2e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004058:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800405c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405e:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004062:	f001 010a 	and.w	r1, r1, #10
 8004066:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004068:	f363 1207 	bfi	r2, r3, #4, #4
  TIMx->CCMR1 = tmpccmr1;
 800406c:	6182      	str	r2, [r0, #24]
}
 800406e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004070:	6201      	str	r1, [r0, #32]
}
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00

08004078 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800407c:	2800      	cmp	r0, #0
 800407e:	d061      	beq.n	8004144 <HAL_TIMEx_HallSensor_Init+0xc8>
{
 8004080:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 8004086:	b089      	sub	sp, #36	@ 0x24
 8004088:	460d      	mov	r5, r1
 800408a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800408c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004090:	2b00      	cmp	r3, #0
 8004092:	d052      	beq.n	800413a <HAL_TIMEx_HallSensor_Init+0xbe>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409c:	f851 0b04 	ldr.w	r0, [r1], #4
 80040a0:	f7ff ff46 	bl	8003f30 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80040a4:	68ab      	ldr	r3, [r5, #8]
 80040a6:	6829      	ldr	r1, [r5, #0]
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f7ff ffc0 	bl	8004030 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040b0:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80040b2:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040b4:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80040b6:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040b8:	f023 030c 	bic.w	r3, r3, #12
 80040bc:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80040be:	6983      	ldr	r3, [r0, #24]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80040c4:	6843      	ldr	r3, [r0, #4]
 80040c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ca:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80040cc:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80040ce:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80040d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80040d6:	6883      	ldr	r3, [r0, #8]
 80040d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040dc:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80040de:	6883      	ldr	r3, [r0, #8]
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e4:	f023 0307 	bic.w	r3, r3, #7
 80040e8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80040ea:	6883      	ldr	r3, [r0, #8]
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80040f2:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80040f4:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80040f6:	2370      	movs	r3, #112	@ 0x70
 80040f8:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040fa:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040fe:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004102:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004104:	f7ff ff5a 	bl	8003fbc <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	6851      	ldr	r1, [r2, #4]
 800410c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004110:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004112:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004114:	2301      	movs	r3, #1
  return HAL_OK;
 8004116:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004118:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800411c:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004126:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800412a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800412e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004132:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004136:	b009      	add	sp, #36	@ 0x24
 8004138:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800413a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800413e:	f7ff ff9b 	bl	8004078 <HAL_TIMEx_HallSensor_MspInit>
 8004142:	e7a7      	b.n	8004094 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004144:	2001      	movs	r0, #1
}
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004148:	bb29      	cbnz	r1, 8004196 <HAL_TIMEx_PWMN_Start+0x4e>
 800414a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800414e:	2b01      	cmp	r3, #1
 8004150:	d12d      	bne.n	80041ae <HAL_TIMEx_PWMN_Start+0x66>
 8004152:	2302      	movs	r3, #2
 8004154:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8004158:	6803      	ldr	r3, [r0, #0]
 800415a:	f001 010f 	and.w	r1, r1, #15
 800415e:	6a18      	ldr	r0, [r3, #32]
 8004160:	2204      	movs	r2, #4
 8004162:	408a      	lsls	r2, r1
 8004164:	ea20 0002 	bic.w	r0, r0, r2
 8004168:	6218      	str	r0, [r3, #32]
 800416a:	6a18      	ldr	r0, [r3, #32]
 800416c:	491d      	ldr	r1, [pc, #116]	@ (80041e4 <HAL_TIMEx_PWMN_Start+0x9c>)
 800416e:	4302      	orrs	r2, r0
 8004170:	621a      	str	r2, [r3, #32]
 8004172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004174:	428b      	cmp	r3, r1
 8004176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800417a:	645a      	str	r2, [r3, #68]	@ 0x44
 800417c:	d019      	beq.n	80041b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004182:	d016      	beq.n	80041b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004184:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_TIMEx_PWMN_Start+0xa0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	2000      	movs	r0, #0
 8004194:	4770      	bx	lr
 8004196:	2904      	cmp	r1, #4
 8004198:	d014      	beq.n	80041c4 <HAL_TIMEx_PWMN_Start+0x7c>
 800419a:	2908      	cmp	r1, #8
 800419c:	d01a      	beq.n	80041d4 <HAL_TIMEx_PWMN_Start+0x8c>
 800419e:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d103      	bne.n	80041ae <HAL_TIMEx_PWMN_Start+0x66>
 80041a6:	2302      	movs	r3, #2
 80041a8:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 80041ac:	e7d4      	b.n	8004158 <HAL_TIMEx_PWMN_Start+0x10>
 80041ae:	2001      	movs	r0, #1
 80041b0:	4770      	bx	lr
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <HAL_TIMEx_PWMN_Start+0xa4>)
 80041b6:	400a      	ands	r2, r1
 80041b8:	2a06      	cmp	r2, #6
 80041ba:	d0ea      	beq.n	8004192 <HAL_TIMEx_PWMN_Start+0x4a>
 80041bc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80041c0:	d1e3      	bne.n	800418a <HAL_TIMEx_PWMN_Start+0x42>
 80041c2:	e7e6      	b.n	8004192 <HAL_TIMEx_PWMN_Start+0x4a>
 80041c4:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d1f0      	bne.n	80041ae <HAL_TIMEx_PWMN_Start+0x66>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 80041d2:	e7c1      	b.n	8004158 <HAL_TIMEx_PWMN_Start+0x10>
 80041d4:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d1e8      	bne.n	80041ae <HAL_TIMEx_PWMN_Start+0x66>
 80041dc:	2302      	movs	r3, #2
 80041de:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 80041e2:	e7b9      	b.n	8004158 <HAL_TIMEx_PWMN_Start+0x10>
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40014000 	.word	0x40014000
 80041ec:	00010007 	.word	0x00010007

080041f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041f0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80041f4:	2a01      	cmp	r2, #1
 80041f6:	d02b      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	6802      	ldr	r2, [r0, #0]
{
 80041fa:	b470      	push	{r4, r5, r6}
 80041fc:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041fe:	4e15      	ldr	r6, [pc, #84]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	2002      	movs	r0, #2
 8004202:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004206:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8004208:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800420c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800420e:	d016      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004210:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004214:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004216:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800421a:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	d002      	beq.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800421e:	480e      	ldr	r0, [pc, #56]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004220:	4282      	cmp	r2, r0
 8004222:	d104      	bne.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004224:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004226:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800422e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004236:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800423a:	bc70      	pop	{r4, r5, r6}
 800423c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800423e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004240:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004244:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004246:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424a:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800424c:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424e:	e7e9      	b.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8004250:	2002      	movs	r0, #2
}
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40014000 	.word	0x40014000

0800425c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800425c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d039      	beq.n	80042d8 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
{
 8004264:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004266:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800426a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800426e:	4602      	mov	r2, r0
 8004270:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004272:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004274:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004276:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800427a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800427c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004280:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004282:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004288:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800428a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800428c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004290:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004292:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004294:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004298:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800429a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800429c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042a0:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042a6:	4c0d      	ldr	r4, [pc, #52]	@ (80042dc <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
 80042a8:	42a0      	cmp	r0, r4
 80042aa:	d007      	beq.n	80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80042ac:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80042ae:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80042b0:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80042b4:	4608      	mov	r0, r1
}
 80042b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ba:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042bc:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80042be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042c2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042c6:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042c8:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ce:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80042d4:	430b      	orrs	r3, r1
 80042d6:	e7e9      	b.n	80042ac <HAL_TIMEx_ConfigBreakDeadTime+0x50>
  __HAL_LOCK(htim);
 80042d8:	2002      	movs	r0, #2
}
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00

080042e0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop

080042e8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f0:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80042f4:	2820      	cmp	r0, #32
 80042f6:	d15c      	bne.n	80043b2 <HAL_UART_Transmit+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	460d      	mov	r5, r1
 80042fa:	b109      	cbz	r1, 8004300 <HAL_UART_Transmit+0x14>
 80042fc:	4616      	mov	r6, r2
 80042fe:	b912      	cbnz	r2, 8004306 <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8004300:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004306:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800430c:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	f8c4 8084 	str.w	r8, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004312:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8004314:	f7fd f946 	bl	80015a4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800431a:	f8a4 6050 	strh.w	r6, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004322:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8004324:	f8a4 6052 	strh.w	r6, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	d046      	beq.n	80043b8 <HAL_UART_Transmit+0xcc>
    while (huart->TxXferCount > 0U)
 800432a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04b      	beq.n	80043ce <HAL_UART_Transmit+0xe2>
 8004336:	1c7b      	adds	r3, r7, #1
 8004338:	d129      	bne.n	800438e <HAL_UART_Transmit+0xa2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433a:	69d3      	ldr	r3, [r2, #28]
 800433c:	061f      	lsls	r7, r3, #24
 800433e:	d5fc      	bpl.n	800433a <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8004340:	2d00      	cmp	r5, #0
 8004342:	d031      	beq.n	80043a8 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004344:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004348:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800434a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800434e:	3b01      	subs	r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004356:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ec      	bne.n	800433a <HAL_UART_Transmit+0x4e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004360:	69d3      	ldr	r3, [r2, #28]
 8004362:	0659      	lsls	r1, r3, #25
 8004364:	d5fc      	bpl.n	8004360 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8004366:	2320      	movs	r3, #32
 8004368:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800436a:	2000      	movs	r0, #0
}
 800436c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8004370:	2d00      	cmp	r5, #0
 8004372:	d03f      	beq.n	80043f4 <HAL_UART_Transmit+0x108>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004374:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004378:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800437a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800437e:	3b01      	subs	r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004386:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800438a:	b29b      	uxth	r3, r3
 800438c:	b30b      	cbz	r3, 80043d2 <HAL_UART_Transmit+0xe6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438e:	69d3      	ldr	r3, [r2, #28]
 8004390:	061e      	lsls	r6, r3, #24
 8004392:	d4ed      	bmi.n	8004370 <HAL_UART_Transmit+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fd f906 	bl	80015a4 <HAL_GetTick>
 8004398:	eba0 0309 	sub.w	r3, r0, r9
 800439c:	429f      	cmp	r7, r3
 800439e:	d311      	bcc.n	80043c4 <HAL_UART_Transmit+0xd8>
 80043a0:	b187      	cbz	r7, 80043c4 <HAL_UART_Transmit+0xd8>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	e7f2      	b.n	800438e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80043ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b0:	e7ca      	b.n	8004348 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 80043b2:	2002      	movs	r0, #2
}
 80043b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1b5      	bne.n	800432a <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 80043be:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80043c0:	461d      	mov	r5, r3
 80043c2:	e7b2      	b.n	800432a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 80043c4:	2320      	movs	r3, #32
 80043c6:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80043c8:	2003      	movs	r0, #3
}
 80043ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ce:	1c78      	adds	r0, r7, #1
 80043d0:	d0c6      	beq.n	8004360 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d2:	69d3      	ldr	r3, [r2, #28]
 80043d4:	065b      	lsls	r3, r3, #25
 80043d6:	d4c6      	bmi.n	8004366 <HAL_UART_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fd f8e4 	bl	80015a4 <HAL_GetTick>
 80043dc:	eba0 0309 	sub.w	r3, r0, r9
 80043e0:	429f      	cmp	r7, r3
 80043e2:	d3ef      	bcc.n	80043c4 <HAL_UART_Transmit+0xd8>
 80043e4:	2f00      	cmp	r7, #0
 80043e6:	d0ed      	beq.n	80043c4 <HAL_UART_Transmit+0xd8>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	69d3      	ldr	r3, [r2, #28]
 80043ee:	065b      	lsls	r3, r3, #25
 80043f0:	d5f2      	bpl.n	80043d8 <HAL_UART_Transmit+0xec>
 80043f2:	e7b8      	b.n	8004366 <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	e7bc      	b.n	8004378 <HAL_UART_Transmit+0x8c>
 80043fe:	bf00      	nop

08004400 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004400:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004402:	071a      	lsls	r2, r3, #28
{
 8004404:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004406:	d506      	bpl.n	8004416 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004408:	6801      	ldr	r1, [r0, #0]
 800440a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800440c:	684a      	ldr	r2, [r1, #4]
 800440e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004412:	4322      	orrs	r2, r4
 8004414:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004416:	07dc      	lsls	r4, r3, #31
 8004418:	d506      	bpl.n	8004428 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800441a:	6801      	ldr	r1, [r0, #0]
 800441c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800441e:	684a      	ldr	r2, [r1, #4]
 8004420:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004424:	4322      	orrs	r2, r4
 8004426:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004428:	0799      	lsls	r1, r3, #30
 800442a:	d506      	bpl.n	800443a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800442c:	6801      	ldr	r1, [r0, #0]
 800442e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004430:	684a      	ldr	r2, [r1, #4]
 8004432:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004436:	4322      	orrs	r2, r4
 8004438:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800443a:	075a      	lsls	r2, r3, #29
 800443c:	d506      	bpl.n	800444c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800443e:	6801      	ldr	r1, [r0, #0]
 8004440:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004442:	684a      	ldr	r2, [r1, #4]
 8004444:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004448:	4322      	orrs	r2, r4
 800444a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800444c:	06dc      	lsls	r4, r3, #27
 800444e:	d506      	bpl.n	800445e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004450:	6801      	ldr	r1, [r0, #0]
 8004452:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004454:	688a      	ldr	r2, [r1, #8]
 8004456:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800445a:	4322      	orrs	r2, r4
 800445c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800445e:	0699      	lsls	r1, r3, #26
 8004460:	d506      	bpl.n	8004470 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004462:	6801      	ldr	r1, [r0, #0]
 8004464:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004466:	688a      	ldr	r2, [r1, #8]
 8004468:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800446c:	4322      	orrs	r2, r4
 800446e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004470:	065a      	lsls	r2, r3, #25
 8004472:	d509      	bpl.n	8004488 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004474:	6801      	ldr	r1, [r0, #0]
 8004476:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004478:	684a      	ldr	r2, [r1, #4]
 800447a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800447e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004480:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004484:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004486:	d00b      	beq.n	80044a0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	d506      	bpl.n	800449a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800448c:	6802      	ldr	r2, [r0, #0]
 800448e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004490:	6853      	ldr	r3, [r2, #4]
 8004492:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004496:	430b      	orrs	r3, r1
 8004498:	6053      	str	r3, [r2, #4]
}
 800449a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a0:	684a      	ldr	r2, [r1, #4]
 80044a2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80044a4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80044a8:	4322      	orrs	r2, r4
 80044aa:	604a      	str	r2, [r1, #4]
 80044ac:	e7ec      	b.n	8004488 <UART_AdvFeatureConfig+0x88>
 80044ae:	bf00      	nop

080044b0 <UART_CheckIdleState>:
{
 80044b0:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	2300      	movs	r3, #0
{
 80044b4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80044ba:	f7fd f873 	bl	80015a4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80044c4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044c6:	d40e      	bmi.n	80044e6 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	0759      	lsls	r1, r3, #29
 80044cc:	d42f      	bmi.n	800452e <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ce:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80044d0:	2220      	movs	r2, #32
 80044d2:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 80044d4:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80044d6:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044dc:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 80044de:	2300      	movs	r3, #0
 80044e0:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e6:	69d3      	ldr	r3, [r2, #28]
 80044e8:	0298      	lsls	r0, r3, #10
 80044ea:	d4ed      	bmi.n	80044c8 <UART_CheckIdleState+0x18>
 80044ec:	e00c      	b.n	8004508 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	0749      	lsls	r1, r1, #29
 80044f2:	461a      	mov	r2, r3
 80044f4:	d505      	bpl.n	8004502 <UART_CheckIdleState+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044f6:	69d9      	ldr	r1, [r3, #28]
 80044f8:	0708      	lsls	r0, r1, #28
 80044fa:	d449      	bmi.n	8004590 <UART_CheckIdleState+0xe0>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044fc:	69d9      	ldr	r1, [r3, #28]
 80044fe:	0509      	lsls	r1, r1, #20
 8004500:	d474      	bmi.n	80045ec <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	0298      	lsls	r0, r3, #10
 8004506:	d4df      	bmi.n	80044c8 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7fd f84c 	bl	80015a4 <HAL_GetTick>
 800450c:	1b43      	subs	r3, r0, r5
 800450e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004512:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	d3eb      	bcc.n	80044ee <UART_CheckIdleState+0x3e>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800451a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	e843 2100 	strex	r1, r2, [r3]
 8004522:	2900      	cmp	r1, #0
 8004524:	d1f7      	bne.n	8004516 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8004526:	2320      	movs	r3, #32
 8004528:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800452a:	2003      	movs	r0, #3
 800452c:	e7d7      	b.n	80044de <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452e:	69d3      	ldr	r3, [r2, #28]
 8004530:	025b      	lsls	r3, r3, #9
 8004532:	d4cc      	bmi.n	80044ce <UART_CheckIdleState+0x1e>
 8004534:	e00d      	b.n	8004552 <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	0750      	lsls	r0, r2, #29
 800453a:	d507      	bpl.n	800454c <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	0711      	lsls	r1, r2, #28
 8004540:	f100 8082 	bmi.w	8004648 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	0512      	lsls	r2, r2, #20
 8004548:	f100 80ac 	bmi.w	80046a4 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	d4bd      	bmi.n	80044ce <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fd f827 	bl	80015a4 <HAL_GetTick>
 8004556:	1b43      	subs	r3, r0, r5
 8004558:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	d3ea      	bcc.n	8004536 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004564:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	e843 2100 	strex	r1, r2, [r3]
 800456c:	2900      	cmp	r1, #0
 800456e:	d1f7      	bne.n	8004560 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	f103 0208 	add.w	r2, r3, #8
 8004574:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004578:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	f103 0008 	add.w	r0, r3, #8
 8004580:	e840 2100 	strex	r1, r2, [r0]
 8004584:	2900      	cmp	r1, #0
 8004586:	d1f3      	bne.n	8004570 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8004588:	2320      	movs	r3, #32
 800458a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800458e:	e7cc      	b.n	800452a <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004590:	2208      	movs	r2, #8
 8004592:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004598:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	e843 2100 	strex	r1, r2, [r3]
 80045a0:	2900      	cmp	r1, #0
 80045a2:	d1f7      	bne.n	8004594 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	f103 0208 	add.w	r2, r3, #8
 80045a8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	f103 0008 	add.w	r0, r3, #8
 80045b4:	e840 2100 	strex	r1, r2, [r0]
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d1f3      	bne.n	80045a4 <UART_CheckIdleState+0xf4>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80045be:	2a01      	cmp	r2, #1
 80045c0:	d00b      	beq.n	80045da <UART_CheckIdleState+0x12a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045c6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045cc:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ce:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80045d0:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045d4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80045d8:	e79d      	b.n	8004516 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	e843 2100 	strex	r1, r2, [r3]
 80045e6:	2900      	cmp	r1, #0
 80045e8:	d1f7      	bne.n	80045da <UART_CheckIdleState+0x12a>
 80045ea:	e7ea      	b.n	80045c2 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045f0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	e843 2100 	strex	r1, r2, [r3]
 80045fe:	2900      	cmp	r1, #0
 8004600:	d1f7      	bne.n	80045f2 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	f103 0208 	add.w	r2, r3, #8
 8004606:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	f103 0008 	add.w	r0, r3, #8
 8004612:	e840 2100 	strex	r1, r2, [r0]
 8004616:	2900      	cmp	r1, #0
 8004618:	d1f3      	bne.n	8004602 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800461c:	2a01      	cmp	r2, #1
 800461e:	d00a      	beq.n	8004636 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004622:	2120      	movs	r1, #32
 8004624:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004628:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800462c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004630:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004634:	e76f      	b.n	8004516 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	e843 2100 	strex	r1, r2, [r3]
 8004642:	2900      	cmp	r1, #0
 8004644:	d1f7      	bne.n	8004636 <UART_CheckIdleState+0x186>
 8004646:	e7eb      	b.n	8004620 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004648:	2208      	movs	r2, #8
 800464a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004650:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	e843 2100 	strex	r1, r2, [r3]
 8004658:	2900      	cmp	r1, #0
 800465a:	d1f7      	bne.n	800464c <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	f103 0208 	add.w	r2, r3, #8
 8004660:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004664:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	f103 0008 	add.w	r0, r3, #8
 800466c:	e840 2100 	strex	r1, r2, [r0]
 8004670:	2900      	cmp	r1, #0
 8004672:	d1f3      	bne.n	800465c <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004674:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004676:	2a01      	cmp	r2, #1
 8004678:	d00b      	beq.n	8004692 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800467e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004680:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004684:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004688:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800468c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004690:	e766      	b.n	8004560 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004696:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	e843 2100 	strex	r1, r2, [r3]
 800469e:	2900      	cmp	r1, #0
 80046a0:	d1f7      	bne.n	8004692 <UART_CheckIdleState+0x1e2>
 80046a2:	e7ea      	b.n	800467a <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046a8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ae:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	e843 2100 	strex	r1, r2, [r3]
 80046b6:	2900      	cmp	r1, #0
 80046b8:	d1f7      	bne.n	80046aa <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	f103 0208 	add.w	r2, r3, #8
 80046be:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	f103 0008 	add.w	r0, r3, #8
 80046ca:	e840 2100 	strex	r1, r2, [r0]
 80046ce:	2900      	cmp	r1, #0
 80046d0:	d1f3      	bne.n	80046ba <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80046d4:	2a01      	cmp	r2, #1
 80046d6:	d00a      	beq.n	80046ee <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80046da:	2120      	movs	r1, #32
 80046dc:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80046e0:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80046e4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046e8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80046ec:	e738      	b.n	8004560 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	e843 2100 	strex	r1, r2, [r3]
 80046fa:	2900      	cmp	r1, #0
 80046fc:	d1f7      	bne.n	80046ee <UART_CheckIdleState+0x23e>
 80046fe:	e7eb      	b.n	80046d8 <UART_CheckIdleState+0x228>

08004700 <HAL_UART_Init>:
  if (huart == NULL)
 8004700:	2800      	cmp	r0, #0
 8004702:	f000 80b9 	beq.w	8004878 <HAL_UART_Init+0x178>
{
 8004706:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004708:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800470a:	4604      	mov	r4, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d072      	beq.n	80047f6 <HAL_UART_Init+0xf6>
  __HAL_UART_DISABLE(huart);
 8004710:	6825      	ldr	r5, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004712:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	2324      	movs	r3, #36	@ 0x24
 8004716:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004720:	2a00      	cmp	r2, #0
 8004722:	d164      	bne.n	80047ee <HAL_UART_Init+0xee>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004724:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8004728:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800472a:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800472c:	430b      	orrs	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004732:	4a7b      	ldr	r2, [pc, #492]	@ (8004920 <HAL_UART_Init+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004734:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004736:	4002      	ands	r2, r0
 8004738:	4313      	orrs	r3, r2
 800473a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473c:	686b      	ldr	r3, [r5, #4]
 800473e:	68e2      	ldr	r2, [r4, #12]
 8004740:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004744:	4313      	orrs	r3, r2
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004746:	4a77      	ldr	r2, [pc, #476]	@ (8004924 <HAL_UART_Init+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004748:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800474a:	4295      	cmp	r5, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800474e:	68aa      	ldr	r2, [r5, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004750:	d033      	beq.n	80047ba <HAL_UART_Init+0xba>
    tmpreg |= huart->Init.OneBitSampling;
 8004752:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004754:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8004758:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800475a:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 800475c:	4a72      	ldr	r2, [pc, #456]	@ (8004928 <HAL_UART_Init+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800475e:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004760:	4295      	cmp	r5, r2
 8004762:	d116      	bne.n	8004792 <HAL_UART_Init+0x92>
 8004764:	4b71      	ldr	r3, [pc, #452]	@ (800492c <HAL_UART_Init+0x22c>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d04e      	beq.n	8004810 <HAL_UART_Init+0x110>
 8004772:	2b03      	cmp	r3, #3
 8004774:	d072      	beq.n	800485c <HAL_UART_Init+0x15c>
 8004776:	2b01      	cmp	r3, #1
 8004778:	d076      	beq.n	8004868 <HAL_UART_Init+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800477e:	f000 80a0 	beq.w	80048c2 <HAL_UART_Init+0x1c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004782:	f7fe fcbd 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004786:	2800      	cmp	r0, #0
 8004788:	d147      	bne.n	800481a <HAL_UART_Init+0x11a>
  huart->RxISR = NULL;
 800478a:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	e053      	b.n	800483a <HAL_UART_Init+0x13a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004792:	4b67      	ldr	r3, [pc, #412]	@ (8004930 <HAL_UART_Init+0x230>)
 8004794:	429d      	cmp	r5, r3
 8004796:	d125      	bne.n	80047e4 <HAL_UART_Init+0xe4>
 8004798:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d81d      	bhi.n	80047e4 <HAL_UART_Init+0xe4>
 80047a8:	e8df f003 	tbb	[pc, r3]
 80047ac:	1c1c1c83 	.word	0x1c1c1c83
 80047b0:	1c1c1c5e 	.word	0x1c1c1c5e
 80047b4:	1c1c1c32 	.word	0x1c1c1c32
 80047b8:	58          	.byte	0x58
 80047b9:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ba:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80047be:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047c0:	495a      	ldr	r1, [pc, #360]	@ (800492c <HAL_UART_Init+0x22c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c2:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047c4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80047c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047d0:	d116      	bne.n	8004800 <HAL_UART_Init+0x100>
        pclk = (uint32_t) HSI_VALUE;
 80047d2:	4858      	ldr	r0, [pc, #352]	@ (8004934 <HAL_UART_Init+0x234>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047d4:	6862      	ldr	r2, [r4, #4]
 80047d6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80047da:	4283      	cmp	r3, r0
 80047dc:	d802      	bhi.n	80047e4 <HAL_UART_Init+0xe4>
 80047de:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80047e2:	d951      	bls.n	8004888 <HAL_UART_Init+0x188>
  huart->RxISR = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80047ea:	2001      	movs	r0, #1
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
    UART_AdvFeatureConfig(huart);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff fe06 	bl	8004400 <UART_AdvFeatureConfig>
 80047f4:	e796      	b.n	8004724 <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 80047f6:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80047fa:	f7fc fe19 	bl	8001430 <HAL_UART_MspInit>
 80047fe:	e787      	b.n	8004710 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004800:	d83c      	bhi.n	800487c <HAL_UART_Init+0x17c>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d07b      	beq.n	80048fe <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 8004806:	f7fe f851 	bl	80028ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800480a:	2800      	cmp	r0, #0
 800480c:	d0bd      	beq.n	800478a <HAL_UART_Init+0x8a>
 800480e:	e7e1      	b.n	80047d4 <HAL_UART_Init+0xd4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004810:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004814:	f000 8082 	beq.w	800491c <HAL_UART_Init+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4846      	ldr	r0, [pc, #280]	@ (8004934 <HAL_UART_Init+0x234>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481a:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004820:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004824:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004828:	f1a0 0310 	sub.w	r3, r0, #16
 800482c:	4293      	cmp	r3, r2
 800482e:	d8d9      	bhi.n	80047e4 <HAL_UART_Init+0xe4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004830:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8004832:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004834:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8004836:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483a:	6853      	ldr	r3, [r2, #4]
 800483c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004840:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004842:	6893      	ldr	r3, [r2, #8]
 8004844:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004848:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	f043 0301 	orr.w	r3, r3, #1
  return (UART_CheckIdleState(huart));
 8004850:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004852:	6013      	str	r3, [r2, #0]
}
 8004854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8004858:	f7ff be2a 	b.w	80044b0 <UART_CheckIdleState>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004860:	d059      	beq.n	8004916 <HAL_UART_Init+0x216>
        pclk = (uint32_t) LSE_VALUE;
 8004862:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004866:	e7d8      	b.n	800481a <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004868:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800486c:	d04d      	beq.n	800490a <HAL_UART_Init+0x20a>
        pclk = HAL_RCC_GetSysClockFreq();
 800486e:	f7fe f81d 	bl	80028ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004872:	2800      	cmp	r0, #0
 8004874:	d1d1      	bne.n	800481a <HAL_UART_Init+0x11a>
 8004876:	e788      	b.n	800478a <HAL_UART_Init+0x8a>
}
 8004878:	2001      	movs	r0, #1
 800487a:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800487c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004880:	d1b0      	bne.n	80047e4 <HAL_UART_Init+0xe4>
        pclk = (uint32_t) LSE_VALUE;
 8004882:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004886:	e7a5      	b.n	80047d4 <HAL_UART_Init+0xd4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004888:	2500      	movs	r5, #0
 800488a:	0853      	lsrs	r3, r2, #1
 800488c:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 8004890:	4629      	mov	r1, r5
 8004892:	fbe0 310c 	umlal	r3, r1, r0, ip
 8004896:	4618      	mov	r0, r3
 8004898:	462b      	mov	r3, r5
 800489a:	f7fb fce9 	bl	8000270 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800489e:	4b26      	ldr	r3, [pc, #152]	@ (8004938 <HAL_UART_Init+0x238>)
 80048a0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d89d      	bhi.n	80047e4 <HAL_UART_Init+0xe4>
          huart->Instance->BRR = usartdiv;
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80048ac:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
  return ret;
 80048b0:	e7c3      	b.n	800483a <HAL_UART_Init+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80048b6:	d02b      	beq.n	8004910 <HAL_UART_Init+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b8:	f7fe fc10 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80048bc:	2800      	cmp	r0, #0
 80048be:	d1ac      	bne.n	800481a <HAL_UART_Init+0x11a>
 80048c0:	e763      	b.n	800478a <HAL_UART_Init+0x8a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c2:	f7fe fc1d 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80048c6:	2800      	cmp	r0, #0
 80048c8:	f43f af5f 	beq.w	800478a <HAL_UART_Init+0x8a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048cc:	0043      	lsls	r3, r0, #1
 80048ce:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80048d8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048dc:	f1a3 0210 	sub.w	r2, r3, #16
 80048e0:	428a      	cmp	r2, r1
 80048e2:	f63f af7f 	bhi.w	80047e4 <HAL_UART_Init+0xe4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e6:	f023 010f 	bic.w	r1, r3, #15
 80048ea:	b289      	uxth	r1, r1
        huart->Instance->BRR = brrtemp;
 80048ec:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80048f2:	430b      	orrs	r3, r1
  huart->RxISR = NULL;
 80048f4:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80048f6:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80048f8:	e9c4 111a 	strd	r1, r1, [r4, #104]	@ 0x68
  return ret;
 80048fc:	e79d      	b.n	800483a <HAL_UART_Init+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80048fe:	f7fe fbed 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004902:	2800      	cmp	r0, #0
 8004904:	f43f af41 	beq.w	800478a <HAL_UART_Init+0x8a>
 8004908:	e764      	b.n	80047d4 <HAL_UART_Init+0xd4>
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7fd ffcf 	bl	80028ac <HAL_RCC_GetSysClockFreq>
        break;
 800490e:	e7da      	b.n	80048c6 <HAL_UART_Init+0x1c6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fbe4 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
        break;
 8004914:	e7d7      	b.n	80048c6 <HAL_UART_Init+0x1c6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004916:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800491a:	e7d8      	b.n	80048ce <HAL_UART_Init+0x1ce>
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <HAL_UART_Init+0x23c>)
 800491e:	e7d6      	b.n	80048ce <HAL_UART_Init+0x1ce>
 8004920:	efff69f3 	.word	0xefff69f3
 8004924:	40008000 	.word	0x40008000
 8004928:	40013800 	.word	0x40013800
 800492c:	40021000 	.word	0x40021000
 8004930:	40004400 	.word	0x40004400
 8004934:	00f42400 	.word	0x00f42400
 8004938:	000ffcff 	.word	0x000ffcff
 800493c:	01e84800 	.word	0x01e84800

08004940 <ADC_AverageValue>:
{
		Currents avg;
		uint32_t sum1=0, sum2=0;
		for(uint8_t i=0;i<BATCH_DATA_LEN;i += 2)
		{
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004940:	4924      	ldr	r1, [pc, #144]	@ (80049d4 <ADC_AverageValue+0x94>)
 8004942:	680b      	ldr	r3, [r1, #0]
{
 8004944:	b410      	push	{r4}
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004946:	688c      	ldr	r4, [r1, #8]
 8004948:	eb03 0c04 	add.w	ip, r3, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 800494c:	68cc      	ldr	r4, [r1, #12]
 800494e:	684b      	ldr	r3, [r1, #4]
 8004950:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004952:	690c      	ldr	r4, [r1, #16]
 8004954:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 8004956:	694c      	ldr	r4, [r1, #20]
 8004958:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 800495a:	698c      	ldr	r4, [r1, #24]
 800495c:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 800495e:	69cc      	ldr	r4, [r1, #28]
 8004960:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004962:	6a0c      	ldr	r4, [r1, #32]
 8004964:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 8004966:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8004968:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 800496a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800496c:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 800496e:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8004970:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004972:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8004974:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 8004976:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8004978:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 800497a:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
 800497c:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 800497e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8004980:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004982:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8004984:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 8004986:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8004988:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 800498a:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 800498c:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 800498e:	6ccc      	ldr	r4, [r1, #76]	@ 0x4c
 8004990:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 8004992:	6d0c      	ldr	r4, [r1, #80]	@ 0x50
 8004994:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 8004996:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8004998:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 800499a:	6d8c      	ldr	r4, [r1, #88]	@ 0x58
 800499c:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 800499e:	6dcc      	ldr	r4, [r1, #92]	@ 0x5c
 80049a0:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 80049a2:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 80049a4:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 80049a6:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 80049a8:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 80049aa:	6e8c      	ldr	r4, [r1, #104]	@ 0x68
 80049ac:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 80049ae:	6ecc      	ldr	r4, [r1, #108]	@ 0x6c
 80049b0:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 80049b2:	6f0c      	ldr	r4, [r1, #112]	@ 0x70
 80049b4:	44a4      	add	ip, r4
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 80049b6:	6f4c      	ldr	r4, [r1, #116]	@ 0x74
 80049b8:	4423      	add	r3, r4
 80049ba:	6fcc      	ldr	r4, [r1, #124]	@ 0x7c
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 80049bc:	6f89      	ldr	r1, [r1, #120]	@ 0x78
			sum2 += DataBuffer[i + 1]; // Channel6 (IADC2)
 80049be:	4423      	add	r3, r4
			sum1 += DataBuffer[i];     // Channel5 (IADC1)
 80049c0:	4461      	add	r1, ip
		}
		avg.IADC1 = (sum1 >> 4);
		avg.IADC2 = (sum2 >> 4);
 80049c2:	f3c3 130f 	ubfx	r3, r3, #4, #16
		avg.IADC1 = (sum1 >> 4);
 80049c6:	0909      	lsrs	r1, r1, #4
		return avg;
}
 80049c8:	f85d 4b04 	ldr.w	r4, [sp], #4
		avg.IADC1 = (sum1 >> 4);
 80049cc:	8181      	strh	r1, [r0, #12]
		return avg;
 80049ce:	81c3      	strh	r3, [r0, #14]
}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000510 	.word	0x20000510

080049d8 <Update_Current_Offset>:
static int16_t adc1max = 0, adc2max = 0;
static int16_t adc1min = 0, adc2min = 0;
static int16_t Ioffset1, Ioffset2, adc_offset1, adc_offset2;

Currents Update_Current_Offset(Currents *adc_avg,Currents *Idq,uint16_t msecCnt)
{
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Currents Ioffset;

    if (offset_count >= OFFSET_WINDOW) {
 80049dc:	4d5b      	ldr	r5, [pc, #364]	@ (8004b4c <Update_Current_Offset+0x174>)
        offset_sum1 -= offset_buf1[offset_index];
 80049de:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8004b78 <Update_Current_Offset+0x1a0>
    if (offset_count >= OFFSET_WINDOW) {
 80049e2:	f8b5 e000 	ldrh.w	lr, [r5]
        offset_sum1 -= offset_buf1[offset_index];
 80049e6:	f8df 8194 	ldr.w	r8, [pc, #404]	@ 8004b7c <Update_Current_Offset+0x1a4>
{
 80049ea:	b083      	sub	sp, #12
 80049ec:	4689      	mov	r9, r1
        offset_sum2 -= offset_buf2[offset_index];
 80049ee:	4958      	ldr	r1, [pc, #352]	@ (8004b50 <Update_Current_Offset+0x178>)
{
 80049f0:	9201      	str	r2, [sp, #4]
    if (offset_count >= OFFSET_WINDOW) {
 80049f2:	f1be 0f31 	cmp.w	lr, #49	@ 0x31
        offset_sum1 -= offset_buf1[offset_index];
 80049f6:	f8da 2000 	ldr.w	r2, [sl]
 80049fa:	f8b8 c000 	ldrh.w	ip, [r8]
        offset_sum2 -= offset_buf2[offset_index];
 80049fe:	680c      	ldr	r4, [r1, #0]
    if (offset_count >= OFFSET_WINDOW) {
 8004a00:	f240 8085 	bls.w	8004b0e <Update_Current_Offset+0x136>
        offset_sum1 -= offset_buf1[offset_index];
 8004a04:	4d53      	ldr	r5, [pc, #332]	@ (8004b54 <Update_Current_Offset+0x17c>)
        offset_sum2 -= offset_buf2[offset_index];
 8004a06:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8004b80 <Update_Current_Offset+0x1a8>
        offset_sum1 -= offset_buf1[offset_index];
 8004a0a:	f935 601c 	ldrsh.w	r6, [r5, ip, lsl #1]
 8004a0e:	1b92      	subs	r2, r2, r6
        offset_sum2 -= offset_buf2[offset_index];
 8004a10:	f93b 601c 	ldrsh.w	r6, [fp, ip, lsl #1]
 8004a14:	1ba4      	subs	r4, r4, r6
    }else {
    	offset_count++;
    }

    offset_buf1[offset_index] = adc_avg->IADC1;
 8004a16:	f8b9 600c 	ldrh.w	r6, [r9, #12]
 8004a1a:	f825 601c 	strh.w	r6, [r5, ip, lsl #1]
    offset_buf2[offset_index] = adc_avg->IADC2;
 8004a1e:	f8b9 500e 	ldrh.w	r5, [r9, #14]
    offset_sum2 += adc_avg->IADC2;
    offset_index = (offset_index + 1) % OFFSET_WINDOW;

    /*** offset變動時重置極值 ***/
	Ioffset_temp = offset_sum1 / offset_count;
    if (abs(Ioffset_temp - Ioffset_prev) >10){
 8004a22:	4f4d      	ldr	r7, [pc, #308]	@ (8004b58 <Update_Current_Offset+0x180>)
    offset_buf2[offset_index] = adc_avg->IADC2;
 8004a24:	f82b 501c 	strh.w	r5, [fp, ip, lsl #1]
    offset_sum2 += adc_avg->IADC2;
 8004a28:	442c      	add	r4, r5
 8004a2a:	600c      	str	r4, [r1, #0]
    offset_index = (offset_index + 1) % OFFSET_WINDOW;
 8004a2c:	494b      	ldr	r1, [pc, #300]	@ (8004b5c <Update_Current_Offset+0x184>)
 8004a2e:	f10c 0901 	add.w	r9, ip, #1
    offset_sum1 += adc_avg->IADC1;
 8004a32:	4432      	add	r2, r6
    offset_index = (offset_index + 1) % OFFSET_WINDOW;
 8004a34:	fba1 1c09 	umull	r1, ip, r1, r9
    if (abs(Ioffset_temp - Ioffset_prev) >10){
 8004a38:	f9b7 1000 	ldrsh.w	r1, [r7]
    offset_sum1 += adc_avg->IADC1;
 8004a3c:	f8ca 2000 	str.w	r2, [sl]
	Ioffset_temp = offset_sum1 / offset_count;
 8004a40:	fb92 f2fe 	sdiv	r2, r2, lr
 8004a44:	fa0f fa82 	sxth.w	sl, r2
    if (abs(Ioffset_temp - Ioffset_prev) >10){
 8004a48:	ebaa 0101 	sub.w	r1, sl, r1
 8004a4c:	2900      	cmp	r1, #0
    offset_index = (offset_index + 1) % OFFSET_WINDOW;
 8004a4e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    if (abs(Ioffset_temp - Ioffset_prev) >10){
 8004a52:	bfb8      	it	lt
 8004a54:	4249      	neglt	r1, r1
    offset_index = (offset_index + 1) % OFFSET_WINDOW;
 8004a56:	f04f 0b32 	mov.w	fp, #50	@ 0x32
 8004a5a:	fb0b 9c1c 	mls	ip, fp, ip, r9
    if (abs(Ioffset_temp - Ioffset_prev) >10){
 8004a5e:	290a      	cmp	r1, #10
    offset_index = (offset_index + 1) % OFFSET_WINDOW;
 8004a60:	f8a8 c000 	strh.w	ip, [r8]
    if (abs(Ioffset_temp - Ioffset_prev) >10){
 8004a64:	dd10      	ble.n	8004a88 <Update_Current_Offset+0xb0>
    	adc1max = 0; adc1min = 0;
 8004a66:	f8df b100 	ldr.w	fp, [pc, #256]	@ 8004b68 <Update_Current_Offset+0x190>
 8004a6a:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8004b6c <Update_Current_Offset+0x194>
    	adc2max = 0; adc2min = 0;
 8004a6e:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8004b70 <Update_Current_Offset+0x198>
 8004a72:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8004b74 <Update_Current_Offset+0x19c>
    	adc1max = 0; adc1min = 0;
 8004a76:	2100      	movs	r1, #0
 8004a78:	f8ab 1000 	strh.w	r1, [fp]
 8004a7c:	f8a9 1000 	strh.w	r1, [r9]
    	adc2max = 0; adc2min = 0;
 8004a80:	f8a8 1000 	strh.w	r1, [r8]
 8004a84:	f8ac 1000 	strh.w	r1, [ip]
    }
    Ioffset_prev = Ioffset_temp;

    /*** 決定 offset 來源 ***/
    if (offset_count < OFFSET_WINDOW) {
 8004a88:	f1be 0f31 	cmp.w	lr, #49	@ 0x31
    Ioffset_prev = Ioffset_temp;
 8004a8c:	f8a7 a000 	strh.w	sl, [r7]
    if (offset_count < OFFSET_WINDOW) {
 8004a90:	d830      	bhi.n	8004af4 <Update_Current_Offset+0x11c>
        // 初期靜態offset
    	Ioffset1 = offset_sum1 / offset_count;
    	Ioffset2 = offset_sum2 / offset_count;
 8004a92:	fb94 f4fe 	sdiv	r4, r4, lr
    	Ioffset1 = offset_sum1 / offset_count;
 8004a96:	4932      	ldr	r1, [pc, #200]	@ (8004b60 <Update_Current_Offset+0x188>)
 8004a98:	f8a1 a000 	strh.w	sl, [r1]
    	Ioffset2 = offset_sum2 / offset_count;
 8004a9c:	4931      	ldr	r1, [pc, #196]	@ (8004b64 <Update_Current_Offset+0x18c>)
        Ioffset.IADC1 = Ioffset1;
 8004a9e:	b292      	uxth	r2, r2
    	Ioffset2 = offset_sum2 / offset_count;
 8004aa0:	800c      	strh	r4, [r1, #0]
        Ioffset.IADC2 = Ioffset2;
 8004aa2:	b2a4      	uxth	r4, r4
 8004aa4:	4627      	mov	r7, r4
 8004aa6:	4694      	mov	ip, r2
            Ioffset.IADC1 = Ioffset1;
            Ioffset.IADC2 = Ioffset2;
        }
    }
    /*** 極值中點法 ***/
    if (msecCnt > 3000){  //馬達啟動過程再偵測極值，避免錯誤
 8004aa8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004aac:	428b      	cmp	r3, r1
 8004aae:	d91c      	bls.n	8004aea <Update_Current_Offset+0x112>
        adc1_diff = adc_avg->IADC1 - Ioffset1;
        adc2_diff = adc_avg->IADC2 - Ioffset2;
        if (adc1_diff > adc1max) adc1max = adc1_diff;
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b68 <Update_Current_Offset+0x190>)
        adc1_diff = adc_avg->IADC1 - Ioffset1;
 8004ab2:	eba6 060c 	sub.w	r6, r6, ip
        if (adc1_diff > adc1max) adc1max = adc1_diff;
 8004ab6:	f9b3 1000 	ldrsh.w	r1, [r3]
        adc1_diff = adc_avg->IADC1 - Ioffset1;
 8004aba:	b236      	sxth	r6, r6
        if (adc1_diff > adc1max) adc1max = adc1_diff;
 8004abc:	42b1      	cmp	r1, r6
 8004abe:	bfb8      	it	lt
 8004ac0:	801e      	strhlt	r6, [r3, #0]
        if (adc1_diff < adc1min) adc1min = adc1_diff;
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b6c <Update_Current_Offset+0x194>)
 8004ac4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ac8:	42b1      	cmp	r1, r6
 8004aca:	bfc8      	it	gt
 8004acc:	801e      	strhgt	r6, [r3, #0]
        if (adc2_diff > adc2max) adc2max = adc2_diff;
 8004ace:	4b28      	ldr	r3, [pc, #160]	@ (8004b70 <Update_Current_Offset+0x198>)
        adc2_diff = adc_avg->IADC2 - Ioffset2;
 8004ad0:	1bed      	subs	r5, r5, r7
        if (adc2_diff > adc2max) adc2max = adc2_diff;
 8004ad2:	f9b3 1000 	ldrsh.w	r1, [r3]
        adc2_diff = adc_avg->IADC2 - Ioffset2;
 8004ad6:	b22d      	sxth	r5, r5
        if (adc2_diff > adc2max) adc2max = adc2_diff;
 8004ad8:	42a9      	cmp	r1, r5
 8004ada:	bfb8      	it	lt
 8004adc:	801d      	strhlt	r5, [r3, #0]
        if (adc2_diff < adc2min) adc2min = adc2_diff;
 8004ade:	4b25      	ldr	r3, [pc, #148]	@ (8004b74 <Update_Current_Offset+0x19c>)
 8004ae0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ae4:	42a9      	cmp	r1, r5
 8004ae6:	bfc8      	it	gt
 8004ae8:	801d      	strhgt	r5, [r3, #0]

    }

    return Ioffset;
 8004aea:	8182      	strh	r2, [r0, #12]
 8004aec:	81c4      	strh	r4, [r0, #14]
}
 8004aee:	b003      	add	sp, #12
 8004af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (Idq->iq < 200){
 8004af4:	9a01      	ldr	r2, [sp, #4]
        Ioffset.IADC1 = Ioffset1 + adc_offset1;
 8004af6:	491a      	ldr	r1, [pc, #104]	@ (8004b60 <Update_Current_Offset+0x188>)
        if (Idq->iq < 200){
 8004af8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        Ioffset.IADC1 = Ioffset1 + adc_offset1;
 8004afc:	f8b1 c000 	ldrh.w	ip, [r1]
        Ioffset.IADC2 = Ioffset2 + adc_offset2;
 8004b00:	4918      	ldr	r1, [pc, #96]	@ (8004b64 <Update_Current_Offset+0x18c>)
        if (Idq->iq < 200){
 8004b02:	2ac7      	cmp	r2, #199	@ 0xc7
        Ioffset.IADC2 = Ioffset2 + adc_offset2;
 8004b04:	880f      	ldrh	r7, [r1, #0]
        if (Idq->iq < 200){
 8004b06:	dc0c      	bgt.n	8004b22 <Update_Current_Offset+0x14a>
            Ioffset.IADC2 = Ioffset2;
 8004b08:	463c      	mov	r4, r7
            Ioffset.IADC1 = Ioffset1;
 8004b0a:	4662      	mov	r2, ip
 8004b0c:	e7cc      	b.n	8004aa8 <Update_Current_Offset+0xd0>
    	offset_count++;
 8004b0e:	f10e 0e01 	add.w	lr, lr, #1
 8004b12:	fa1f fe8e 	uxth.w	lr, lr
 8004b16:	f8a5 e000 	strh.w	lr, [r5]
 8004b1a:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8004b80 <Update_Current_Offset+0x1a8>
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b54 <Update_Current_Offset+0x17c>)
 8004b20:	e779      	b.n	8004a16 <Update_Current_Offset+0x3e>
    	adc_offset1 = (adc1max + adc1min) >> 1;
 8004b22:	4a11      	ldr	r2, [pc, #68]	@ (8004b68 <Update_Current_Offset+0x190>)
 8004b24:	4911      	ldr	r1, [pc, #68]	@ (8004b6c <Update_Current_Offset+0x194>)
 8004b26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004b2a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004b2e:	440a      	add	r2, r1
    	adc_offset2 = (adc2max + adc2min) >> 1;
 8004b30:	490f      	ldr	r1, [pc, #60]	@ (8004b70 <Update_Current_Offset+0x198>)
 8004b32:	f9b1 4000 	ldrsh.w	r4, [r1]
 8004b36:	490f      	ldr	r1, [pc, #60]	@ (8004b74 <Update_Current_Offset+0x19c>)
 8004b38:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004b3c:	440c      	add	r4, r1
        Ioffset.IADC1 = Ioffset1 + adc_offset1;
 8004b3e:	eb0c 0262 	add.w	r2, ip, r2, asr #1
        Ioffset.IADC2 = Ioffset2 + adc_offset2;
 8004b42:	eb07 0464 	add.w	r4, r7, r4, asr #1
        Ioffset.IADC1 = Ioffset1 + adc_offset1;
 8004b46:	b292      	uxth	r2, r2
        Ioffset.IADC2 = Ioffset2 + adc_offset2;
 8004b48:	b2a4      	uxth	r4, r4
 8004b4a:	e7ad      	b.n	8004aa8 <Update_Current_Offset+0xd0>
 8004b4c:	2000043a 	.word	0x2000043a
 8004b50:	20000508 	.word	0x20000508
 8004b54:	200004a4 	.word	0x200004a4
 8004b58:	20000438 	.word	0x20000438
 8004b5c:	51eb851f 	.word	0x51eb851f
 8004b60:	2000042e 	.word	0x2000042e
 8004b64:	2000042c 	.word	0x2000042c
 8004b68:	20000436 	.word	0x20000436
 8004b6c:	20000432 	.word	0x20000432
 8004b70:	20000434 	.word	0x20000434
 8004b74:	20000430 	.word	0x20000430
 8004b78:	2000050c 	.word	0x2000050c
 8004b7c:	2000043c 	.word	0x2000043c
 8004b80:	20000440 	.word	0x20000440

08004b84 <Get_Phase_Currents>:
Currents Get_Phase_Currents(Currents *adc_avg, Currents *ioffset)
{
	Currents iab;

	iab.ia = adc_avg->IADC1-ioffset->IADC1;
	iab.ib = adc_avg->IADC2-ioffset->IADC2;
 8004b84:	89cb      	ldrh	r3, [r1, #14]
 8004b86:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	iab.ia = adc_avg->IADC1-ioffset->IADC1;
 8004b8a:	8989      	ldrh	r1, [r1, #12]
 8004b8c:	8992      	ldrh	r2, [r2, #12]
 8004b8e:	1a89      	subs	r1, r1, r2
	iab.ib = adc_avg->IADC2-ioffset->IADC2;
 8004b90:	eba3 020c 	sub.w	r2, r3, ip
	return iab;
 8004b94:	8001      	strh	r1, [r0, #0]
 8004b96:	8042      	strh	r2, [r0, #2]
}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop

08004b9c <Clarke>:
/****************** 座標轉換配置 ******************/
Currents Clarke(Currents *iab) {
    Currents output;

    // 小馬達 adc 軸實際為 -abc 軸，因此需將讀值加負號
    output.ialpha = -iab->ia;
 8004b9c:	f9b1 2000 	ldrsh.w	r2, [r1]
    output.ibeta = ((-iab->ia - 2 * iab->ib) * 1182) >> 11;
 8004ba0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8004ba4:	4251      	negs	r1, r2
 8004ba6:	eba1 0343 	sub.w	r3, r1, r3, lsl #1

    return output;
 8004baa:	8081      	strh	r1, [r0, #4]
    output.ibeta = ((-iab->ia - 2 * iab->ib) * 1182) >> 11;
 8004bac:	f240 419e 	movw	r1, #1182	@ 0x49e
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	f343 23cf 	sbfx	r3, r3, #11, #16
    return output;
 8004bb8:	80c3      	strh	r3, [r0, #6]
}
 8004bba:	4770      	bx	lr

08004bbc <Park>:

Currents Park(Currents *ialphabeta, uint16_t theta)
{
 8004bbc:	b530      	push	{r4, r5, lr}
    theta %= 10000;  // 角度一圈
 8004bbe:	4c27      	ldr	r4, [pc, #156]	@ (8004c5c <Park+0xa0>)
 8004bc0:	fba4 5302 	umull	r5, r3, r4, r2
 8004bc4:	0b5b      	lsrs	r3, r3, #13
 8004bc6:	f242 7510 	movw	r5, #10000	@ 0x2710
 8004bca:	fb05 2213 	mls	r2, r5, r3, r2
 8004bce:	b292      	uxth	r2, r2
    quadrant = theta / 2500;  // 判斷象限
 8004bd0:	fba4 3e02 	umull	r3, lr, r4, r2
 8004bd4:	ea4f 23de 	mov.w	r3, lr, lsr #11
    index = (theta % 2500) * 311 / 2500;
 8004bd8:	f640 15c4 	movw	r5, #2500	@ 0x9c4
    quadrant = theta / 2500;  // 判斷象限
 8004bdc:	469e      	mov	lr, r3
    index = (theta % 2500) * 311 / 2500;
 8004bde:	fb05 2313 	mls	r3, r5, r3, r2
 8004be2:	f240 1c37 	movw	ip, #311	@ 0x137
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	fb0c f303 	mul.w	r3, ip, r3
 8004bec:	fba4 4303 	umull	r4, r3, r4, r3
 8004bf0:	0adb      	lsrs	r3, r3, #11
            sin_val =  sintable[index];
 8004bf2:	4d1b      	ldr	r5, [pc, #108]	@ (8004c60 <Park+0xa4>)
            cos_val =  sintable[311 - index];
 8004bf4:	ebac 0403 	sub.w	r4, ip, r3
    switch (quadrant) {
 8004bf8:	f1be 0f01 	cmp.w	lr, #1
            sin_val =  sintable[index];
 8004bfc:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
            cos_val =  sintable[311 - index];
 8004c00:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    switch (quadrant) {
 8004c04:	d023      	beq.n	8004c4e <Park+0x92>
 8004c06:	f1be 0f02 	cmp.w	lr, #2
 8004c0a:	d018      	beq.n	8004c3e <Park+0x82>
 8004c0c:	f640 14c3 	movw	r4, #2499	@ 0x9c3
 8004c10:	42a2      	cmp	r2, r4
 8004c12:	d917      	bls.n	8004c44 <Park+0x88>
            sin_val = -sintable[311 - index];
 8004c14:	425b      	negs	r3, r3
 8004c16:	b21c      	sxth	r4, r3
            cos_val =  sintable[index];
 8004c18:	fa0f fc8c 	sxth.w	ip, ip
	Currents output;
	Triangles sincos;
	sincos = Tri_Function(theta);

	output.id = (ialphabeta->ialpha * sincos.cos + ialphabeta->ibeta * sincos.sin) >> 11;	 // Id = Ialpha*cos + Ibeta*sin
 8004c1c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8004c20:	f9b1 e004 	ldrsh.w	lr, [r1, #4]
 8004c24:	fb03 f204 	mul.w	r2, r3, r4
	output.iq = (-ialphabeta->ialpha * sincos.sin + ialphabeta->ibeta * sincos.cos) >> 11; // Iq = -Ialpha*sin + Ibeta*cos
 8004c28:	fb0c f303 	mul.w	r3, ip, r3
	output.id = (ialphabeta->ialpha * sincos.cos + ialphabeta->ibeta * sincos.sin) >> 11;	 // Id = Ialpha*cos + Ibeta*sin
 8004c2c:	fb0e 220c 	mla	r2, lr, ip, r2
	output.iq = (-ialphabeta->ialpha * sincos.sin + ialphabeta->ibeta * sincos.cos) >> 11; // Iq = -Ialpha*sin + Ibeta*cos
 8004c30:	fb0e 3314 	mls	r3, lr, r4, r3
	output.id = (ialphabeta->ialpha * sincos.cos + ialphabeta->ibeta * sincos.sin) >> 11;	 // Id = Ialpha*cos + Ibeta*sin
 8004c34:	12d2      	asrs	r2, r2, #11
	output.iq = (-ialphabeta->ialpha * sincos.sin + ialphabeta->ibeta * sincos.cos) >> 11; // Iq = -Ialpha*sin + Ibeta*cos
 8004c36:	12db      	asrs	r3, r3, #11
	output.id = (ialphabeta->ialpha * sincos.cos + ialphabeta->ibeta * sincos.sin) >> 11;	 // Id = Ialpha*cos + Ibeta*sin
 8004c38:	8102      	strh	r2, [r0, #8]
	output.iq = (-ialphabeta->ialpha * sincos.sin + ialphabeta->ibeta * sincos.cos) >> 11; // Iq = -Ialpha*sin + Ibeta*cos
 8004c3a:	8143      	strh	r3, [r0, #10]

	return output;
}
 8004c3c:	bd30      	pop	{r4, r5, pc}
            sin_val = -sintable[index];
 8004c3e:	f1cc 0c00 	rsb	ip, ip, #0
            cos_val = -sintable[311 - index];
 8004c42:	425b      	negs	r3, r3
            sin_val = -sintable[index];
 8004c44:	fa0f f48c 	sxth.w	r4, ip
            cos_val = -sintable[311 - index];
 8004c48:	fa0f fc83 	sxth.w	ip, r3
            break;
 8004c4c:	e7e6      	b.n	8004c1c <Park+0x60>
            cos_val = -sintable[index];
 8004c4e:	f1cc 0c00 	rsb	ip, ip, #0
            sin_val =  sintable[311 - index];
 8004c52:	b21c      	sxth	r4, r3
            cos_val = -sintable[index];
 8004c54:	fa0f fc8c 	sxth.w	ip, ip
            break;
 8004c58:	e7e0      	b.n	8004c1c <Park+0x60>
 8004c5a:	bf00      	nop
 8004c5c:	d1b71759 	.word	0xd1b71759
 8004c60:	08005e18 	.word	0x08005e18

08004c64 <Rev_Park>:

Voltages Rev_Park(Voltages vdq, uint16_t theta)
{
 8004c64:	b530      	push	{r4, r5, lr}
 8004c66:	b085      	sub	sp, #20
    theta %= 10000;  // 角度一圈
 8004c68:	4c26      	ldr	r4, [pc, #152]	@ (8004d04 <Rev_Park+0xa0>)
{
 8004c6a:	f8bd c020 	ldrh.w	ip, [sp, #32]
 8004c6e:	ad04      	add	r5, sp, #16
 8004c70:	e905 000e 	stmdb	r5, {r1, r2, r3}
    theta %= 10000;  // 角度一圈
 8004c74:	fba4 530c 	umull	r5, r3, r4, ip
 8004c78:	0b5b      	lsrs	r3, r3, #13
 8004c7a:	f242 7510 	movw	r5, #10000	@ 0x2710
 8004c7e:	fb05 cc13 	mls	ip, r5, r3, ip
 8004c82:	fa1f fc8c 	uxth.w	ip, ip
    quadrant = theta / 2500;  // 判斷象限
 8004c86:	fba4 3e0c 	umull	r3, lr, r4, ip
 8004c8a:	ea4f 23de 	mov.w	r3, lr, lsr #11
    index = (theta % 2500) * 311 / 2500;
 8004c8e:	f640 15c4 	movw	r5, #2500	@ 0x9c4
    quadrant = theta / 2500;  // 判斷象限
 8004c92:	469e      	mov	lr, r3
    index = (theta % 2500) * 311 / 2500;
 8004c94:	fb05 c313 	mls	r3, r5, r3, ip
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f240 1537 	movw	r5, #311	@ 0x137
 8004c9e:	fb05 f303 	mul.w	r3, r5, r3
 8004ca2:	fba4 4303 	umull	r4, r3, r4, r3
 8004ca6:	0adb      	lsrs	r3, r3, #11
            sin_val =  sintable[index];
 8004ca8:	4c17      	ldr	r4, [pc, #92]	@ (8004d08 <Rev_Park+0xa4>)
 8004caa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8004cae:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
            cos_val =  sintable[311 - index];
 8004cb2:	1aed      	subs	r5, r5, r3
    switch (quadrant) {
 8004cb4:	f1be 0f01 	cmp.w	lr, #1
            sin_val =  sintable[index];
 8004cb8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
            cos_val =  sintable[311 - index];
 8004cbc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
    switch (quadrant) {
 8004cc0:	d01c      	beq.n	8004cfc <Rev_Park+0x98>
 8004cc2:	f1be 0f02 	cmp.w	lr, #2
 8004cc6:	d014      	beq.n	8004cf2 <Rev_Park+0x8e>
 8004cc8:	f640 14c3 	movw	r4, #2499	@ 0x9c3
 8004ccc:	45a4      	cmp	ip, r4
 8004cce:	d912      	bls.n	8004cf6 <Rev_Park+0x92>
            sin_val = -sintable[311 - index];
 8004cd0:	426d      	negs	r5, r5
 8004cd2:	b22c      	sxth	r4, r5
            cos_val =  sintable[index];
 8004cd4:	b21b      	sxth	r3, r3
	Voltages output;
	Triangles sincos;
	sincos = Tri_Function(theta);

	output.valpha = (vdq.vd * sincos.cos - vdq.vq * sincos.sin) >> 11;	// VAlpha = Vd*cos - Vq*sin
 8004cd6:	fb02 fc03 	mul.w	ip, r2, r3
	output.vbeta = (vdq.vd * sincos.sin + vdq.vq * sincos.cos) >> 11;	// VBeta = Vd*sin + Vq*cos
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	fb02 3304 	mla	r3, r2, r4, r3
	output.valpha = (vdq.vd * sincos.cos - vdq.vq * sincos.sin) >> 11;	// VAlpha = Vd*cos - Vq*sin
 8004ce2:	fb01 c114 	mls	r1, r1, r4, ip
 8004ce6:	12ca      	asrs	r2, r1, #11
	output.vbeta = (vdq.vd * sincos.sin + vdq.vq * sincos.cos) >> 11;	// VBeta = Vd*sin + Vq*cos
 8004ce8:	12db      	asrs	r3, r3, #11
	output.valpha = (vdq.vd * sincos.cos - vdq.vq * sincos.sin) >> 11;	// VAlpha = Vd*cos - Vq*sin
 8004cea:	8082      	strh	r2, [r0, #4]
	output.vbeta = (vdq.vd * sincos.sin + vdq.vq * sincos.cos) >> 11;	// VBeta = Vd*sin + Vq*cos
 8004cec:	80c3      	strh	r3, [r0, #6]

	return output;
}
 8004cee:	b005      	add	sp, #20
 8004cf0:	bd30      	pop	{r4, r5, pc}
            sin_val = -sintable[index];
 8004cf2:	425b      	negs	r3, r3
            cos_val = -sintable[311 - index];
 8004cf4:	426d      	negs	r5, r5
            sin_val = -sintable[index];
 8004cf6:	b21c      	sxth	r4, r3
            cos_val = -sintable[311 - index];
 8004cf8:	b22b      	sxth	r3, r5
            break;
 8004cfa:	e7ec      	b.n	8004cd6 <Rev_Park+0x72>
            cos_val = -sintable[index];
 8004cfc:	425b      	negs	r3, r3
            sin_val =  sintable[311 - index];
 8004cfe:	b22c      	sxth	r4, r5
            cos_val = -sintable[index];
 8004d00:	b21b      	sxth	r3, r3
            break;
 8004d02:	e7e8      	b.n	8004cd6 <Rev_Park+0x72>
 8004d04:	d1b71759 	.word	0xd1b71759
 8004d08:	08005e18 	.word	0x08005e18

08004d0c <CALC_SVPWM>:
	uint8_t A=0, B=0, C=0, N=0;
	int32_t U1, U2, U3, wUAlpha, wUBeta;
	uint16_t  hTimePhA=0, hTimePhB=0, hTimePhC=0;

    wUAlpha = Stat_Volt_Input->valpha * T_SQRT3;
    wUBeta  = Stat_Volt_Input->vbeta * T;
 8004d0c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    wUAlpha = Stat_Volt_Input->valpha * T_SQRT3;
 8004d10:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    wUBeta  = Stat_Volt_Input->vbeta * T;
 8004d14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d18:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004d1c:	01da      	lsls	r2, r3, #7
    wUAlpha = Stat_Volt_Input->valpha * T_SQRT3;
 8004d1e:	f244 01f3 	movw	r1, #16627	@ 0x40f3
 8004d22:	fb1c fc01 	smulbb	ip, ip, r1

    U1 =  wUBeta;
    U2 = (-wUBeta + wUAlpha) >> 1;
    U3 = (-wUBeta - wUAlpha) >> 1;
 8004d26:	4250      	negs	r0, r2
 8004d28:	eba0 000c 	sub.w	r0, r0, ip
    U2 = (-wUBeta + wUAlpha) >> 1;
 8004d2c:	ebac 11c3 	sub.w	r1, ip, r3, lsl #7
{
 8004d30:	b510      	push	{r4, lr}
    U3 = (-wUBeta - wUAlpha) >> 1;
 8004d32:	1044      	asrs	r4, r0, #1

    if(U1 > 0) A = 1;
    else A = 0;
    if(U2 > 0) B = 1;
    else B = 0;
    if(U3 > 0) C = 1;
 8004d34:	2c00      	cmp	r4, #0
    U2 = (-wUBeta + wUAlpha) >> 1;
 8004d36:	ea4f 0361 	mov.w	r3, r1, asr #1
    if(U3 > 0) C = 1;
 8004d3a:	bfd4      	ite	le
 8004d3c:	f04f 0c00 	movle.w	ip, #0
 8004d40:	f04f 0c01 	movgt.w	ip, #1
    if(U2 > 0) B = 1;
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfd4      	ite	le
 8004d48:	f04f 0e00 	movle.w	lr, #0
 8004d4c:	f04f 0e01 	movgt.w	lr, #1
    else C = 0;
    N = 4*C + 2*B + A;

    switch(N)
 8004d50:	2a00      	cmp	r2, #0
    N = 4*C + 2*B + A;
 8004d52:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    switch(N)
 8004d56:	bfcc      	ite	gt
 8004d58:	f04f 0c00 	movgt.w	ip, #0
 8004d5c:	f04f 0c01 	movle.w	ip, #1
 8004d60:	ebcc 0c4e 	rsb	ip, ip, lr, lsl #1
 8004d64:	f1bc 0f05 	cmp.w	ip, #5
 8004d68:	d833      	bhi.n	8004dd2 <CALC_SVPWM+0xc6>
 8004d6a:	e8df f00c 	tbb	[pc, ip]
 8004d6e:	1624      	.short	0x1624
 8004d70:	24160303 	.word	0x24160303
    {
    	case SECTOR_1:
    	case SECTOR_4:
    		hTimePhA = (T >> 3) + ((T + U2 + U1) >> 14);
 8004d74:	f503 5316 	add.w	r3, r3, #9600	@ 0x2580
 8004d78:	4413      	add	r3, r2
 8004d7a:	139b      	asrs	r3, r3, #14
 8004d7c:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8004d80:	b29c      	uxth	r4, r3
    		hTimePhB = hTimePhA - (U2 >> 13);
 8004d82:	eba4 33a1 	sub.w	r3, r4, r1, asr #14
    		break;
    	default:
    		break;
    }
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, hTimePhA);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, hTimePhB);
 8004d86:	b29b      	uxth	r3, r3
    		hTimePhC = hTimePhB - (U1 >> 13);
 8004d88:	eba3 3262 	sub.w	r2, r3, r2, asr #13
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, hTimePhC);
 8004d8c:	b292      	uxth	r2, r2
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, hTimePhA);
 8004d8e:	4913      	ldr	r1, [pc, #76]	@ (8004ddc <CALC_SVPWM+0xd0>)
 8004d90:	6809      	ldr	r1, [r1, #0]
 8004d92:	634c      	str	r4, [r1, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, hTimePhB);
 8004d94:	638b      	str	r3, [r1, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, hTimePhC);
 8004d96:	63ca      	str	r2, [r1, #60]	@ 0x3c

}
 8004d98:	bd10      	pop	{r4, pc}
    		hTimePhB = (T >> 3) + ((T+U1+U3) >> 14);
 8004d9a:	f502 5316 	add.w	r3, r2, #9600	@ 0x2580
 8004d9e:	4423      	add	r3, r4
 8004da0:	139b      	asrs	r3, r3, #14
 8004da2:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8004da6:	b29b      	uxth	r3, r3
    		hTimePhC = hTimePhB - (U1 >> 13);
 8004da8:	eba3 3262 	sub.w	r2, r3, r2, asr #13
 8004dac:	b292      	uxth	r2, r2
    		hTimePhA = hTimePhC - (U3 >> 13);
 8004dae:	eba2 30a0 	sub.w	r0, r2, r0, asr #14
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, hTimePhA);
 8004db2:	b284      	uxth	r4, r0
    		break;
 8004db4:	e7eb      	b.n	8004d8e <CALC_SVPWM+0x82>
    		hTimePhB = (T >> 3) + ((T-U2-U3) >> 14);
 8004db6:	f5c3 5316 	rsb	r3, r3, #9600	@ 0x2580
 8004dba:	1b1b      	subs	r3, r3, r4
 8004dbc:	139b      	asrs	r3, r3, #14
 8004dbe:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8004dc2:	b29b      	uxth	r3, r3
    		hTimePhA = hTimePhB + (U2 >> 13);
 8004dc4:	eb03 31a1 	add.w	r1, r3, r1, asr #14
 8004dc8:	b28c      	uxth	r4, r1
    		hTimePhC = hTimePhA + (U3 >> 13);
 8004dca:	eb04 32a0 	add.w	r2, r4, r0, asr #14
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, hTimePhC);
 8004dce:	b292      	uxth	r2, r2
    		break;
 8004dd0:	e7dd      	b.n	8004d8e <CALC_SVPWM+0x82>
    switch(N)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	4614      	mov	r4, r2
 8004dd8:	e7d9      	b.n	8004d8e <CALC_SVPWM+0x82>
 8004dda:	bf00      	nop
 8004ddc:	20000350 	.word	0x20000350

08004de0 <PID_Init>:


/****************** PID 配置 ******************/
void PID_Init(PID_Struct *Torque, PID_Struct *Flux, PID_Struct *Speed, PID_Struct *PLL_w, PID_Struct *Q)
{
 8004de0:	b4f0      	push	{r4, r5, r6, r7}
	//轉矩q軸
	Torque->Kp = 50;			//比例調節		50
 8004de2:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8004e50 <PID_Init+0x70>
 8004de6:	4f11      	ldr	r7, [pc, #68]	@ (8004e2c <PID_Init+0x4c>)
	Torque->Kp_div = 1000;  	//比例係數因子
	Torque->Ki = 1;				//積分調節		2
	Torque->Ki_div = 10000; 	//積分係數因子
	Torque->Integral = 0;		//積分累積值總和
	Torque->Upper_Limit = 1920;  //總輸出上限，根據PWM的ARR去設定，建議0.8倍才不會到過調製區
 8004de8:	4e11      	ldr	r6, [pc, #68]	@ (8004e30 <PID_Init+0x50>)
 8004dea:	6086      	str	r6, [r0, #8]
	Torque->Integral = 0;		//積分累積值總和
 8004dec:	2400      	movs	r4, #0
	Torque->Kp = 50;			//比例調節		50
 8004dee:	e9c0 c700 	strd	ip, r7, [r0]
	Torque->Integral = 0;		//積分累積值總和
 8004df2:	60c4      	str	r4, [r0, #12]
	//磁通d軸
	Flux->Kp = 50; //	50
	Flux->Kp_div = 1000;
	Flux->Ki = 1;	//	2
	Flux->Ki_div = 10000;
	Flux->Integral = 0;
 8004df4:	e9c1 6402 	strd	r6, r4, [r1, #8]
	Speed->Kp = 500; //500
	Speed->Kp_div = 1000; //1000
	Speed->Ki = 25; //25
	Speed->Ki_div = 10000; //10000
	Speed->Integral = 0;
	Speed->Upper_Limit = 150;
 8004df8:	480e      	ldr	r0, [pc, #56]	@ (8004e34 <PID_Init+0x54>)
 8004dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8004e38 <PID_Init+0x58>)
{
 8004dfc:	9d04      	ldr	r5, [sp, #16]
	Flux->Kp = 50; //	50
 8004dfe:	e9c1 c700 	strd	ip, r7, [r1]
	Speed->Kp = 500; //500
 8004e02:	490e      	ldr	r1, [pc, #56]	@ (8004e3c <PID_Init+0x5c>)
 8004e04:	6011      	str	r1, [r2, #0]
	Speed->Upper_Limit = 150;
 8004e06:	e9c2 6001 	strd	r6, r0, [r2, #4]
	Speed->Integral = 0;
 8004e0a:	60d4      	str	r4, [r2, #12]
	Speed->Lower_Limit = -150;

	PLL_w->Kp = 500; //500
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <PID_Init+0x60>)
 8004e0e:	e9c3 1200 	strd	r1, r2, [r3]
	PLL_w->Kp_div = 1000; //1000
	PLL_w->Ki = 8;  //8
	PLL_w->Ki_div = 10000; //10000
	PLL_w->Integral = 0;
	PLL_w->Upper_Limit = 3000;
 8004e12:	4a0c      	ldr	r2, [pc, #48]	@ (8004e44 <PID_Init+0x64>)
	PLL_w->Integral = 0;
 8004e14:	e9c3 2402 	strd	r2, r4, [r3, #8]
	Q->Kp = 1500; //2000
	Q->Kp_div = 1000;
	Q->Ki = 20; //40
	Q->Ki_div = 1000;
	Q->Integral = 0;
	Q->Upper_Limit = 100;
 8004e18:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <PID_Init+0x68>)
	Q->Kp = 1500; //2000
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e4c <PID_Init+0x6c>)
	Q->Integral = 0;
 8004e1c:	e9c5 3402 	strd	r3, r4, [r5, #8]
	Q->Kp = 1500; //2000
 8004e20:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8004e24:	e9c5 1200 	strd	r1, r2, [r5]
	Q->Lower_Limit = -300;
}
 8004e28:	bcf0      	pop	{r4, r5, r6, r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	27100001 	.word	0x27100001
 8004e30:	f8800780 	.word	0xf8800780
 8004e34:	ff6a0096 	.word	0xff6a0096
 8004e38:	27100019 	.word	0x27100019
 8004e3c:	03e801f4 	.word	0x03e801f4
 8004e40:	27100008 	.word	0x27100008
 8004e44:	f4480bb8 	.word	0xf4480bb8
 8004e48:	fed40064 	.word	0xfed40064
 8004e4c:	03e80014 	.word	0x03e80014
 8004e50:	03e80032 	.word	0x03e80032

08004e54 <PID_Regulator>:

//祖傳
int16_t PID_Regulator(int16_t Ref, int16_t Feedback, PID_Struct *PID)
{
 8004e54:	b570      	push	{r4, r5, r6, lr}
	int16_t Error;
	int32_t P,I,Output;
	int32_t Integral_Limit = 2000000000;

	Error = Ref - Feedback;
 8004e56:	1a40      	subs	r0, r0, r1
	P = (int32_t)(PID->Kp * Error);
 8004e58:	f8b2 c000 	ldrh.w	ip, [r2]

    Output = (P / PID->Kp_div) + (PID->Integral / PID->Ki_div);

    // Anti-Windup，只有在輸出未飽和時才允許積分
    if (PID->Ki != 0 && Output < PID->Upper_Limit && Output > PID->Lower_Limit)
 8004e5c:	8896      	ldrh	r6, [r2, #4]
    Output = (P / PID->Kp_div) + (PID->Integral / PID->Ki_div);
 8004e5e:	68d4      	ldr	r4, [r2, #12]
 8004e60:	88d5      	ldrh	r5, [r2, #6]
    if (PID->Ki != 0 && Output < PID->Upper_Limit && Output > PID->Lower_Limit)
 8004e62:	f8b2 e008 	ldrh.w	lr, [r2, #8]
	P = (int32_t)(PID->Kp * Error);
 8004e66:	b203      	sxth	r3, r0
 8004e68:	fb03 f10c 	mul.w	r1, r3, ip
    Output = (P / PID->Kp_div) + (PID->Integral / PID->Ki_div);
 8004e6c:	8850      	ldrh	r0, [r2, #2]
 8004e6e:	fb94 fcf5 	sdiv	ip, r4, r5
 8004e72:	fb91 f1f0 	sdiv	r1, r1, r0
 8004e76:	448c      	add	ip, r1
    if (PID->Ki != 0 && Output < PID->Upper_Limit && Output > PID->Lower_Limit)
 8004e78:	b1a6      	cbz	r6, 8004ea4 <PID_Regulator+0x50>
 8004e7a:	45f4      	cmp	ip, lr
 8004e7c:	db04      	blt.n	8004e88 <PID_Regulator+0x34>
        else if (PID->Integral < -Integral_Limit)
            PID->Integral = -Integral_Limit;
    }

	Output = (P / PID->Kp_div)+ (PID->Integral / PID->Ki_div); //避免控制結果太快達到上下限
	PID->Output = Output;
 8004e7e:	f8a2 c010 	strh.w	ip, [r2, #16]
	if(Output >= PID->Upper_Limit)		//對 PI控制結果做限幅
		return(PID->Upper_Limit);
 8004e82:	fa0f f08e 	sxth.w	r0, lr
	else if(Output <= PID->Lower_Limit)
		return(PID->Lower_Limit);
	else {
		return((int16_t)Output);
	}
}
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
    if (PID->Ki != 0 && Output < PID->Upper_Limit && Output > PID->Lower_Limit)
 8004e88:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8004e8c:	4560      	cmp	r0, ip
 8004e8e:	da14      	bge.n	8004eba <PID_Regulator+0x66>
        PID->Integral += I;
 8004e90:	fb03 4406 	mla	r4, r3, r6, r4
        if (PID->Integral > Integral_Limit)
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <PID_Regulator+0x84>)
 8004e96:	429c      	cmp	r4, r3
 8004e98:	dd12      	ble.n	8004ec0 <PID_Regulator+0x6c>
	Output = (P / PID->Kp_div)+ (PID->Integral / PID->Ki_div); //避免控制結果太快達到上下限
 8004e9a:	fbb3 f5f5 	udiv	r5, r3, r5
            PID->Integral = Integral_Limit;
 8004e9e:	60d3      	str	r3, [r2, #12]
	Output = (P / PID->Kp_div)+ (PID->Integral / PID->Ki_div); //避免控制結果太快達到上下限
 8004ea0:	eb05 0c01 	add.w	ip, r5, r1
	PID->Output = Output;
 8004ea4:	fa0f f08c 	sxth.w	r0, ip
	if(Output >= PID->Upper_Limit)		//對 PI控制結果做限幅
 8004ea8:	45f4      	cmp	ip, lr
	PID->Output = Output;
 8004eaa:	8210      	strh	r0, [r2, #16]
	if(Output >= PID->Upper_Limit)		//對 PI控制結果做限幅
 8004eac:	dae9      	bge.n	8004e82 <PID_Regulator+0x2e>
    if (PID->Ki != 0 && Output < PID->Upper_Limit && Output > PID->Lower_Limit)
 8004eae:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
		return(PID->Lower_Limit);
 8004eb2:	459c      	cmp	ip, r3
 8004eb4:	bfd8      	it	le
 8004eb6:	4618      	movle	r0, r3
}
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
	PID->Output = Output;
 8004eba:	f8a2 c010 	strh.w	ip, [r2, #16]
}
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
        else if (PID->Integral < -Integral_Limit)
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <PID_Regulator+0x88>)
 8004ec2:	429c      	cmp	r4, r3
        PID->Integral += I;
 8004ec4:	bfa7      	ittee	ge
 8004ec6:	60d4      	strge	r4, [r2, #12]
	Output = (P / PID->Kp_div)+ (PID->Integral / PID->Ki_div); //避免控制結果太快達到上下限
 8004ec8:	fb94 f5f5 	sdivge	r5, r4, r5
 8004ecc:	fb93 f5f5 	sdivlt	r5, r3, r5
            PID->Integral = -Integral_Limit;
 8004ed0:	60d3      	strlt	r3, [r2, #12]
	Output = (P / PID->Kp_div)+ (PID->Integral / PID->Ki_div); //避免控制結果太快達到上下限
 8004ed2:	eb05 0c01 	add.w	ip, r5, r1
 8004ed6:	e7e5      	b.n	8004ea4 <PID_Regulator+0x50>
 8004ed8:	77359400 	.word	0x77359400
 8004edc:	88ca6c00 	.word	0x88ca6c00

08004ee0 <Qinner>:

int16_t Qinner(Voltages Vdq, Currents *Idq, int16_t we)
{
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	f10d 0c10 	add.w	ip, sp, #16
 8004ee6:	e90c 0007 	stmdb	ip, {r0, r1, r2}
	int32_t temp1, temp2, Q_temp, temp3, idq_mag2;
	int16_t Q;

	temp1 = Vdq.vq * Idq->id;
	temp2 = Vdq.vd * Idq->iq;
 8004eea:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
	temp1 = Vdq.vq * Idq->id;
 8004eee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
{
 8004ef2:	f9bd c010 	ldrsh.w	ip, [sp, #16]
	temp1 = Vdq.vq * Idq->id;
 8004ef6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
	Q_temp = temp1 - temp2;
	idq_mag2 = (Idq->id * Idq->id + Idq->iq * Idq->iq);
 8004efa:	fb02 f302 	mul.w	r3, r2, r2
 8004efe:	fb01 3301 	mla	r3, r1, r1, r3
	temp3 = (we * Ls * idq_mag2) >> SCALE_SHIFT;
 8004f02:	fb0c f303 	mul.w	r3, ip, r3
	temp2 = Vdq.vd * Idq->iq;
 8004f06:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
	temp1 = Vdq.vq * Idq->id;
 8004f0a:	fb10 f001 	smulbb	r0, r0, r1
	temp3 = (we * Ls * idq_mag2) >> SCALE_SHIFT;
 8004f0e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
	Q_temp = temp1 - temp2;
 8004f12:	fb0c 0012 	mls	r0, ip, r2, r0
	temp3 = (we * Ls * idq_mag2) >> SCALE_SHIFT;
 8004f16:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	Q = (Q_temp - temp3) >> 11;
 8004f1a:	eba0 30e3 	sub.w	r0, r0, r3, asr #15

	return Q;
}
 8004f1e:	f340 20cf 	sbfx	r0, r0, #11, #16
 8004f22:	b004      	add	sp, #16
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <std>:
 8004f28:	2300      	movs	r3, #0
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f36:	6083      	str	r3, [r0, #8]
 8004f38:	8181      	strh	r1, [r0, #12]
 8004f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f3c:	81c2      	strh	r2, [r0, #14]
 8004f3e:	6183      	str	r3, [r0, #24]
 8004f40:	4619      	mov	r1, r3
 8004f42:	2208      	movs	r2, #8
 8004f44:	305c      	adds	r0, #92	@ 0x5c
 8004f46:	f000 f906 	bl	8005156 <memset>
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <std+0x58>)
 8004f4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <std+0x5c>)
 8004f50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f52:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <std+0x60>)
 8004f54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <std+0x64>)
 8004f58:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <std+0x68>)
 8004f5c:	6224      	str	r4, [r4, #32]
 8004f5e:	429c      	cmp	r4, r3
 8004f60:	d006      	beq.n	8004f70 <std+0x48>
 8004f62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f66:	4294      	cmp	r4, r2
 8004f68:	d002      	beq.n	8004f70 <std+0x48>
 8004f6a:	33d0      	adds	r3, #208	@ 0xd0
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d105      	bne.n	8004f7c <std+0x54>
 8004f70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f78:	f000 b966 	b.w	8005248 <__retarget_lock_init_recursive>
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	bf00      	nop
 8004f80:	080050d1 	.word	0x080050d1
 8004f84:	080050f3 	.word	0x080050f3
 8004f88:	0800512b 	.word	0x0800512b
 8004f8c:	0800514f 	.word	0x0800514f
 8004f90:	20000590 	.word	0x20000590

08004f94 <stdio_exit_handler>:
 8004f94:	4a02      	ldr	r2, [pc, #8]	@ (8004fa0 <stdio_exit_handler+0xc>)
 8004f96:	4903      	ldr	r1, [pc, #12]	@ (8004fa4 <stdio_exit_handler+0x10>)
 8004f98:	4803      	ldr	r0, [pc, #12]	@ (8004fa8 <stdio_exit_handler+0x14>)
 8004f9a:	f000 b869 	b.w	8005070 <_fwalk_sglue>
 8004f9e:	bf00      	nop
 8004fa0:	20000010 	.word	0x20000010
 8004fa4:	08005ae5 	.word	0x08005ae5
 8004fa8:	20000020 	.word	0x20000020

08004fac <cleanup_stdio>:
 8004fac:	6841      	ldr	r1, [r0, #4]
 8004fae:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <cleanup_stdio+0x34>)
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	d001      	beq.n	8004fbc <cleanup_stdio+0x10>
 8004fb8:	f000 fd94 	bl	8005ae4 <_fflush_r>
 8004fbc:	68a1      	ldr	r1, [r4, #8]
 8004fbe:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <cleanup_stdio+0x38>)
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	d002      	beq.n	8004fca <cleanup_stdio+0x1e>
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 fd8d 	bl	8005ae4 <_fflush_r>
 8004fca:	68e1      	ldr	r1, [r4, #12]
 8004fcc:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <cleanup_stdio+0x3c>)
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d004      	beq.n	8004fdc <cleanup_stdio+0x30>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd8:	f000 bd84 	b.w	8005ae4 <_fflush_r>
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000590 	.word	0x20000590
 8004fe4:	200005f8 	.word	0x200005f8
 8004fe8:	20000660 	.word	0x20000660

08004fec <global_stdio_init.part.0>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <global_stdio_init.part.0+0x30>)
 8004ff0:	4c0b      	ldr	r4, [pc, #44]	@ (8005020 <global_stdio_init.part.0+0x34>)
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8005024 <global_stdio_init.part.0+0x38>)
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	f7ff ff94 	bl	8004f28 <std>
 8005000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005004:	2201      	movs	r2, #1
 8005006:	2109      	movs	r1, #9
 8005008:	f7ff ff8e 	bl	8004f28 <std>
 800500c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005010:	2202      	movs	r2, #2
 8005012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005016:	2112      	movs	r1, #18
 8005018:	f7ff bf86 	b.w	8004f28 <std>
 800501c:	200006c8 	.word	0x200006c8
 8005020:	20000590 	.word	0x20000590
 8005024:	08004f95 	.word	0x08004f95

08005028 <__sfp_lock_acquire>:
 8005028:	4801      	ldr	r0, [pc, #4]	@ (8005030 <__sfp_lock_acquire+0x8>)
 800502a:	f000 b90e 	b.w	800524a <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	200006d1 	.word	0x200006d1

08005034 <__sfp_lock_release>:
 8005034:	4801      	ldr	r0, [pc, #4]	@ (800503c <__sfp_lock_release+0x8>)
 8005036:	f000 b909 	b.w	800524c <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	200006d1 	.word	0x200006d1

08005040 <__sinit>:
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
 8005044:	f7ff fff0 	bl	8005028 <__sfp_lock_acquire>
 8005048:	6a23      	ldr	r3, [r4, #32]
 800504a:	b11b      	cbz	r3, 8005054 <__sinit+0x14>
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005050:	f7ff bff0 	b.w	8005034 <__sfp_lock_release>
 8005054:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <__sinit+0x28>)
 8005056:	6223      	str	r3, [r4, #32]
 8005058:	4b04      	ldr	r3, [pc, #16]	@ (800506c <__sinit+0x2c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f5      	bne.n	800504c <__sinit+0xc>
 8005060:	f7ff ffc4 	bl	8004fec <global_stdio_init.part.0>
 8005064:	e7f2      	b.n	800504c <__sinit+0xc>
 8005066:	bf00      	nop
 8005068:	08004fad 	.word	0x08004fad
 800506c:	200006c8 	.word	0x200006c8

08005070 <_fwalk_sglue>:
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005074:	4607      	mov	r7, r0
 8005076:	4688      	mov	r8, r1
 8005078:	4614      	mov	r4, r2
 800507a:	2600      	movs	r6, #0
 800507c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005080:	f1b9 0901 	subs.w	r9, r9, #1
 8005084:	d505      	bpl.n	8005092 <_fwalk_sglue+0x22>
 8005086:	6824      	ldr	r4, [r4, #0]
 8005088:	2c00      	cmp	r4, #0
 800508a:	d1f7      	bne.n	800507c <_fwalk_sglue+0xc>
 800508c:	4630      	mov	r0, r6
 800508e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d907      	bls.n	80050a8 <_fwalk_sglue+0x38>
 8005098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800509c:	3301      	adds	r3, #1
 800509e:	d003      	beq.n	80050a8 <_fwalk_sglue+0x38>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4638      	mov	r0, r7
 80050a4:	47c0      	blx	r8
 80050a6:	4306      	orrs	r6, r0
 80050a8:	3568      	adds	r5, #104	@ 0x68
 80050aa:	e7e9      	b.n	8005080 <_fwalk_sglue+0x10>

080050ac <iprintf>:
 80050ac:	b40f      	push	{r0, r1, r2, r3}
 80050ae:	b507      	push	{r0, r1, r2, lr}
 80050b0:	4906      	ldr	r1, [pc, #24]	@ (80050cc <iprintf+0x20>)
 80050b2:	ab04      	add	r3, sp, #16
 80050b4:	6808      	ldr	r0, [r1, #0]
 80050b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ba:	6881      	ldr	r1, [r0, #8]
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	f000 f9e9 	bl	8005494 <_vfiprintf_r>
 80050c2:	b003      	add	sp, #12
 80050c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c8:	b004      	add	sp, #16
 80050ca:	4770      	bx	lr
 80050cc:	2000001c 	.word	0x2000001c

080050d0 <__sread>:
 80050d0:	b510      	push	{r4, lr}
 80050d2:	460c      	mov	r4, r1
 80050d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d8:	f000 f868 	bl	80051ac <_read_r>
 80050dc:	2800      	cmp	r0, #0
 80050de:	bfab      	itete	ge
 80050e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050e2:	89a3      	ldrhlt	r3, [r4, #12]
 80050e4:	181b      	addge	r3, r3, r0
 80050e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050ea:	bfac      	ite	ge
 80050ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050ee:	81a3      	strhlt	r3, [r4, #12]
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <__swrite>:
 80050f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f6:	461f      	mov	r7, r3
 80050f8:	898b      	ldrh	r3, [r1, #12]
 80050fa:	05db      	lsls	r3, r3, #23
 80050fc:	4605      	mov	r5, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	4616      	mov	r6, r2
 8005102:	d505      	bpl.n	8005110 <__swrite+0x1e>
 8005104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005108:	2302      	movs	r3, #2
 800510a:	2200      	movs	r2, #0
 800510c:	f000 f83c 	bl	8005188 <_lseek_r>
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	4632      	mov	r2, r6
 800511e:	463b      	mov	r3, r7
 8005120:	4628      	mov	r0, r5
 8005122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005126:	f000 b853 	b.w	80051d0 <_write_r>

0800512a <__sseek>:
 800512a:	b510      	push	{r4, lr}
 800512c:	460c      	mov	r4, r1
 800512e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005132:	f000 f829 	bl	8005188 <_lseek_r>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	bf15      	itete	ne
 800513c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800513e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005146:	81a3      	strheq	r3, [r4, #12]
 8005148:	bf18      	it	ne
 800514a:	81a3      	strhne	r3, [r4, #12]
 800514c:	bd10      	pop	{r4, pc}

0800514e <__sclose>:
 800514e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005152:	f000 b809 	b.w	8005168 <_close_r>

08005156 <memset>:
 8005156:	4402      	add	r2, r0
 8005158:	4603      	mov	r3, r0
 800515a:	4293      	cmp	r3, r2
 800515c:	d100      	bne.n	8005160 <memset+0xa>
 800515e:	4770      	bx	lr
 8005160:	f803 1b01 	strb.w	r1, [r3], #1
 8005164:	e7f9      	b.n	800515a <memset+0x4>
	...

08005168 <_close_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d06      	ldr	r5, [pc, #24]	@ (8005184 <_close_r+0x1c>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fb fece 	bl	8000f14 <_close>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_close_r+0x1a>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_close_r+0x1a>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	200006cc 	.word	0x200006cc

08005188 <_lseek_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d07      	ldr	r5, [pc, #28]	@ (80051a8 <_lseek_r+0x20>)
 800518c:	4604      	mov	r4, r0
 800518e:	4608      	mov	r0, r1
 8005190:	4611      	mov	r1, r2
 8005192:	2200      	movs	r2, #0
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	f7fb fec8 	bl	8000f2c <_lseek>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_lseek_r+0x1e>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_lseek_r+0x1e>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	200006cc 	.word	0x200006cc

080051ac <_read_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d07      	ldr	r5, [pc, #28]	@ (80051cc <_read_r+0x20>)
 80051b0:	4604      	mov	r4, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fb fe9c 	bl	8000ef8 <_read>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_read_r+0x1e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_read_r+0x1e>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	200006cc 	.word	0x200006cc

080051d0 <_write_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d07      	ldr	r5, [pc, #28]	@ (80051f0 <_write_r+0x20>)
 80051d4:	4604      	mov	r4, r0
 80051d6:	4608      	mov	r0, r1
 80051d8:	4611      	mov	r1, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fb fbe4 	bl	80009ac <_write>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_write_r+0x1e>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_write_r+0x1e>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	200006cc 	.word	0x200006cc

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	@ (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	2000001c 	.word	0x2000001c

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	@ (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	@ (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	@ (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	@ (8005244 <__libc_init_array+0x44>)
 8005214:	f000 fdb6 	bl	8005d84 <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	080060c4 	.word	0x080060c4
 800523c:	080060c4 	.word	0x080060c4
 8005240:	080060c4 	.word	0x080060c4
 8005244:	080060c8 	.word	0x080060c8

08005248 <__retarget_lock_init_recursive>:
 8005248:	4770      	bx	lr

0800524a <__retarget_lock_acquire_recursive>:
 800524a:	4770      	bx	lr

0800524c <__retarget_lock_release_recursive>:
 800524c:	4770      	bx	lr
	...

08005250 <_free_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4605      	mov	r5, r0
 8005254:	2900      	cmp	r1, #0
 8005256:	d041      	beq.n	80052dc <_free_r+0x8c>
 8005258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525c:	1f0c      	subs	r4, r1, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	18e4      	addlt	r4, r4, r3
 8005264:	f000 f8e0 	bl	8005428 <__malloc_lock>
 8005268:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <_free_r+0x90>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	b933      	cbnz	r3, 800527c <_free_r+0x2c>
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	6014      	str	r4, [r2, #0]
 8005272:	4628      	mov	r0, r5
 8005274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005278:	f000 b8dc 	b.w	8005434 <__malloc_unlock>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d908      	bls.n	8005292 <_free_r+0x42>
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	1821      	adds	r1, r4, r0
 8005284:	428b      	cmp	r3, r1
 8005286:	bf01      	itttt	eq
 8005288:	6819      	ldreq	r1, [r3, #0]
 800528a:	685b      	ldreq	r3, [r3, #4]
 800528c:	1809      	addeq	r1, r1, r0
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	e7ed      	b.n	800526e <_free_r+0x1e>
 8005292:	461a      	mov	r2, r3
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b10b      	cbz	r3, 800529c <_free_r+0x4c>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d9fa      	bls.n	8005292 <_free_r+0x42>
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	1850      	adds	r0, r2, r1
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d10b      	bne.n	80052bc <_free_r+0x6c>
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	4401      	add	r1, r0
 80052a8:	1850      	adds	r0, r2, r1
 80052aa:	4283      	cmp	r3, r0
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	d1e0      	bne.n	8005272 <_free_r+0x22>
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	4408      	add	r0, r1
 80052b8:	6010      	str	r0, [r2, #0]
 80052ba:	e7da      	b.n	8005272 <_free_r+0x22>
 80052bc:	d902      	bls.n	80052c4 <_free_r+0x74>
 80052be:	230c      	movs	r3, #12
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	e7d6      	b.n	8005272 <_free_r+0x22>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	1821      	adds	r1, r4, r0
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf04      	itt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	6063      	str	r3, [r4, #4]
 80052d2:	bf04      	itt	eq
 80052d4:	1809      	addeq	r1, r1, r0
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	6054      	str	r4, [r2, #4]
 80052da:	e7ca      	b.n	8005272 <_free_r+0x22>
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	200006d8 	.word	0x200006d8

080052e4 <sbrk_aligned>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005324 <sbrk_aligned+0x40>)
 80052e8:	460c      	mov	r4, r1
 80052ea:	6831      	ldr	r1, [r6, #0]
 80052ec:	4605      	mov	r5, r0
 80052ee:	b911      	cbnz	r1, 80052f6 <sbrk_aligned+0x12>
 80052f0:	f000 fcb4 	bl	8005c5c <_sbrk_r>
 80052f4:	6030      	str	r0, [r6, #0]
 80052f6:	4621      	mov	r1, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 fcaf 	bl	8005c5c <_sbrk_r>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d103      	bne.n	800530a <sbrk_aligned+0x26>
 8005302:	f04f 34ff 	mov.w	r4, #4294967295
 8005306:	4620      	mov	r0, r4
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	1cc4      	adds	r4, r0, #3
 800530c:	f024 0403 	bic.w	r4, r4, #3
 8005310:	42a0      	cmp	r0, r4
 8005312:	d0f8      	beq.n	8005306 <sbrk_aligned+0x22>
 8005314:	1a21      	subs	r1, r4, r0
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fca0 	bl	8005c5c <_sbrk_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d1f2      	bne.n	8005306 <sbrk_aligned+0x22>
 8005320:	e7ef      	b.n	8005302 <sbrk_aligned+0x1e>
 8005322:	bf00      	nop
 8005324:	200006d4 	.word	0x200006d4

08005328 <_malloc_r>:
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	1ccd      	adds	r5, r1, #3
 800532e:	f025 0503 	bic.w	r5, r5, #3
 8005332:	3508      	adds	r5, #8
 8005334:	2d0c      	cmp	r5, #12
 8005336:	bf38      	it	cc
 8005338:	250c      	movcc	r5, #12
 800533a:	2d00      	cmp	r5, #0
 800533c:	4606      	mov	r6, r0
 800533e:	db01      	blt.n	8005344 <_malloc_r+0x1c>
 8005340:	42a9      	cmp	r1, r5
 8005342:	d904      	bls.n	800534e <_malloc_r+0x26>
 8005344:	230c      	movs	r3, #12
 8005346:	6033      	str	r3, [r6, #0]
 8005348:	2000      	movs	r0, #0
 800534a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005424 <_malloc_r+0xfc>
 8005352:	f000 f869 	bl	8005428 <__malloc_lock>
 8005356:	f8d8 3000 	ldr.w	r3, [r8]
 800535a:	461c      	mov	r4, r3
 800535c:	bb44      	cbnz	r4, 80053b0 <_malloc_r+0x88>
 800535e:	4629      	mov	r1, r5
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffbf 	bl	80052e4 <sbrk_aligned>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	4604      	mov	r4, r0
 800536a:	d158      	bne.n	800541e <_malloc_r+0xf6>
 800536c:	f8d8 4000 	ldr.w	r4, [r8]
 8005370:	4627      	mov	r7, r4
 8005372:	2f00      	cmp	r7, #0
 8005374:	d143      	bne.n	80053fe <_malloc_r+0xd6>
 8005376:	2c00      	cmp	r4, #0
 8005378:	d04b      	beq.n	8005412 <_malloc_r+0xea>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4639      	mov	r1, r7
 800537e:	4630      	mov	r0, r6
 8005380:	eb04 0903 	add.w	r9, r4, r3
 8005384:	f000 fc6a 	bl	8005c5c <_sbrk_r>
 8005388:	4581      	cmp	r9, r0
 800538a:	d142      	bne.n	8005412 <_malloc_r+0xea>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	1a6d      	subs	r5, r5, r1
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ffa6 	bl	80052e4 <sbrk_aligned>
 8005398:	3001      	adds	r0, #1
 800539a:	d03a      	beq.n	8005412 <_malloc_r+0xea>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	442b      	add	r3, r5
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	f8d8 3000 	ldr.w	r3, [r8]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	bb62      	cbnz	r2, 8005404 <_malloc_r+0xdc>
 80053aa:	f8c8 7000 	str.w	r7, [r8]
 80053ae:	e00f      	b.n	80053d0 <_malloc_r+0xa8>
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	1b52      	subs	r2, r2, r5
 80053b4:	d420      	bmi.n	80053f8 <_malloc_r+0xd0>
 80053b6:	2a0b      	cmp	r2, #11
 80053b8:	d917      	bls.n	80053ea <_malloc_r+0xc2>
 80053ba:	1961      	adds	r1, r4, r5
 80053bc:	42a3      	cmp	r3, r4
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	bf18      	it	ne
 80053c2:	6059      	strne	r1, [r3, #4]
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	bf08      	it	eq
 80053c8:	f8c8 1000 	streq.w	r1, [r8]
 80053cc:	5162      	str	r2, [r4, r5]
 80053ce:	604b      	str	r3, [r1, #4]
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 f82f 	bl	8005434 <__malloc_unlock>
 80053d6:	f104 000b 	add.w	r0, r4, #11
 80053da:	1d23      	adds	r3, r4, #4
 80053dc:	f020 0007 	bic.w	r0, r0, #7
 80053e0:	1ac2      	subs	r2, r0, r3
 80053e2:	bf1c      	itt	ne
 80053e4:	1a1b      	subne	r3, r3, r0
 80053e6:	50a3      	strne	r3, [r4, r2]
 80053e8:	e7af      	b.n	800534a <_malloc_r+0x22>
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	bf0c      	ite	eq
 80053f0:	f8c8 2000 	streq.w	r2, [r8]
 80053f4:	605a      	strne	r2, [r3, #4]
 80053f6:	e7eb      	b.n	80053d0 <_malloc_r+0xa8>
 80053f8:	4623      	mov	r3, r4
 80053fa:	6864      	ldr	r4, [r4, #4]
 80053fc:	e7ae      	b.n	800535c <_malloc_r+0x34>
 80053fe:	463c      	mov	r4, r7
 8005400:	687f      	ldr	r7, [r7, #4]
 8005402:	e7b6      	b.n	8005372 <_malloc_r+0x4a>
 8005404:	461a      	mov	r2, r3
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	42a3      	cmp	r3, r4
 800540a:	d1fb      	bne.n	8005404 <_malloc_r+0xdc>
 800540c:	2300      	movs	r3, #0
 800540e:	6053      	str	r3, [r2, #4]
 8005410:	e7de      	b.n	80053d0 <_malloc_r+0xa8>
 8005412:	230c      	movs	r3, #12
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	4630      	mov	r0, r6
 8005418:	f000 f80c 	bl	8005434 <__malloc_unlock>
 800541c:	e794      	b.n	8005348 <_malloc_r+0x20>
 800541e:	6005      	str	r5, [r0, #0]
 8005420:	e7d6      	b.n	80053d0 <_malloc_r+0xa8>
 8005422:	bf00      	nop
 8005424:	200006d8 	.word	0x200006d8

08005428 <__malloc_lock>:
 8005428:	4801      	ldr	r0, [pc, #4]	@ (8005430 <__malloc_lock+0x8>)
 800542a:	f7ff bf0e 	b.w	800524a <__retarget_lock_acquire_recursive>
 800542e:	bf00      	nop
 8005430:	200006d0 	.word	0x200006d0

08005434 <__malloc_unlock>:
 8005434:	4801      	ldr	r0, [pc, #4]	@ (800543c <__malloc_unlock+0x8>)
 8005436:	f7ff bf09 	b.w	800524c <__retarget_lock_release_recursive>
 800543a:	bf00      	nop
 800543c:	200006d0 	.word	0x200006d0

08005440 <__sfputc_r>:
 8005440:	6893      	ldr	r3, [r2, #8]
 8005442:	3b01      	subs	r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	b410      	push	{r4}
 8005448:	6093      	str	r3, [r2, #8]
 800544a:	da08      	bge.n	800545e <__sfputc_r+0x1e>
 800544c:	6994      	ldr	r4, [r2, #24]
 800544e:	42a3      	cmp	r3, r4
 8005450:	db01      	blt.n	8005456 <__sfputc_r+0x16>
 8005452:	290a      	cmp	r1, #10
 8005454:	d103      	bne.n	800545e <__sfputc_r+0x1e>
 8005456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800545a:	f000 bb6b 	b.w	8005b34 <__swbuf_r>
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	1c58      	adds	r0, r3, #1
 8005462:	6010      	str	r0, [r2, #0]
 8005464:	7019      	strb	r1, [r3, #0]
 8005466:	4608      	mov	r0, r1
 8005468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546c:	4770      	bx	lr

0800546e <__sfputs_r>:
 800546e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005470:	4606      	mov	r6, r0
 8005472:	460f      	mov	r7, r1
 8005474:	4614      	mov	r4, r2
 8005476:	18d5      	adds	r5, r2, r3
 8005478:	42ac      	cmp	r4, r5
 800547a:	d101      	bne.n	8005480 <__sfputs_r+0x12>
 800547c:	2000      	movs	r0, #0
 800547e:	e007      	b.n	8005490 <__sfputs_r+0x22>
 8005480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005484:	463a      	mov	r2, r7
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff ffda 	bl	8005440 <__sfputc_r>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d1f3      	bne.n	8005478 <__sfputs_r+0xa>
 8005490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005494 <_vfiprintf_r>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	460d      	mov	r5, r1
 800549a:	b09d      	sub	sp, #116	@ 0x74
 800549c:	4614      	mov	r4, r2
 800549e:	4698      	mov	r8, r3
 80054a0:	4606      	mov	r6, r0
 80054a2:	b118      	cbz	r0, 80054ac <_vfiprintf_r+0x18>
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	b90b      	cbnz	r3, 80054ac <_vfiprintf_r+0x18>
 80054a8:	f7ff fdca 	bl	8005040 <__sinit>
 80054ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054ae:	07d9      	lsls	r1, r3, #31
 80054b0:	d405      	bmi.n	80054be <_vfiprintf_r+0x2a>
 80054b2:	89ab      	ldrh	r3, [r5, #12]
 80054b4:	059a      	lsls	r2, r3, #22
 80054b6:	d402      	bmi.n	80054be <_vfiprintf_r+0x2a>
 80054b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ba:	f7ff fec6 	bl	800524a <__retarget_lock_acquire_recursive>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	d501      	bpl.n	80054c8 <_vfiprintf_r+0x34>
 80054c4:	692b      	ldr	r3, [r5, #16]
 80054c6:	b99b      	cbnz	r3, 80054f0 <_vfiprintf_r+0x5c>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	f000 fb70 	bl	8005bb0 <__swsetup_r>
 80054d0:	b170      	cbz	r0, 80054f0 <_vfiprintf_r+0x5c>
 80054d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054d4:	07dc      	lsls	r4, r3, #31
 80054d6:	d504      	bpl.n	80054e2 <_vfiprintf_r+0x4e>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b01d      	add	sp, #116	@ 0x74
 80054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	0598      	lsls	r0, r3, #22
 80054e6:	d4f7      	bmi.n	80054d8 <_vfiprintf_r+0x44>
 80054e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ea:	f7ff feaf 	bl	800524c <__retarget_lock_release_recursive>
 80054ee:	e7f3      	b.n	80054d8 <_vfiprintf_r+0x44>
 80054f0:	2300      	movs	r3, #0
 80054f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f4:	2320      	movs	r3, #32
 80054f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fe:	2330      	movs	r3, #48	@ 0x30
 8005500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80056b0 <_vfiprintf_r+0x21c>
 8005504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005508:	f04f 0901 	mov.w	r9, #1
 800550c:	4623      	mov	r3, r4
 800550e:	469a      	mov	sl, r3
 8005510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005514:	b10a      	cbz	r2, 800551a <_vfiprintf_r+0x86>
 8005516:	2a25      	cmp	r2, #37	@ 0x25
 8005518:	d1f9      	bne.n	800550e <_vfiprintf_r+0x7a>
 800551a:	ebba 0b04 	subs.w	fp, sl, r4
 800551e:	d00b      	beq.n	8005538 <_vfiprintf_r+0xa4>
 8005520:	465b      	mov	r3, fp
 8005522:	4622      	mov	r2, r4
 8005524:	4629      	mov	r1, r5
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ffa1 	bl	800546e <__sfputs_r>
 800552c:	3001      	adds	r0, #1
 800552e:	f000 80a7 	beq.w	8005680 <_vfiprintf_r+0x1ec>
 8005532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005534:	445a      	add	r2, fp
 8005536:	9209      	str	r2, [sp, #36]	@ 0x24
 8005538:	f89a 3000 	ldrb.w	r3, [sl]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 809f 	beq.w	8005680 <_vfiprintf_r+0x1ec>
 8005542:	2300      	movs	r3, #0
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554c:	f10a 0a01 	add.w	sl, sl, #1
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005558:	931a      	str	r3, [sp, #104]	@ 0x68
 800555a:	4654      	mov	r4, sl
 800555c:	2205      	movs	r2, #5
 800555e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005562:	4853      	ldr	r0, [pc, #332]	@ (80056b0 <_vfiprintf_r+0x21c>)
 8005564:	f7fa fe34 	bl	80001d0 <memchr>
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	b9d8      	cbnz	r0, 80055a4 <_vfiprintf_r+0x110>
 800556c:	06d1      	lsls	r1, r2, #27
 800556e:	bf44      	itt	mi
 8005570:	2320      	movmi	r3, #32
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005576:	0713      	lsls	r3, r2, #28
 8005578:	bf44      	itt	mi
 800557a:	232b      	movmi	r3, #43	@ 0x2b
 800557c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005580:	f89a 3000 	ldrb.w	r3, [sl]
 8005584:	2b2a      	cmp	r3, #42	@ 0x2a
 8005586:	d015      	beq.n	80055b4 <_vfiprintf_r+0x120>
 8005588:	9a07      	ldr	r2, [sp, #28]
 800558a:	4654      	mov	r4, sl
 800558c:	2000      	movs	r0, #0
 800558e:	f04f 0c0a 	mov.w	ip, #10
 8005592:	4621      	mov	r1, r4
 8005594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005598:	3b30      	subs	r3, #48	@ 0x30
 800559a:	2b09      	cmp	r3, #9
 800559c:	d94b      	bls.n	8005636 <_vfiprintf_r+0x1a2>
 800559e:	b1b0      	cbz	r0, 80055ce <_vfiprintf_r+0x13a>
 80055a0:	9207      	str	r2, [sp, #28]
 80055a2:	e014      	b.n	80055ce <_vfiprintf_r+0x13a>
 80055a4:	eba0 0308 	sub.w	r3, r0, r8
 80055a8:	fa09 f303 	lsl.w	r3, r9, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	46a2      	mov	sl, r4
 80055b2:	e7d2      	b.n	800555a <_vfiprintf_r+0xc6>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1d19      	adds	r1, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	9103      	str	r1, [sp, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfbb      	ittet	lt
 80055c0:	425b      	neglt	r3, r3
 80055c2:	f042 0202 	orrlt.w	r2, r2, #2
 80055c6:	9307      	strge	r3, [sp, #28]
 80055c8:	9307      	strlt	r3, [sp, #28]
 80055ca:	bfb8      	it	lt
 80055cc:	9204      	strlt	r2, [sp, #16]
 80055ce:	7823      	ldrb	r3, [r4, #0]
 80055d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d2:	d10a      	bne.n	80055ea <_vfiprintf_r+0x156>
 80055d4:	7863      	ldrb	r3, [r4, #1]
 80055d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d8:	d132      	bne.n	8005640 <_vfiprintf_r+0x1ac>
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	9203      	str	r2, [sp, #12]
 80055e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055e6:	3402      	adds	r4, #2
 80055e8:	9305      	str	r3, [sp, #20]
 80055ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056c0 <_vfiprintf_r+0x22c>
 80055ee:	7821      	ldrb	r1, [r4, #0]
 80055f0:	2203      	movs	r2, #3
 80055f2:	4650      	mov	r0, sl
 80055f4:	f7fa fdec 	bl	80001d0 <memchr>
 80055f8:	b138      	cbz	r0, 800560a <_vfiprintf_r+0x176>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	eba0 000a 	sub.w	r0, r0, sl
 8005600:	2240      	movs	r2, #64	@ 0x40
 8005602:	4082      	lsls	r2, r0
 8005604:	4313      	orrs	r3, r2
 8005606:	3401      	adds	r4, #1
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	4829      	ldr	r0, [pc, #164]	@ (80056b4 <_vfiprintf_r+0x220>)
 8005610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005614:	2206      	movs	r2, #6
 8005616:	f7fa fddb 	bl	80001d0 <memchr>
 800561a:	2800      	cmp	r0, #0
 800561c:	d03f      	beq.n	800569e <_vfiprintf_r+0x20a>
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <_vfiprintf_r+0x224>)
 8005620:	bb1b      	cbnz	r3, 800566a <_vfiprintf_r+0x1d6>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	3307      	adds	r3, #7
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	3308      	adds	r3, #8
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005630:	443b      	add	r3, r7
 8005632:	9309      	str	r3, [sp, #36]	@ 0x24
 8005634:	e76a      	b.n	800550c <_vfiprintf_r+0x78>
 8005636:	fb0c 3202 	mla	r2, ip, r2, r3
 800563a:	460c      	mov	r4, r1
 800563c:	2001      	movs	r0, #1
 800563e:	e7a8      	b.n	8005592 <_vfiprintf_r+0xfe>
 8005640:	2300      	movs	r3, #0
 8005642:	3401      	adds	r4, #1
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	4619      	mov	r1, r3
 8005648:	f04f 0c0a 	mov.w	ip, #10
 800564c:	4620      	mov	r0, r4
 800564e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005652:	3a30      	subs	r2, #48	@ 0x30
 8005654:	2a09      	cmp	r2, #9
 8005656:	d903      	bls.n	8005660 <_vfiprintf_r+0x1cc>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0c6      	beq.n	80055ea <_vfiprintf_r+0x156>
 800565c:	9105      	str	r1, [sp, #20]
 800565e:	e7c4      	b.n	80055ea <_vfiprintf_r+0x156>
 8005660:	fb0c 2101 	mla	r1, ip, r1, r2
 8005664:	4604      	mov	r4, r0
 8005666:	2301      	movs	r3, #1
 8005668:	e7f0      	b.n	800564c <_vfiprintf_r+0x1b8>
 800566a:	ab03      	add	r3, sp, #12
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	462a      	mov	r2, r5
 8005670:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <_vfiprintf_r+0x228>)
 8005672:	a904      	add	r1, sp, #16
 8005674:	4630      	mov	r0, r6
 8005676:	f3af 8000 	nop.w
 800567a:	4607      	mov	r7, r0
 800567c:	1c78      	adds	r0, r7, #1
 800567e:	d1d6      	bne.n	800562e <_vfiprintf_r+0x19a>
 8005680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d405      	bmi.n	8005692 <_vfiprintf_r+0x1fe>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	059a      	lsls	r2, r3, #22
 800568a:	d402      	bmi.n	8005692 <_vfiprintf_r+0x1fe>
 800568c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800568e:	f7ff fddd 	bl	800524c <__retarget_lock_release_recursive>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	065b      	lsls	r3, r3, #25
 8005696:	f53f af1f 	bmi.w	80054d8 <_vfiprintf_r+0x44>
 800569a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800569c:	e71e      	b.n	80054dc <_vfiprintf_r+0x48>
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	462a      	mov	r2, r5
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <_vfiprintf_r+0x228>)
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 f879 	bl	80057a0 <_printf_i>
 80056ae:	e7e4      	b.n	800567a <_vfiprintf_r+0x1e6>
 80056b0:	08006088 	.word	0x08006088
 80056b4:	08006092 	.word	0x08006092
 80056b8:	00000000 	.word	0x00000000
 80056bc:	0800546f 	.word	0x0800546f
 80056c0:	0800608e 	.word	0x0800608e

080056c4 <_printf_common>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4616      	mov	r6, r2
 80056ca:	4698      	mov	r8, r3
 80056cc:	688a      	ldr	r2, [r1, #8]
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bfb8      	it	lt
 80056d8:	4613      	movlt	r3, r2
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056e0:	4607      	mov	r7, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b10a      	cbz	r2, 80056ea <_printf_common+0x26>
 80056e6:	3301      	adds	r3, #1
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0699      	lsls	r1, r3, #26
 80056ee:	bf42      	ittt	mi
 80056f0:	6833      	ldrmi	r3, [r6, #0]
 80056f2:	3302      	addmi	r3, #2
 80056f4:	6033      	strmi	r3, [r6, #0]
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	f015 0506 	ands.w	r5, r5, #6
 80056fc:	d106      	bne.n	800570c <_printf_common+0x48>
 80056fe:	f104 0a19 	add.w	sl, r4, #25
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	6832      	ldr	r2, [r6, #0]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	42ab      	cmp	r3, r5
 800570a:	dc26      	bgt.n	800575a <_printf_common+0x96>
 800570c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	3b00      	subs	r3, #0
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	0692      	lsls	r2, r2, #26
 800571a:	d42b      	bmi.n	8005774 <_printf_common+0xb0>
 800571c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005720:	4641      	mov	r1, r8
 8005722:	4638      	mov	r0, r7
 8005724:	47c8      	blx	r9
 8005726:	3001      	adds	r0, #1
 8005728:	d01e      	beq.n	8005768 <_printf_common+0xa4>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	f003 0306 	and.w	r3, r3, #6
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf02      	ittt	eq
 8005736:	68e5      	ldreq	r5, [r4, #12]
 8005738:	6833      	ldreq	r3, [r6, #0]
 800573a:	1aed      	subeq	r5, r5, r3
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	bf0c      	ite	eq
 8005740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005744:	2500      	movne	r5, #0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfc4      	itt	gt
 800574a:	1a9b      	subgt	r3, r3, r2
 800574c:	18ed      	addgt	r5, r5, r3
 800574e:	2600      	movs	r6, #0
 8005750:	341a      	adds	r4, #26
 8005752:	42b5      	cmp	r5, r6
 8005754:	d11a      	bne.n	800578c <_printf_common+0xc8>
 8005756:	2000      	movs	r0, #0
 8005758:	e008      	b.n	800576c <_printf_common+0xa8>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4641      	mov	r1, r8
 8005760:	4638      	mov	r0, r7
 8005762:	47c8      	blx	r9
 8005764:	3001      	adds	r0, #1
 8005766:	d103      	bne.n	8005770 <_printf_common+0xac>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005770:	3501      	adds	r5, #1
 8005772:	e7c6      	b.n	8005702 <_printf_common+0x3e>
 8005774:	18e1      	adds	r1, r4, r3
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	2030      	movs	r0, #48	@ 0x30
 800577a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800577e:	4422      	add	r2, r4
 8005780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005788:	3302      	adds	r3, #2
 800578a:	e7c7      	b.n	800571c <_printf_common+0x58>
 800578c:	2301      	movs	r3, #1
 800578e:	4622      	mov	r2, r4
 8005790:	4641      	mov	r1, r8
 8005792:	4638      	mov	r0, r7
 8005794:	47c8      	blx	r9
 8005796:	3001      	adds	r0, #1
 8005798:	d0e6      	beq.n	8005768 <_printf_common+0xa4>
 800579a:	3601      	adds	r6, #1
 800579c:	e7d9      	b.n	8005752 <_printf_common+0x8e>
	...

080057a0 <_printf_i>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	7e0f      	ldrb	r7, [r1, #24]
 80057a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057a8:	2f78      	cmp	r7, #120	@ 0x78
 80057aa:	4691      	mov	r9, r2
 80057ac:	4680      	mov	r8, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	469a      	mov	sl, r3
 80057b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057b6:	d807      	bhi.n	80057c8 <_printf_i+0x28>
 80057b8:	2f62      	cmp	r7, #98	@ 0x62
 80057ba:	d80a      	bhi.n	80057d2 <_printf_i+0x32>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80d1 	beq.w	8005964 <_printf_i+0x1c4>
 80057c2:	2f58      	cmp	r7, #88	@ 0x58
 80057c4:	f000 80b8 	beq.w	8005938 <_printf_i+0x198>
 80057c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057d0:	e03a      	b.n	8005848 <_printf_i+0xa8>
 80057d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057d6:	2b15      	cmp	r3, #21
 80057d8:	d8f6      	bhi.n	80057c8 <_printf_i+0x28>
 80057da:	a101      	add	r1, pc, #4	@ (adr r1, 80057e0 <_printf_i+0x40>)
 80057dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e0:	08005839 	.word	0x08005839
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080057c9 	.word	0x080057c9
 80057ec:	080057c9 	.word	0x080057c9
 80057f0:	080057c9 	.word	0x080057c9
 80057f4:	080057c9 	.word	0x080057c9
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080057c9 	.word	0x080057c9
 8005800:	080057c9 	.word	0x080057c9
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	0800594b 	.word	0x0800594b
 8005810:	08005877 	.word	0x08005877
 8005814:	08005905 	.word	0x08005905
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	0800596d 	.word	0x0800596d
 8005824:	080057c9 	.word	0x080057c9
 8005828:	08005877 	.word	0x08005877
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	0800590d 	.word	0x0800590d
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6032      	str	r2, [r6, #0]
 8005840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e09c      	b.n	8005986 <_printf_i+0x1e6>
 800584c:	6833      	ldr	r3, [r6, #0]
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	6031      	str	r1, [r6, #0]
 8005854:	0606      	lsls	r6, r0, #24
 8005856:	d501      	bpl.n	800585c <_printf_i+0xbc>
 8005858:	681d      	ldr	r5, [r3, #0]
 800585a:	e003      	b.n	8005864 <_printf_i+0xc4>
 800585c:	0645      	lsls	r5, r0, #25
 800585e:	d5fb      	bpl.n	8005858 <_printf_i+0xb8>
 8005860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005864:	2d00      	cmp	r5, #0
 8005866:	da03      	bge.n	8005870 <_printf_i+0xd0>
 8005868:	232d      	movs	r3, #45	@ 0x2d
 800586a:	426d      	negs	r5, r5
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005870:	4858      	ldr	r0, [pc, #352]	@ (80059d4 <_printf_i+0x234>)
 8005872:	230a      	movs	r3, #10
 8005874:	e011      	b.n	800589a <_printf_i+0xfa>
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	6833      	ldr	r3, [r6, #0]
 800587a:	0608      	lsls	r0, r1, #24
 800587c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005880:	d402      	bmi.n	8005888 <_printf_i+0xe8>
 8005882:	0649      	lsls	r1, r1, #25
 8005884:	bf48      	it	mi
 8005886:	b2ad      	uxthmi	r5, r5
 8005888:	2f6f      	cmp	r7, #111	@ 0x6f
 800588a:	4852      	ldr	r0, [pc, #328]	@ (80059d4 <_printf_i+0x234>)
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	bf14      	ite	ne
 8005890:	230a      	movne	r3, #10
 8005892:	2308      	moveq	r3, #8
 8005894:	2100      	movs	r1, #0
 8005896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800589a:	6866      	ldr	r6, [r4, #4]
 800589c:	60a6      	str	r6, [r4, #8]
 800589e:	2e00      	cmp	r6, #0
 80058a0:	db05      	blt.n	80058ae <_printf_i+0x10e>
 80058a2:	6821      	ldr	r1, [r4, #0]
 80058a4:	432e      	orrs	r6, r5
 80058a6:	f021 0104 	bic.w	r1, r1, #4
 80058aa:	6021      	str	r1, [r4, #0]
 80058ac:	d04b      	beq.n	8005946 <_printf_i+0x1a6>
 80058ae:	4616      	mov	r6, r2
 80058b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058b4:	fb03 5711 	mls	r7, r3, r1, r5
 80058b8:	5dc7      	ldrb	r7, [r0, r7]
 80058ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058be:	462f      	mov	r7, r5
 80058c0:	42bb      	cmp	r3, r7
 80058c2:	460d      	mov	r5, r1
 80058c4:	d9f4      	bls.n	80058b0 <_printf_i+0x110>
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d10b      	bne.n	80058e2 <_printf_i+0x142>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	07df      	lsls	r7, r3, #31
 80058ce:	d508      	bpl.n	80058e2 <_printf_i+0x142>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	6861      	ldr	r1, [r4, #4]
 80058d4:	4299      	cmp	r1, r3
 80058d6:	bfde      	ittt	le
 80058d8:	2330      	movle	r3, #48	@ 0x30
 80058da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058e2:	1b92      	subs	r2, r2, r6
 80058e4:	6122      	str	r2, [r4, #16]
 80058e6:	f8cd a000 	str.w	sl, [sp]
 80058ea:	464b      	mov	r3, r9
 80058ec:	aa03      	add	r2, sp, #12
 80058ee:	4621      	mov	r1, r4
 80058f0:	4640      	mov	r0, r8
 80058f2:	f7ff fee7 	bl	80056c4 <_printf_common>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d14a      	bne.n	8005990 <_printf_i+0x1f0>
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	b004      	add	sp, #16
 8005900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f043 0320 	orr.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	4832      	ldr	r0, [pc, #200]	@ (80059d8 <_printf_i+0x238>)
 800590e:	2778      	movs	r7, #120	@ 0x78
 8005910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	061f      	lsls	r7, r3, #24
 800591a:	f851 5b04 	ldr.w	r5, [r1], #4
 800591e:	d402      	bmi.n	8005926 <_printf_i+0x186>
 8005920:	065f      	lsls	r7, r3, #25
 8005922:	bf48      	it	mi
 8005924:	b2ad      	uxthmi	r5, r5
 8005926:	6031      	str	r1, [r6, #0]
 8005928:	07d9      	lsls	r1, r3, #31
 800592a:	bf44      	itt	mi
 800592c:	f043 0320 	orrmi.w	r3, r3, #32
 8005930:	6023      	strmi	r3, [r4, #0]
 8005932:	b11d      	cbz	r5, 800593c <_printf_i+0x19c>
 8005934:	2310      	movs	r3, #16
 8005936:	e7ad      	b.n	8005894 <_printf_i+0xf4>
 8005938:	4826      	ldr	r0, [pc, #152]	@ (80059d4 <_printf_i+0x234>)
 800593a:	e7e9      	b.n	8005910 <_printf_i+0x170>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	f023 0320 	bic.w	r3, r3, #32
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	e7f6      	b.n	8005934 <_printf_i+0x194>
 8005946:	4616      	mov	r6, r2
 8005948:	e7bd      	b.n	80058c6 <_printf_i+0x126>
 800594a:	6833      	ldr	r3, [r6, #0]
 800594c:	6825      	ldr	r5, [r4, #0]
 800594e:	6961      	ldr	r1, [r4, #20]
 8005950:	1d18      	adds	r0, r3, #4
 8005952:	6030      	str	r0, [r6, #0]
 8005954:	062e      	lsls	r6, r5, #24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	d501      	bpl.n	800595e <_printf_i+0x1be>
 800595a:	6019      	str	r1, [r3, #0]
 800595c:	e002      	b.n	8005964 <_printf_i+0x1c4>
 800595e:	0668      	lsls	r0, r5, #25
 8005960:	d5fb      	bpl.n	800595a <_printf_i+0x1ba>
 8005962:	8019      	strh	r1, [r3, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	4616      	mov	r6, r2
 800596a:	e7bc      	b.n	80058e6 <_printf_i+0x146>
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	6032      	str	r2, [r6, #0]
 8005972:	681e      	ldr	r6, [r3, #0]
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	2100      	movs	r1, #0
 8005978:	4630      	mov	r0, r6
 800597a:	f7fa fc29 	bl	80001d0 <memchr>
 800597e:	b108      	cbz	r0, 8005984 <_printf_i+0x1e4>
 8005980:	1b80      	subs	r0, r0, r6
 8005982:	6060      	str	r0, [r4, #4]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	2300      	movs	r3, #0
 800598a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800598e:	e7aa      	b.n	80058e6 <_printf_i+0x146>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	4632      	mov	r2, r6
 8005994:	4649      	mov	r1, r9
 8005996:	4640      	mov	r0, r8
 8005998:	47d0      	blx	sl
 800599a:	3001      	adds	r0, #1
 800599c:	d0ad      	beq.n	80058fa <_printf_i+0x15a>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	079b      	lsls	r3, r3, #30
 80059a2:	d413      	bmi.n	80059cc <_printf_i+0x22c>
 80059a4:	68e0      	ldr	r0, [r4, #12]
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	4298      	cmp	r0, r3
 80059aa:	bfb8      	it	lt
 80059ac:	4618      	movlt	r0, r3
 80059ae:	e7a6      	b.n	80058fe <_printf_i+0x15e>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4632      	mov	r2, r6
 80059b4:	4649      	mov	r1, r9
 80059b6:	4640      	mov	r0, r8
 80059b8:	47d0      	blx	sl
 80059ba:	3001      	adds	r0, #1
 80059bc:	d09d      	beq.n	80058fa <_printf_i+0x15a>
 80059be:	3501      	adds	r5, #1
 80059c0:	68e3      	ldr	r3, [r4, #12]
 80059c2:	9903      	ldr	r1, [sp, #12]
 80059c4:	1a5b      	subs	r3, r3, r1
 80059c6:	42ab      	cmp	r3, r5
 80059c8:	dcf2      	bgt.n	80059b0 <_printf_i+0x210>
 80059ca:	e7eb      	b.n	80059a4 <_printf_i+0x204>
 80059cc:	2500      	movs	r5, #0
 80059ce:	f104 0619 	add.w	r6, r4, #25
 80059d2:	e7f5      	b.n	80059c0 <_printf_i+0x220>
 80059d4:	08006099 	.word	0x08006099
 80059d8:	080060aa 	.word	0x080060aa

080059dc <__sflush_r>:
 80059dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	0716      	lsls	r6, r2, #28
 80059e6:	4605      	mov	r5, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	d454      	bmi.n	8005a96 <__sflush_r+0xba>
 80059ec:	684b      	ldr	r3, [r1, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dc02      	bgt.n	80059f8 <__sflush_r+0x1c>
 80059f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dd48      	ble.n	8005a8a <__sflush_r+0xae>
 80059f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d045      	beq.n	8005a8a <__sflush_r+0xae>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a04:	682f      	ldr	r7, [r5, #0]
 8005a06:	6a21      	ldr	r1, [r4, #32]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	d030      	beq.n	8005a6e <__sflush_r+0x92>
 8005a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	0759      	lsls	r1, r3, #29
 8005a12:	d505      	bpl.n	8005a20 <__sflush_r+0x44>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a1a:	b10b      	cbz	r3, 8005a20 <__sflush_r+0x44>
 8005a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a24:	6a21      	ldr	r1, [r4, #32]
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	d106      	bne.n	8005a3e <__sflush_r+0x62>
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	291d      	cmp	r1, #29
 8005a34:	d82b      	bhi.n	8005a8e <__sflush_r+0xb2>
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <__sflush_r+0x104>)
 8005a38:	40ca      	lsrs	r2, r1
 8005a3a:	07d6      	lsls	r6, r2, #31
 8005a3c:	d527      	bpl.n	8005a8e <__sflush_r+0xb2>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6062      	str	r2, [r4, #4]
 8005a42:	04d9      	lsls	r1, r3, #19
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	d504      	bpl.n	8005a54 <__sflush_r+0x78>
 8005a4a:	1c42      	adds	r2, r0, #1
 8005a4c:	d101      	bne.n	8005a52 <__sflush_r+0x76>
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	b903      	cbnz	r3, 8005a54 <__sflush_r+0x78>
 8005a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a56:	602f      	str	r7, [r5, #0]
 8005a58:	b1b9      	cbz	r1, 8005a8a <__sflush_r+0xae>
 8005a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	d002      	beq.n	8005a68 <__sflush_r+0x8c>
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff fbf4 	bl	8005250 <_free_r>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a6c:	e00d      	b.n	8005a8a <__sflush_r+0xae>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b0      	blx	r6
 8005a74:	4602      	mov	r2, r0
 8005a76:	1c50      	adds	r0, r2, #1
 8005a78:	d1c9      	bne.n	8005a0e <__sflush_r+0x32>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0c6      	beq.n	8005a0e <__sflush_r+0x32>
 8005a80:	2b1d      	cmp	r3, #29
 8005a82:	d001      	beq.n	8005a88 <__sflush_r+0xac>
 8005a84:	2b16      	cmp	r3, #22
 8005a86:	d11e      	bne.n	8005ac6 <__sflush_r+0xea>
 8005a88:	602f      	str	r7, [r5, #0]
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e022      	b.n	8005ad4 <__sflush_r+0xf8>
 8005a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	e01b      	b.n	8005ace <__sflush_r+0xf2>
 8005a96:	690f      	ldr	r7, [r1, #16]
 8005a98:	2f00      	cmp	r7, #0
 8005a9a:	d0f6      	beq.n	8005a8a <__sflush_r+0xae>
 8005a9c:	0793      	lsls	r3, r2, #30
 8005a9e:	680e      	ldr	r6, [r1, #0]
 8005aa0:	bf08      	it	eq
 8005aa2:	694b      	ldreq	r3, [r1, #20]
 8005aa4:	600f      	str	r7, [r1, #0]
 8005aa6:	bf18      	it	ne
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	eba6 0807 	sub.w	r8, r6, r7
 8005aae:	608b      	str	r3, [r1, #8]
 8005ab0:	f1b8 0f00 	cmp.w	r8, #0
 8005ab4:	dde9      	ble.n	8005a8a <__sflush_r+0xae>
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005aba:	4643      	mov	r3, r8
 8005abc:	463a      	mov	r2, r7
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	dc08      	bgt.n	8005ad8 <__sflush_r+0xfc>
 8005ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad8:	4407      	add	r7, r0
 8005ada:	eba8 0800 	sub.w	r8, r8, r0
 8005ade:	e7e7      	b.n	8005ab0 <__sflush_r+0xd4>
 8005ae0:	20400001 	.word	0x20400001

08005ae4 <_fflush_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	b913      	cbnz	r3, 8005af4 <_fflush_r+0x10>
 8005aee:	2500      	movs	r5, #0
 8005af0:	4628      	mov	r0, r5
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	b118      	cbz	r0, 8005afe <_fflush_r+0x1a>
 8005af6:	6a03      	ldr	r3, [r0, #32]
 8005af8:	b90b      	cbnz	r3, 8005afe <_fflush_r+0x1a>
 8005afa:	f7ff faa1 	bl	8005040 <__sinit>
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f3      	beq.n	8005aee <_fflush_r+0xa>
 8005b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b08:	07d0      	lsls	r0, r2, #31
 8005b0a:	d404      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b0c:	0599      	lsls	r1, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b12:	f7ff fb9a 	bl	800524a <__retarget_lock_acquire_recursive>
 8005b16:	4628      	mov	r0, r5
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f7ff ff5f 	bl	80059dc <__sflush_r>
 8005b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b20:	07da      	lsls	r2, r3, #31
 8005b22:	4605      	mov	r5, r0
 8005b24:	d4e4      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	059b      	lsls	r3, r3, #22
 8005b2a:	d4e1      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b2e:	f7ff fb8d 	bl	800524c <__retarget_lock_release_recursive>
 8005b32:	e7dd      	b.n	8005af0 <_fflush_r+0xc>

08005b34 <__swbuf_r>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	460e      	mov	r6, r1
 8005b38:	4614      	mov	r4, r2
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	b118      	cbz	r0, 8005b46 <__swbuf_r+0x12>
 8005b3e:	6a03      	ldr	r3, [r0, #32]
 8005b40:	b90b      	cbnz	r3, 8005b46 <__swbuf_r+0x12>
 8005b42:	f7ff fa7d 	bl	8005040 <__sinit>
 8005b46:	69a3      	ldr	r3, [r4, #24]
 8005b48:	60a3      	str	r3, [r4, #8]
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	071a      	lsls	r2, r3, #28
 8005b4e:	d501      	bpl.n	8005b54 <__swbuf_r+0x20>
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	b943      	cbnz	r3, 8005b66 <__swbuf_r+0x32>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 f82a 	bl	8005bb0 <__swsetup_r>
 8005b5c:	b118      	cbz	r0, 8005b66 <__swbuf_r+0x32>
 8005b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b62:	4638      	mov	r0, r7
 8005b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	1a98      	subs	r0, r3, r2
 8005b6c:	6963      	ldr	r3, [r4, #20]
 8005b6e:	b2f6      	uxtb	r6, r6
 8005b70:	4283      	cmp	r3, r0
 8005b72:	4637      	mov	r7, r6
 8005b74:	dc05      	bgt.n	8005b82 <__swbuf_r+0x4e>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7ff ffb3 	bl	8005ae4 <_fflush_r>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d1ed      	bne.n	8005b5e <__swbuf_r+0x2a>
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60a3      	str	r3, [r4, #8]
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	701e      	strb	r6, [r3, #0]
 8005b90:	6962      	ldr	r2, [r4, #20]
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d004      	beq.n	8005ba2 <__swbuf_r+0x6e>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	07db      	lsls	r3, r3, #31
 8005b9c:	d5e1      	bpl.n	8005b62 <__swbuf_r+0x2e>
 8005b9e:	2e0a      	cmp	r6, #10
 8005ba0:	d1df      	bne.n	8005b62 <__swbuf_r+0x2e>
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f7ff ff9d 	bl	8005ae4 <_fflush_r>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d0d9      	beq.n	8005b62 <__swbuf_r+0x2e>
 8005bae:	e7d6      	b.n	8005b5e <__swbuf_r+0x2a>

08005bb0 <__swsetup_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4b29      	ldr	r3, [pc, #164]	@ (8005c58 <__swsetup_r+0xa8>)
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	460c      	mov	r4, r1
 8005bba:	b118      	cbz	r0, 8005bc4 <__swsetup_r+0x14>
 8005bbc:	6a03      	ldr	r3, [r0, #32]
 8005bbe:	b90b      	cbnz	r3, 8005bc4 <__swsetup_r+0x14>
 8005bc0:	f7ff fa3e 	bl	8005040 <__sinit>
 8005bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc8:	0719      	lsls	r1, r3, #28
 8005bca:	d422      	bmi.n	8005c12 <__swsetup_r+0x62>
 8005bcc:	06da      	lsls	r2, r3, #27
 8005bce:	d407      	bmi.n	8005be0 <__swsetup_r+0x30>
 8005bd0:	2209      	movs	r2, #9
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	e033      	b.n	8005c48 <__swsetup_r+0x98>
 8005be0:	0758      	lsls	r0, r3, #29
 8005be2:	d512      	bpl.n	8005c0a <__swsetup_r+0x5a>
 8005be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005be6:	b141      	cbz	r1, 8005bfa <__swsetup_r+0x4a>
 8005be8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d002      	beq.n	8005bf6 <__swsetup_r+0x46>
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff fb2d 	bl	8005250 <_free_r>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	2300      	movs	r3, #0
 8005c04:	6063      	str	r3, [r4, #4]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f043 0308 	orr.w	r3, r3, #8
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	b94b      	cbnz	r3, 8005c2a <__swsetup_r+0x7a>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c20:	d003      	beq.n	8005c2a <__swsetup_r+0x7a>
 8005c22:	4621      	mov	r1, r4
 8005c24:	4628      	mov	r0, r5
 8005c26:	f000 f84f 	bl	8005cc8 <__smakebuf_r>
 8005c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2e:	f013 0201 	ands.w	r2, r3, #1
 8005c32:	d00a      	beq.n	8005c4a <__swsetup_r+0x9a>
 8005c34:	2200      	movs	r2, #0
 8005c36:	60a2      	str	r2, [r4, #8]
 8005c38:	6962      	ldr	r2, [r4, #20]
 8005c3a:	4252      	negs	r2, r2
 8005c3c:	61a2      	str	r2, [r4, #24]
 8005c3e:	6922      	ldr	r2, [r4, #16]
 8005c40:	b942      	cbnz	r2, 8005c54 <__swsetup_r+0xa4>
 8005c42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c46:	d1c5      	bne.n	8005bd4 <__swsetup_r+0x24>
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	0799      	lsls	r1, r3, #30
 8005c4c:	bf58      	it	pl
 8005c4e:	6962      	ldrpl	r2, [r4, #20]
 8005c50:	60a2      	str	r2, [r4, #8]
 8005c52:	e7f4      	b.n	8005c3e <__swsetup_r+0x8e>
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7f7      	b.n	8005c48 <__swsetup_r+0x98>
 8005c58:	2000001c 	.word	0x2000001c

08005c5c <_sbrk_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d06      	ldr	r5, [pc, #24]	@ (8005c78 <_sbrk_r+0x1c>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	f7fb f962 	bl	8000f30 <_sbrk>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_sbrk_r+0x1a>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_sbrk_r+0x1a>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	200006cc 	.word	0x200006cc

08005c7c <__swhatbuf_r>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	460c      	mov	r4, r1
 8005c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c84:	2900      	cmp	r1, #0
 8005c86:	b096      	sub	sp, #88	@ 0x58
 8005c88:	4615      	mov	r5, r2
 8005c8a:	461e      	mov	r6, r3
 8005c8c:	da0d      	bge.n	8005caa <__swhatbuf_r+0x2e>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	bf14      	ite	ne
 8005c9a:	2340      	movne	r3, #64	@ 0x40
 8005c9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	6031      	str	r1, [r6, #0]
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	b016      	add	sp, #88	@ 0x58
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	466a      	mov	r2, sp
 8005cac:	f000 f848 	bl	8005d40 <_fstat_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dbec      	blt.n	8005c8e <__swhatbuf_r+0x12>
 8005cb4:	9901      	ldr	r1, [sp, #4]
 8005cb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cbe:	4259      	negs	r1, r3
 8005cc0:	4159      	adcs	r1, r3
 8005cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cc6:	e7eb      	b.n	8005ca0 <__swhatbuf_r+0x24>

08005cc8 <__smakebuf_r>:
 8005cc8:	898b      	ldrh	r3, [r1, #12]
 8005cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ccc:	079d      	lsls	r5, r3, #30
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	d507      	bpl.n	8005ce4 <__smakebuf_r+0x1c>
 8005cd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	6163      	str	r3, [r4, #20]
 8005ce0:	b003      	add	sp, #12
 8005ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce4:	ab01      	add	r3, sp, #4
 8005ce6:	466a      	mov	r2, sp
 8005ce8:	f7ff ffc8 	bl	8005c7c <__swhatbuf_r>
 8005cec:	9f00      	ldr	r7, [sp, #0]
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff fb18 	bl	8005328 <_malloc_r>
 8005cf8:	b948      	cbnz	r0, 8005d0e <__smakebuf_r+0x46>
 8005cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfe:	059a      	lsls	r2, r3, #22
 8005d00:	d4ee      	bmi.n	8005ce0 <__smakebuf_r+0x18>
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0302 	orr.w	r3, r3, #2
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	e7e2      	b.n	8005cd4 <__smakebuf_r+0xc>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	6020      	str	r0, [r4, #0]
 8005d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	9b01      	ldr	r3, [sp, #4]
 8005d1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d1e:	b15b      	cbz	r3, 8005d38 <__smakebuf_r+0x70>
 8005d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 f81d 	bl	8005d64 <_isatty_r>
 8005d2a:	b128      	cbz	r0, 8005d38 <__smakebuf_r+0x70>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	431d      	orrs	r5, r3
 8005d3c:	81a5      	strh	r5, [r4, #12]
 8005d3e:	e7cf      	b.n	8005ce0 <__smakebuf_r+0x18>

08005d40 <_fstat_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d07      	ldr	r5, [pc, #28]	@ (8005d60 <_fstat_r+0x20>)
 8005d44:	2300      	movs	r3, #0
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	602b      	str	r3, [r5, #0]
 8005d4e:	f7fb f8e5 	bl	8000f1c <_fstat>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d102      	bne.n	8005d5c <_fstat_r+0x1c>
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	b103      	cbz	r3, 8005d5c <_fstat_r+0x1c>
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
 8005d5e:	bf00      	nop
 8005d60:	200006cc 	.word	0x200006cc

08005d64 <_isatty_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d06      	ldr	r5, [pc, #24]	@ (8005d80 <_isatty_r+0x1c>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	f7fb f8da 	bl	8000f28 <_isatty>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_isatty_r+0x1a>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_isatty_r+0x1a>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	200006cc 	.word	0x200006cc

08005d84 <_init>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr

08005d90 <_fini>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr
